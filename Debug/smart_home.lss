
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ea  00800060  00004a46  00004ada  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080034a  0080034a  00004dc4  2**0
                  ALLOC
  3 .stab         00005994  00000000  00000000  00004dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cd8  00000000  00000000  0000a758  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000c430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000c804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000ee16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000102e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000115f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000117d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00011ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000124f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e4       	ldi	r26, 0x4A	; 74
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 34       	cpi	r26, 0x4F	; 79
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1b 11 	call	0x2236	; 0x2236 <main>
      8a:	0c 94 21 25 	jmp	0x4a42	; 0x4a42 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 24 	jmp	0x49d4	; 0x49d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e2       	ldi	r26, 0x29	; 41
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 24 	jmp	0x49d4	; 0x49d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e2       	ldi	r24, 0x29	; 41
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 25 	jmp	0x4a0c	; 0x4a0c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e2       	ldi	r22, 0x29	; 41
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f3 24 	jmp	0x49e6	; 0x49e6 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 0f 25 	jmp	0x4a1e	; 0x4a1e <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 fa 24 	jmp	0x49f4	; 0x49f4 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ef 5c       	subi	r30, 0xCF	; 207
     b86:	fd 4f       	sbci	r31, 0xFD	; 253
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <TVandACinit>:
#include "../../LIB/math/datatypes.h"
#include "../../MCAL/dio/dio.h"
#include "../../MCAL/adc/adc.h"
#include "./tv.h"
AC_MODE mode;
void TVandACinit(){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	MADC_vidInit(AVCC,PRE_SCALER_1);
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	62 e0       	ldi	r22, 0x02	; 2
     ef6:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <MADC_vidInit>
	DIO_VIDSetPinDirection(AC_TV_PORT,TV_PIN,OUTPUT);
     efa:	84 e4       	ldi	r24, 0x44	; 68
     efc:	62 e0       	ldi	r22, 0x02	; 2
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
	DIO_VIDSetPinDirection(AC_TV_PORT,AC_PIN,OUTPUT);
     f04:	84 e4       	ldi	r24, 0x44	; 68
     f06:	67 e0       	ldi	r22, 0x07	; 7
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
}
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <switchOffTVAndAC>:
void switchOffTVAndAC(){
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	DIO_VIDSetPinValue(AC_TV_PORT,TV_PIN,LOW);
     f1c:	84 e4       	ldi	r24, 0x44	; 68
     f1e:	62 e0       	ldi	r22, 0x02	; 2
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(AC_TV_PORT,AC_PIN,LOW);
     f26:	84 e4       	ldi	r24, 0x44	; 68
     f28:	67 e0       	ldi	r22, 0x07	; 7
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
}
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <turnOnTV>:
void turnOnTV(){
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62

	DIO_VIDSetPinValue(AC_TV_PORT,TV_PIN,HIGH);
     f3e:	84 e4       	ldi	r24, 0x44	; 68
     f40:	62 e0       	ldi	r22, 0x02	; 2
     f42:	41 e0       	ldi	r20, 0x01	; 1
     f44:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <turnOffTV>:
void turnOffTV(){
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	DIO_VIDSetPinValue(AC_TV_PORT,TV_PIN,LOW);
     f56:	84 e4       	ldi	r24, 0x44	; 68
     f58:	62 e0       	ldi	r22, 0x02	; 2
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
}
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <turnOnAC>:
void turnOnAC(){
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62

	DIO_VIDSetPinValue(AC_TV_PORT,AC_PIN,HIGH);
     f6e:	84 e4       	ldi	r24, 0x44	; 68
     f70:	67 e0       	ldi	r22, 0x07	; 7
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	mode=ON_MODE;
     f78:	10 92 4a 03 	sts	0x034A, r1
}
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <turnOffAC>:
void turnOffAC(){
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	DIO_VIDSetPinValue(AC_TV_PORT,AC_PIN,LOW);
     f8a:	84 e4       	ldi	r24, 0x44	; 68
     f8c:	67 e0       	ldi	r22, 0x07	; 7
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	mode= OFF_MODE;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	80 93 4a 03 	sts	0x034A, r24
}
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <autoAC>:
void autoAC(){
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	0f 92       	push	r0
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	u8 temprature = MADC_u8getTemprature(AC_CHANNEL);
     faa:	87 e0       	ldi	r24, 0x07	; 7
     fac:	0e 94 72 19 	call	0x32e4	; 0x32e4 <MADC_u8getTemprature>
     fb0:	89 83       	std	Y+1, r24	; 0x01
	if(temprature>AUTO_TEMP){
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	8c 31       	cpi	r24, 0x1C	; 28
     fb6:	30 f0       	brcs	.+12     	; 0xfc4 <autoAC+0x24>
		DIO_VIDSetPinValue(AC_TV_PORT,AC_PIN,HIGH);
     fb8:	84 e4       	ldi	r24, 0x44	; 68
     fba:	67 e0       	ldi	r22, 0x07	; 7
     fbc:	41 e0       	ldi	r20, 0x01	; 1
     fbe:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
     fc2:	05 c0       	rjmp	.+10     	; 0xfce <autoAC+0x2e>
	}else{
		DIO_VIDSetPinValue(AC_TV_PORT,AC_PIN,LOW);
     fc4:	84 e4       	ldi	r24, 0x44	; 68
     fc6:	67 e0       	ldi	r22, 0x07	; 7
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	}
	mode= AUTO_MODE;
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	80 93 4a 03 	sts	0x034A, r24
}
     fd4:	0f 90       	pop	r0
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <ACautoListen>:
void ACautoListen(){
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
	if(mode == AUTO_MODE){
     fe4:	80 91 4a 03 	lds	r24, 0x034A
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	11 f4       	brne	.+4      	; 0xff0 <ACautoListen+0x14>
		autoAC();
     fec:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <autoAC>
	}
}
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <switchOffRooms>:
#include "./room.h"
LIGHT_MODE room1;
LIGHT_MODE room2;
LIGHT_MODE room3;
LIGHT_MODE room4;
void switchOffRooms(){
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
	DIO_VIDSetPinValue(ROOMS_PORT,ROOM1_PIN,LOW);
     ffe:	84 e4       	ldi	r24, 0x44	; 68
    1000:	63 e0       	ldi	r22, 0x03	; 3
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(ROOMS_PORT,ROOM2_PIN,LOW);
    1008:	84 e4       	ldi	r24, 0x44	; 68
    100a:	64 e0       	ldi	r22, 0x04	; 4
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(ROOMS_PORT,ROOM3_PIN,LOW);
    1012:	84 e4       	ldi	r24, 0x44	; 68
    1014:	65 e0       	ldi	r22, 0x05	; 5
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(ROOMS_PORT,ROOM4_PIN,LOW);
    101c:	84 e4       	ldi	r24, 0x44	; 68
    101e:	66 e0       	ldi	r22, 0x06	; 6
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>

}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <ROOM_vidInit>:
void ROOM_vidInit(){
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	DIO_VIDSetPinDirection(ROOMS_PORT,ROOM1_PIN,OUTPUT);
    1034:	84 e4       	ldi	r24, 0x44	; 68
    1036:	63 e0       	ldi	r22, 0x03	; 3
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
	DIO_VIDSetPinDirection(ROOMS_PORT,ROOM2_PIN,OUTPUT);
    103e:	84 e4       	ldi	r24, 0x44	; 68
    1040:	64 e0       	ldi	r22, 0x04	; 4
    1042:	41 e0       	ldi	r20, 0x01	; 1
    1044:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
	DIO_VIDSetPinDirection(ROOMS_PORT,ROOM3_PIN,OUTPUT);
    1048:	84 e4       	ldi	r24, 0x44	; 68
    104a:	65 e0       	ldi	r22, 0x05	; 5
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
	DIO_VIDSetPinDirection(ROOMS_PORT,ROOM4_PIN,OUTPUT);
    1052:	84 e4       	ldi	r24, 0x44	; 68
    1054:	66 e0       	ldi	r22, 0x06	; 6
    1056:	41 e0       	ldi	r20, 0x01	; 1
    1058:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
	MADC_vidInit(AVCC,PRE_SCALER_1);
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	62 e0       	ldi	r22, 0x02	; 2
    1060:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <MADC_vidInit>
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <ROOM_switchOn>:
void ROOM_switchOn(u8 roomNumber){
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	89 83       	std	Y+1, r24	; 0x01
	DIO_VIDSetPinValue(ROOMS_PORT,roomNumber,HIGH);
    1076:	84 e4       	ldi	r24, 0x44	; 68
    1078:	69 81       	ldd	r22, Y+1	; 0x01
    107a:	41 e0       	ldi	r20, 0x01	; 1
    107c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	setRoomMode(roomNumber,ON);
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	61 e0       	ldi	r22, 0x01	; 1
    1084:	0e 94 b7 08 	call	0x116e	; 0x116e <setRoomMode>
}
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <ROOM_switchOff>:
void ROOM_switchOff(u8 roomNumber){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01
	DIO_VIDSetPinValue(ROOMS_PORT,roomNumber,LOW);
    109c:	84 e4       	ldi	r24, 0x44	; 68
    109e:	69 81       	ldd	r22, Y+1	; 0x01
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	setRoomMode(roomNumber,OFF);
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	0e 94 b7 08 	call	0x116e	; 0x116e <setRoomMode>
}
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <ROOM_AutoLight>:
void ROOM_AutoLight(u8 roomNumber){
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <ROOM_AutoLight+0x6>
    10bc:	00 d0       	rcall	.+0      	; 0x10be <ROOM_AutoLight+0x8>
    10be:	0f 92       	push	r0
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	8b 83       	std	Y+3, r24	; 0x03
	u16 x;
	switch (roomNumber){
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3d 83       	std	Y+5, r19	; 0x05
    10ce:	2c 83       	std	Y+4, r18	; 0x04
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	91 05       	cpc	r25, r1
    10d8:	e1 f0       	breq	.+56     	; 0x1112 <ROOM_AutoLight+0x5c>
    10da:	2c 81       	ldd	r18, Y+4	; 0x04
    10dc:	3d 81       	ldd	r19, Y+5	; 0x05
    10de:	25 30       	cpi	r18, 0x05	; 5
    10e0:	31 05       	cpc	r19, r1
    10e2:	34 f4       	brge	.+12     	; 0x10f0 <ROOM_AutoLight+0x3a>
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	91 05       	cpc	r25, r1
    10ec:	61 f0       	breq	.+24     	; 0x1106 <ROOM_AutoLight+0x50>
    10ee:	22 c0       	rjmp	.+68     	; 0x1134 <ROOM_AutoLight+0x7e>
    10f0:	2c 81       	ldd	r18, Y+4	; 0x04
    10f2:	3d 81       	ldd	r19, Y+5	; 0x05
    10f4:	25 30       	cpi	r18, 0x05	; 5
    10f6:	31 05       	cpc	r19, r1
    10f8:	91 f0       	breq	.+36     	; 0x111e <ROOM_AutoLight+0x68>
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	86 30       	cpi	r24, 0x06	; 6
    1100:	91 05       	cpc	r25, r1
    1102:	99 f0       	breq	.+38     	; 0x112a <ROOM_AutoLight+0x74>
    1104:	17 c0       	rjmp	.+46     	; 0x1134 <ROOM_AutoLight+0x7e>
		case ROOM1_PIN:
			x = MADC_u16Read(ROOM1_CHANNEL);
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	0e 94 cc 18 	call	0x3198	; 0x3198 <MADC_u16Read>
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	11 c0       	rjmp	.+34     	; 0x1134 <ROOM_AutoLight+0x7e>
			break;
		case ROOM2_PIN:
			x = MADC_u16Read(ROOM2_CHANNEL);
    1112:	84 e0       	ldi	r24, 0x04	; 4
    1114:	0e 94 cc 18 	call	0x3198	; 0x3198 <MADC_u16Read>
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	0b c0       	rjmp	.+22     	; 0x1134 <ROOM_AutoLight+0x7e>
			break;
		case ROOM3_PIN:
			x = MADC_u16Read(ROOM3_CHANNEL);
    111e:	85 e0       	ldi	r24, 0x05	; 5
    1120:	0e 94 cc 18 	call	0x3198	; 0x3198 <MADC_u16Read>
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	05 c0       	rjmp	.+10     	; 0x1134 <ROOM_AutoLight+0x7e>
			break;
		case ROOM4_PIN:
			x = MADC_u16Read(ROOM1_CHANNEL);
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	0e 94 cc 18 	call	0x3198	; 0x3198 <MADC_u16Read>
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			break;
	}

	if(x<465){
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	21 e0       	ldi	r18, 0x01	; 1
    113a:	81 3d       	cpi	r24, 0xD1	; 209
    113c:	92 07       	cpc	r25, r18
    113e:	30 f4       	brcc	.+12     	; 0x114c <ROOM_AutoLight+0x96>
		DIO_VIDSetPinValue(ROOMS_PORT,roomNumber,HIGH);
    1140:	84 e4       	ldi	r24, 0x44	; 68
    1142:	6b 81       	ldd	r22, Y+3	; 0x03
    1144:	41 e0       	ldi	r20, 0x01	; 1
    1146:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <ROOM_AutoLight+0xa0>
	}else{
		DIO_VIDSetPinValue(ROOMS_PORT,roomNumber,LOW);
    114c:	84 e4       	ldi	r24, 0x44	; 68
    114e:	6b 81       	ldd	r22, Y+3	; 0x03
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	}
	setRoomMode(roomNumber,AUTO);
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	62 e0       	ldi	r22, 0x02	; 2
    115a:	0e 94 b7 08 	call	0x116e	; 0x116e <setRoomMode>
}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <setRoomMode>:
void setRoomMode(u8 roomNumber ,LIGHT_MODE state){
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <setRoomMode+0x6>
    1174:	00 d0       	rcall	.+0      	; 0x1176 <setRoomMode+0x8>
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	6a 83       	std	Y+2, r22	; 0x02
	switch (roomNumber){
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3c 83       	std	Y+4, r19	; 0x04
    1186:	2b 83       	std	Y+3, r18	; 0x03
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	91 05       	cpc	r25, r1
    1190:	d1 f0       	breq	.+52     	; 0x11c6 <setRoomMode+0x58>
    1192:	2b 81       	ldd	r18, Y+3	; 0x03
    1194:	3c 81       	ldd	r19, Y+4	; 0x04
    1196:	25 30       	cpi	r18, 0x05	; 5
    1198:	31 05       	cpc	r19, r1
    119a:	34 f4       	brge	.+12     	; 0x11a8 <setRoomMode+0x3a>
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	61 f0       	breq	.+24     	; 0x11be <setRoomMode+0x50>
    11a6:	1a c0       	rjmp	.+52     	; 0x11dc <setRoomMode+0x6e>
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	25 30       	cpi	r18, 0x05	; 5
    11ae:	31 05       	cpc	r19, r1
    11b0:	71 f0       	breq	.+28     	; 0x11ce <setRoomMode+0x60>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	86 30       	cpi	r24, 0x06	; 6
    11b8:	91 05       	cpc	r25, r1
    11ba:	69 f0       	breq	.+26     	; 0x11d6 <setRoomMode+0x68>
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <setRoomMode+0x6e>
		case ROOM1_PIN:
			room1 = state;
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	80 93 4d 03 	sts	0x034D, r24
    11c4:	0b c0       	rjmp	.+22     	; 0x11dc <setRoomMode+0x6e>
			break;
		case ROOM2_PIN:
			room2 = state;
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	80 93 4b 03 	sts	0x034B, r24
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <setRoomMode+0x6e>
			break;
		case ROOM3_PIN:
			room3 = state;
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	80 93 4e 03 	sts	0x034E, r24
    11d4:	03 c0       	rjmp	.+6      	; 0x11dc <setRoomMode+0x6e>
			break;
		case ROOM4_PIN:
			room4 = state;
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	80 93 4c 03 	sts	0x034C, r24
			break;
		default:
			break;
	}
}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <autoListener>:
void autoListener(){
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
		if(room1==AUTO){
    11f2:	80 91 4d 03 	lds	r24, 0x034D
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	19 f4       	brne	.+6      	; 0x1200 <autoListener+0x16>
			ROOM_AutoLight(ROOM1_PIN);
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <ROOM_AutoLight>
		}
		if(room2==AUTO){
    1200:	80 91 4b 03 	lds	r24, 0x034B
    1204:	82 30       	cpi	r24, 0x02	; 2
    1206:	19 f4       	brne	.+6      	; 0x120e <autoListener+0x24>
			ROOM_AutoLight(ROOM2_PIN);
    1208:	84 e0       	ldi	r24, 0x04	; 4
    120a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <ROOM_AutoLight>
		}
		if(room3==AUTO){
    120e:	80 91 4e 03 	lds	r24, 0x034E
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	19 f4       	brne	.+6      	; 0x121c <autoListener+0x32>
			ROOM_AutoLight(ROOM3_PIN);
    1216:	85 e0       	ldi	r24, 0x05	; 5
    1218:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <ROOM_AutoLight>
		}
		if(room4==AUTO){
    121c:	80 91 4c 03 	lds	r24, 0x034C
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	19 f4       	brne	.+6      	; 0x122a <autoListener+0x40>
			ROOM_AutoLight(ROOM4_PIN);
    1224:	86 e0       	ldi	r24, 0x06	; 6
    1226:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <ROOM_AutoLight>
		}
;
}
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <enableDoor>:
 *      Author: ASHRY
 */
#include "../../LIB/math/datatypes.h"
#include "../../HAL/steppermotor/steppermotor.h"
#include "./door.h"
void enableDoor(){
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	MOTOR_Init();
    1238:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <MOTOR_Init>
}
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <openDoor>:
void openDoor(){
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	MOTOR_CW();
    124a:	0e 94 18 1b 	call	0x3630	; 0x3630 <MOTOR_CW>
}
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <closeDoor>:
void closeDoor(){
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
	MOTOR_CCW();
    125c:	0e 94 2e 1b 	call	0x365c	; 0x365c <MOTOR_CCW>
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <displayTVPage>:
#include "../../room/room.h"
#include "../../tv/tv.h"
#include "../roompage/roompage.h"
#include "../doorpage/doorpage.h"
#include "./tvpage.h"
void displayTVPage(){
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <displayTVPage+0x6>
    126c:	0f 92       	push	r0
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
	autoListener();
    1272:	0e 94 f5 08 	call	0x11ea	; 0x11ea <autoListener>
	ACautoListen();
    1276:	0e 94 ee 07 	call	0xfdc	; 0xfdc <ACautoListen>
	u8 key = '+';
    127a:	8b e2       	ldi	r24, 0x2B	; 43
    127c:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
    127e:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	HCLCD_vidGoTo(0,0);
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("8.TV        9.AC");
    128a:	80 e6       	ldi	r24, 0x60	; 96
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
	HCLCD_vidGoTo(0,1);
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("0.door    *.back");
    129a:	81 e7       	ldi	r24, 0x71	; 113
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <displayTVPage+0x44>

	while( key != '8' && key != '9' && key !='0' && key !='*'){
		key = HKEYPAD_u8getPressedValue();
    12a4:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    12a8:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("8.TV        9.AC");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("0.door    *.back");

	while( key != '8' && key != '9' && key !='0' && key !='*'){
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	88 33       	cpi	r24, 0x38	; 56
    12ae:	49 f0       	breq	.+18     	; 0x12c2 <displayTVPage+0x5c>
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	89 33       	cpi	r24, 0x39	; 57
    12b4:	31 f0       	breq	.+12     	; 0x12c2 <displayTVPage+0x5c>
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	80 33       	cpi	r24, 0x30	; 48
    12ba:	19 f0       	breq	.+6      	; 0x12c2 <displayTVPage+0x5c>
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	8a 32       	cpi	r24, 0x2A	; 42
    12c0:	89 f7       	brne	.-30     	; 0x12a4 <displayTVPage+0x3e>
		key = HKEYPAD_u8getPressedValue();
	}
	switch(key){
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	3b 83       	std	Y+3, r19	; 0x03
    12ca:	2a 83       	std	Y+2, r18	; 0x02
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	9b 81       	ldd	r25, Y+3	; 0x03
    12d0:	88 33       	cpi	r24, 0x38	; 56
    12d2:	91 05       	cpc	r25, r1
    12d4:	b1 f0       	breq	.+44     	; 0x1302 <displayTVPage+0x9c>
    12d6:	2a 81       	ldd	r18, Y+2	; 0x02
    12d8:	3b 81       	ldd	r19, Y+3	; 0x03
    12da:	29 33       	cpi	r18, 0x39	; 57
    12dc:	31 05       	cpc	r19, r1
    12de:	5c f4       	brge	.+22     	; 0x12f6 <displayTVPage+0x90>
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	9b 81       	ldd	r25, Y+3	; 0x03
    12e4:	8a 32       	cpi	r24, 0x2A	; 42
    12e6:	91 05       	cpc	r25, r1
    12e8:	a9 f0       	breq	.+42     	; 0x1314 <displayTVPage+0xae>
    12ea:	2a 81       	ldd	r18, Y+2	; 0x02
    12ec:	3b 81       	ldd	r19, Y+3	; 0x03
    12ee:	20 33       	cpi	r18, 0x30	; 48
    12f0:	31 05       	cpc	r19, r1
    12f2:	69 f0       	breq	.+26     	; 0x130e <displayTVPage+0xa8>
    12f4:	11 c0       	rjmp	.+34     	; 0x1318 <displayTVPage+0xb2>
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	89 33       	cpi	r24, 0x39	; 57
    12fc:	91 05       	cpc	r25, r1
    12fe:	21 f0       	breq	.+8      	; 0x1308 <displayTVPage+0xa2>
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <displayTVPage+0xb2>
	case '8' :
		displayTVSetting();
    1302:	0e 94 f7 09 	call	0x13ee	; 0x13ee <displayTVSetting>
    1306:	08 c0       	rjmp	.+16     	; 0x1318 <displayTVPage+0xb2>
		break;
	case '9' :
		displayACSetting();
    1308:	0e 94 92 09 	call	0x1324	; 0x1324 <displayACSetting>
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <displayTVPage+0xb2>
		break;
	case '0' :
		displayDoorSetting();
    130e:	0e 94 9d 0b 	call	0x173a	; 0x173a <displayDoorSetting>
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <displayTVPage+0xb2>
		break;
	case '*' :
		displayRoomPageTwo();
    1314:	0e 94 ab 0a 	call	0x1556	; 0x1556 <displayRoomPageTwo>
		break;
	default :
		break;
	}

}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <displayACSetting>:
void displayACSetting(){
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <displayACSetting+0x6>
    132a:	0f 92       	push	r0
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	autoListener();
    1330:	0e 94 f5 08 	call	0x11ea	; 0x11ea <autoListener>
	ACautoListen();
    1334:	0e 94 ee 07 	call	0xfdc	; 0xfdc <ACautoListen>
	u8 key = '+';
    1338:	8b e2       	ldi	r24, 0x2B	; 43
    133a:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
    133c:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	HCLCD_vidGoTo(0,0);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("1.on       2.off");
    1348:	82 e8       	ldi	r24, 0x82	; 130
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
	HCLCD_vidGoTo(0,1);
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("3.auto    *.back");
    1358:	83 e9       	ldi	r24, 0x93	; 147
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
    1360:	3d c0       	rjmp	.+122    	; 0x13dc <displayACSetting+0xb8>
	while(key!='*'){
		while( key != '1' && key != '2' && key !='3' && key !='*'){
			key = HKEYPAD_u8getPressedValue();
    1362:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    1366:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("1.on       2.off");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("3.auto    *.back");
	while(key!='*'){
		while( key != '1' && key != '2' && key !='3' && key !='*'){
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	81 33       	cpi	r24, 0x31	; 49
    136c:	49 f0       	breq	.+18     	; 0x1380 <displayACSetting+0x5c>
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	82 33       	cpi	r24, 0x32	; 50
    1372:	31 f0       	breq	.+12     	; 0x1380 <displayACSetting+0x5c>
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	83 33       	cpi	r24, 0x33	; 51
    1378:	19 f0       	breq	.+6      	; 0x1380 <displayACSetting+0x5c>
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	8a 32       	cpi	r24, 0x2A	; 42
    137e:	89 f7       	brne	.-30     	; 0x1362 <displayACSetting+0x3e>
			key = HKEYPAD_u8getPressedValue();
		}
		switch(key){
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	3b 83       	std	Y+3, r19	; 0x03
    1388:	2a 83       	std	Y+2, r18	; 0x02
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	9b 81       	ldd	r25, Y+3	; 0x03
    138e:	82 33       	cpi	r24, 0x32	; 50
    1390:	91 05       	cpc	r25, r1
    1392:	c9 f0       	breq	.+50     	; 0x13c6 <displayACSetting+0xa2>
    1394:	2a 81       	ldd	r18, Y+2	; 0x02
    1396:	3b 81       	ldd	r19, Y+3	; 0x03
    1398:	23 33       	cpi	r18, 0x33	; 51
    139a:	31 05       	cpc	r19, r1
    139c:	5c f4       	brge	.+22     	; 0x13b4 <displayACSetting+0x90>
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	9b 81       	ldd	r25, Y+3	; 0x03
    13a2:	8a 32       	cpi	r24, 0x2A	; 42
    13a4:	91 05       	cpc	r25, r1
    13a6:	a9 f0       	breq	.+42     	; 0x13d2 <displayACSetting+0xae>
    13a8:	2a 81       	ldd	r18, Y+2	; 0x02
    13aa:	3b 81       	ldd	r19, Y+3	; 0x03
    13ac:	21 33       	cpi	r18, 0x31	; 49
    13ae:	31 05       	cpc	r19, r1
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <displayACSetting+0x9c>
    13b2:	11 c0       	rjmp	.+34     	; 0x13d6 <displayACSetting+0xb2>
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	9b 81       	ldd	r25, Y+3	; 0x03
    13b8:	83 33       	cpi	r24, 0x33	; 51
    13ba:	91 05       	cpc	r25, r1
    13bc:	39 f0       	breq	.+14     	; 0x13cc <displayACSetting+0xa8>
    13be:	0b c0       	rjmp	.+22     	; 0x13d6 <displayACSetting+0xb2>
			case '1' :
				turnOnAC();
    13c0:	0e 94 b3 07 	call	0xf66	; 0xf66 <turnOnAC>
    13c4:	08 c0       	rjmp	.+16     	; 0x13d6 <displayACSetting+0xb2>
				break;
			case '2' :
				turnOffAC();
    13c6:	0e 94 c1 07 	call	0xf82	; 0xf82 <turnOffAC>
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <displayACSetting+0xb2>
				break;
			case '3' :
				autoAC();
    13cc:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <autoAC>
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <displayACSetting+0xb2>
				break;
			case '*' :
				displayTVPage();
    13d2:	0e 94 33 09 	call	0x1266	; 0x1266 <displayTVPage>
				break;
			default :
				break;
		}
		key = HKEYPAD_u8getPressedValue();
    13d6:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    13da:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("1.on       2.off");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("3.auto    *.back");
	while(key!='*'){
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	8a 32       	cpi	r24, 0x2A	; 42
    13e0:	19 f6       	brne	.-122    	; 0x1368 <displayACSetting+0x44>
			default :
				break;
		}
		key = HKEYPAD_u8getPressedValue();
	}
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <displayTVSetting>:
void displayTVSetting(){
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <displayTVSetting+0x6>
    13f4:	0f 92       	push	r0
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	autoListener();
    13fa:	0e 94 f5 08 	call	0x11ea	; 0x11ea <autoListener>
	ACautoListen();
    13fe:	0e 94 ee 07 	call	0xfdc	; 0xfdc <ACautoListen>
	u8 key = '+';
    1402:	8b e2       	ldi	r24, 0x2B	; 43
    1404:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
    1406:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	HCLCD_vidGoTo(0,0);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("1.on       2.off");
    1412:	82 e8       	ldi	r24, 0x82	; 130
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
	HCLCD_vidGoTo(0,1);
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	61 e0       	ldi	r22, 0x01	; 1
    141e:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("*.back");
    1422:	84 ea       	ldi	r24, 0xA4	; 164
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
    142a:	2c c0       	rjmp	.+88     	; 0x1484 <displayTVSetting+0x96>
	while(key!='*'){
		while( key != '1' && key != '2' && key !='*'){
			key = HKEYPAD_u8getPressedValue();
    142c:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    1430:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("1.on       2.off");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("*.back");
	while(key!='*'){
		while( key != '1' && key != '2' && key !='*'){
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	81 33       	cpi	r24, 0x31	; 49
    1436:	31 f0       	breq	.+12     	; 0x1444 <displayTVSetting+0x56>
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	82 33       	cpi	r24, 0x32	; 50
    143c:	19 f0       	breq	.+6      	; 0x1444 <displayTVSetting+0x56>
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	8a 32       	cpi	r24, 0x2A	; 42
    1442:	a1 f7       	brne	.-24     	; 0x142c <displayTVSetting+0x3e>
			key = HKEYPAD_u8getPressedValue();
		}
		switch(key){
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3b 83       	std	Y+3, r19	; 0x03
    144c:	2a 83       	std	Y+2, r18	; 0x02
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	9b 81       	ldd	r25, Y+3	; 0x03
    1452:	81 33       	cpi	r24, 0x31	; 49
    1454:	91 05       	cpc	r25, r1
    1456:	59 f0       	breq	.+22     	; 0x146e <displayTVSetting+0x80>
    1458:	2a 81       	ldd	r18, Y+2	; 0x02
    145a:	3b 81       	ldd	r19, Y+3	; 0x03
    145c:	22 33       	cpi	r18, 0x32	; 50
    145e:	31 05       	cpc	r19, r1
    1460:	49 f0       	breq	.+18     	; 0x1474 <displayTVSetting+0x86>
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	9b 81       	ldd	r25, Y+3	; 0x03
    1466:	8a 32       	cpi	r24, 0x2A	; 42
    1468:	91 05       	cpc	r25, r1
    146a:	39 f0       	breq	.+14     	; 0x147a <displayTVSetting+0x8c>
    146c:	08 c0       	rjmp	.+16     	; 0x147e <displayTVSetting+0x90>
			case '1' :
				turnOnTV();
    146e:	0e 94 9b 07 	call	0xf36	; 0xf36 <turnOnTV>
    1472:	05 c0       	rjmp	.+10     	; 0x147e <displayTVSetting+0x90>
				break;
			case '2' :
				turnOffTV();
    1474:	0e 94 a7 07 	call	0xf4e	; 0xf4e <turnOffTV>
    1478:	02 c0       	rjmp	.+4      	; 0x147e <displayTVSetting+0x90>
				break;
			case '*' :
				displayTVPage();
    147a:	0e 94 33 09 	call	0x1266	; 0x1266 <displayTVPage>
				break;
			default :
				break;
		}
		key = HKEYPAD_u8getPressedValue();
    147e:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    1482:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("1.on       2.off");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("*.back");
	while(key!='*'){
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	8a 32       	cpi	r24, 0x2A	; 42
    1488:	a1 f6       	brne	.-88     	; 0x1432 <displayTVSetting+0x44>
				break;
		}
		key = HKEYPAD_u8getPressedValue();

	}
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <displayRoomPageOne>:
#include "../../room/room.h"
#include "../../tv/tv.h"
#include "../tvandac/tvpage.h"
#include "./roompage.h"

void displayRoomPageOne(){
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <displayRoomPageOne+0x6>
    149c:	0f 92       	push	r0
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
	autoListener();
    14a2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <autoListener>
	ACautoListen();
    14a6:	0e 94 ee 07 	call	0xfdc	; 0xfdc <ACautoListen>
	ROOM_vidInit();
    14aa:	0e 94 16 08 	call	0x102c	; 0x102c <ROOM_vidInit>
	u8 key = '+';
    14ae:	8b e2       	ldi	r24, 0x2B	; 43
    14b0:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
    14b2:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	HCLCD_vidGoTo(0,0);
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("4.room1  5.room2");
    14be:	8b ea       	ldi	r24, 0xAB	; 171
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
	HCLCD_vidGoTo(0,1);
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	61 e0       	ldi	r22, 0x01	; 1
    14ca:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("*.back    #.more");
    14ce:	8c eb       	ldi	r24, 0xBC	; 188
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
    14d6:	33 c0       	rjmp	.+102    	; 0x153e <displayRoomPageOne+0xa8>
	while(key!='*' && key !='#'){
		while( key != '4' && key != '5' && key !='*' && key !='#'){
			key = HKEYPAD_u8getPressedValue();
    14d8:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    14dc:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("4.room1  5.room2");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("*.back    #.more");
	while(key!='*' && key !='#'){
		while( key != '4' && key != '5' && key !='*' && key !='#'){
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	84 33       	cpi	r24, 0x34	; 52
    14e2:	49 f0       	breq	.+18     	; 0x14f6 <displayRoomPageOne+0x60>
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	85 33       	cpi	r24, 0x35	; 53
    14e8:	31 f0       	breq	.+12     	; 0x14f6 <displayRoomPageOne+0x60>
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	8a 32       	cpi	r24, 0x2A	; 42
    14ee:	19 f0       	breq	.+6      	; 0x14f6 <displayRoomPageOne+0x60>
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	83 32       	cpi	r24, 0x23	; 35
    14f4:	89 f7       	brne	.-30     	; 0x14d8 <displayRoomPageOne+0x42>
			key = HKEYPAD_u8getPressedValue();
		}
		switch(key){
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3b 83       	std	Y+3, r19	; 0x03
    14fe:	2a 83       	std	Y+2, r18	; 0x02
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	84 33       	cpi	r24, 0x34	; 52
    1506:	91 05       	cpc	r25, r1
    1508:	59 f0       	breq	.+22     	; 0x1520 <displayRoomPageOne+0x8a>
    150a:	2a 81       	ldd	r18, Y+2	; 0x02
    150c:	3b 81       	ldd	r19, Y+3	; 0x03
    150e:	25 33       	cpi	r18, 0x35	; 53
    1510:	31 05       	cpc	r19, r1
    1512:	59 f0       	breq	.+22     	; 0x152a <displayRoomPageOne+0x94>
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	9b 81       	ldd	r25, Y+3	; 0x03
    1518:	83 32       	cpi	r24, 0x23	; 35
    151a:	91 05       	cpc	r25, r1
    151c:	59 f0       	breq	.+22     	; 0x1534 <displayRoomPageOne+0x9e>
    151e:	0c c0       	rjmp	.+24     	; 0x1538 <displayRoomPageOne+0xa2>
			case '4' :
				displayRoomSetting(ROOM1_PIN,1);
    1520:	83 e0       	ldi	r24, 0x03	; 3
    1522:	61 e0       	ldi	r22, 0x01	; 1
    1524:	0e 94 18 0b 	call	0x1630	; 0x1630 <displayRoomSetting>
    1528:	07 c0       	rjmp	.+14     	; 0x1538 <displayRoomPageOne+0xa2>
				break;
			case '5' :
				displayRoomSetting(ROOM2_PIN,1);
    152a:	84 e0       	ldi	r24, 0x04	; 4
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	0e 94 18 0b 	call	0x1630	; 0x1630 <displayRoomSetting>
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <displayRoomPageOne+0xa2>
				break;
			case '#' :
				displayRoomPageTwo();
    1534:	0e 94 ab 0a 	call	0x1556	; 0x1556 <displayRoomPageTwo>
				break;
				break;
			default :
				break;
		}
		key = HKEYPAD_u8getPressedValue();
    1538:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    153c:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("4.room1  5.room2");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("*.back    #.more");
	while(key!='*' && key !='#'){
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	8a 32       	cpi	r24, 0x2A	; 42
    1542:	19 f0       	breq	.+6      	; 0x154a <displayRoomPageOne+0xb4>
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	83 32       	cpi	r24, 0x23	; 35
    1548:	51 f6       	brne	.-108    	; 0x14de <displayRoomPageOne+0x48>
				break;
		}
		key = HKEYPAD_u8getPressedValue();

	}
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <displayRoomPageTwo>:
void displayRoomPageTwo(){
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <displayRoomPageTwo+0x6>
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
	autoListener();
    1562:	0e 94 f5 08 	call	0x11ea	; 0x11ea <autoListener>
	ACautoListen();
    1566:	0e 94 ee 07 	call	0xfdc	; 0xfdc <ACautoListen>
	u8 key = '+';
    156a:	8b e2       	ldi	r24, 0x2B	; 43
    156c:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
    156e:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	HCLCD_vidGoTo(0,0);
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("6.room3  7.room4");
    157a:	8d ec       	ldi	r24, 0xCD	; 205
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
	HCLCD_vidGoTo(0,1);
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("*.back    #.more");
    158a:	8c eb       	ldi	r24, 0xBC	; 188
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
    1592:	41 c0       	rjmp	.+130    	; 0x1616 <displayRoomPageTwo+0xc0>
	while(key!='*'&& key!='#'){
		while( key != '6' && key != '7' && key !='*' && key !='#'){
			key = HKEYPAD_u8getPressedValue();
    1594:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    1598:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("6.room3  7.room4");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("*.back    #.more");
	while(key!='*'&& key!='#'){
		while( key != '6' && key != '7' && key !='*' && key !='#'){
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	86 33       	cpi	r24, 0x36	; 54
    159e:	49 f0       	breq	.+18     	; 0x15b2 <displayRoomPageTwo+0x5c>
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	87 33       	cpi	r24, 0x37	; 55
    15a4:	31 f0       	breq	.+12     	; 0x15b2 <displayRoomPageTwo+0x5c>
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	8a 32       	cpi	r24, 0x2A	; 42
    15aa:	19 f0       	breq	.+6      	; 0x15b2 <displayRoomPageTwo+0x5c>
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	83 32       	cpi	r24, 0x23	; 35
    15b0:	89 f7       	brne	.-30     	; 0x1594 <displayRoomPageTwo+0x3e>
			key = HKEYPAD_u8getPressedValue();
		}
		switch(key){
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	3b 83       	std	Y+3, r19	; 0x03
    15ba:	2a 83       	std	Y+2, r18	; 0x02
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	9b 81       	ldd	r25, Y+3	; 0x03
    15c0:	86 33       	cpi	r24, 0x36	; 54
    15c2:	91 05       	cpc	r25, r1
    15c4:	b1 f0       	breq	.+44     	; 0x15f2 <displayRoomPageTwo+0x9c>
    15c6:	2a 81       	ldd	r18, Y+2	; 0x02
    15c8:	3b 81       	ldd	r19, Y+3	; 0x03
    15ca:	27 33       	cpi	r18, 0x37	; 55
    15cc:	31 05       	cpc	r19, r1
    15ce:	5c f4       	brge	.+22     	; 0x15e6 <displayRoomPageTwo+0x90>
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	9b 81       	ldd	r25, Y+3	; 0x03
    15d4:	83 32       	cpi	r24, 0x23	; 35
    15d6:	91 05       	cpc	r25, r1
    15d8:	c9 f0       	breq	.+50     	; 0x160c <displayRoomPageTwo+0xb6>
    15da:	2a 81       	ldd	r18, Y+2	; 0x02
    15dc:	3b 81       	ldd	r19, Y+3	; 0x03
    15de:	2a 32       	cpi	r18, 0x2A	; 42
    15e0:	31 05       	cpc	r19, r1
    15e2:	89 f0       	breq	.+34     	; 0x1606 <displayRoomPageTwo+0xb0>
    15e4:	15 c0       	rjmp	.+42     	; 0x1610 <displayRoomPageTwo+0xba>
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ea:	87 33       	cpi	r24, 0x37	; 55
    15ec:	91 05       	cpc	r25, r1
    15ee:	31 f0       	breq	.+12     	; 0x15fc <displayRoomPageTwo+0xa6>
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <displayRoomPageTwo+0xba>
			case '6' :
				displayRoomSetting(ROOM3_PIN,2);
    15f2:	85 e0       	ldi	r24, 0x05	; 5
    15f4:	62 e0       	ldi	r22, 0x02	; 2
    15f6:	0e 94 18 0b 	call	0x1630	; 0x1630 <displayRoomSetting>
    15fa:	0a c0       	rjmp	.+20     	; 0x1610 <displayRoomPageTwo+0xba>
				break;
			case '7' :
				displayRoomSetting(ROOM4_PIN,2);
    15fc:	86 e0       	ldi	r24, 0x06	; 6
    15fe:	62 e0       	ldi	r22, 0x02	; 2
    1600:	0e 94 18 0b 	call	0x1630	; 0x1630 <displayRoomSetting>
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <displayRoomPageTwo+0xba>
				break;
			case '*' :
				displayRoomPageOne();
    1606:	0e 94 4b 0a 	call	0x1496	; 0x1496 <displayRoomPageOne>
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <displayRoomPageTwo+0xba>
				break;
			case '#' :
				displayTVPage();
    160c:	0e 94 33 09 	call	0x1266	; 0x1266 <displayTVPage>
				break;
			default :
				break;
		}
		key = HKEYPAD_u8getPressedValue();
    1610:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    1614:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("6.room3  7.room4");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("*.back    #.more");
	while(key!='*'&& key!='#'){
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	8a 32       	cpi	r24, 0x2A	; 42
    161a:	21 f0       	breq	.+8      	; 0x1624 <displayRoomPageTwo+0xce>
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	83 32       	cpi	r24, 0x23	; 35
    1620:	09 f0       	breq	.+2      	; 0x1624 <displayRoomPageTwo+0xce>
    1622:	bb cf       	rjmp	.-138    	; 0x159a <displayRoomPageTwo+0x44>
				break;
		}
		key = HKEYPAD_u8getPressedValue();

	}
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <displayRoomSetting>:
void displayRoomSetting(u8 roomNumber,u8 pageNum){
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	27 97       	sbiw	r28, 0x07	; 7
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	8a 83       	std	Y+2, r24	; 0x02
    1646:	6b 83       	std	Y+3, r22	; 0x03
	autoListener();
    1648:	0e 94 f5 08 	call	0x11ea	; 0x11ea <autoListener>
	ACautoListen();
    164c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <ACautoListen>
	u8 key = '+';
    1650:	8b e2       	ldi	r24, 0x2B	; 43
    1652:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
    1654:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	HCLCD_vidGoTo(0,0);
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("1.on       2.off");
    1660:	8e ed       	ldi	r24, 0xDE	; 222
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
	HCLCD_vidGoTo(0,1);
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("3.auto    *.back");
    1670:	8f ee       	ldi	r24, 0xEF	; 239
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
    1678:	53 c0       	rjmp	.+166    	; 0x1720 <displayRoomSetting+0xf0>
	while(key!='*'){
		while( key != '1' && key != '2' && key !='3' && key !='*'){
			key = HKEYPAD_u8getPressedValue();
    167a:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    167e:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("1.on       2.off");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("3.auto    *.back");
	while(key!='*'){
		while( key != '1' && key != '2' && key !='3' && key !='*'){
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	81 33       	cpi	r24, 0x31	; 49
    1684:	49 f0       	breq	.+18     	; 0x1698 <displayRoomSetting+0x68>
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	82 33       	cpi	r24, 0x32	; 50
    168a:	31 f0       	breq	.+12     	; 0x1698 <displayRoomSetting+0x68>
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	83 33       	cpi	r24, 0x33	; 51
    1690:	19 f0       	breq	.+6      	; 0x1698 <displayRoomSetting+0x68>
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	8a 32       	cpi	r24, 0x2A	; 42
    1696:	89 f7       	brne	.-30     	; 0x167a <displayRoomSetting+0x4a>
			key = HKEYPAD_u8getPressedValue();
		}
		switch(key){
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3f 83       	std	Y+7, r19	; 0x07
    16a0:	2e 83       	std	Y+6, r18	; 0x06
    16a2:	8e 81       	ldd	r24, Y+6	; 0x06
    16a4:	9f 81       	ldd	r25, Y+7	; 0x07
    16a6:	82 33       	cpi	r24, 0x32	; 50
    16a8:	91 05       	cpc	r25, r1
    16aa:	d1 f0       	breq	.+52     	; 0x16e0 <displayRoomSetting+0xb0>
    16ac:	2e 81       	ldd	r18, Y+6	; 0x06
    16ae:	3f 81       	ldd	r19, Y+7	; 0x07
    16b0:	23 33       	cpi	r18, 0x33	; 51
    16b2:	31 05       	cpc	r19, r1
    16b4:	5c f4       	brge	.+22     	; 0x16cc <displayRoomSetting+0x9c>
    16b6:	8e 81       	ldd	r24, Y+6	; 0x06
    16b8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ba:	8a 32       	cpi	r24, 0x2A	; 42
    16bc:	91 05       	cpc	r25, r1
    16be:	c1 f0       	breq	.+48     	; 0x16f0 <displayRoomSetting+0xc0>
    16c0:	2e 81       	ldd	r18, Y+6	; 0x06
    16c2:	3f 81       	ldd	r19, Y+7	; 0x07
    16c4:	21 33       	cpi	r18, 0x31	; 49
    16c6:	31 05       	cpc	r19, r1
    16c8:	39 f0       	breq	.+14     	; 0x16d8 <displayRoomSetting+0xa8>
    16ca:	27 c0       	rjmp	.+78     	; 0x171a <displayRoomSetting+0xea>
    16cc:	8e 81       	ldd	r24, Y+6	; 0x06
    16ce:	9f 81       	ldd	r25, Y+7	; 0x07
    16d0:	83 33       	cpi	r24, 0x33	; 51
    16d2:	91 05       	cpc	r25, r1
    16d4:	49 f0       	breq	.+18     	; 0x16e8 <displayRoomSetting+0xb8>
    16d6:	21 c0       	rjmp	.+66     	; 0x171a <displayRoomSetting+0xea>
			case '1' :
				ROOM_switchOn(roomNumber);
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	0e 94 35 08 	call	0x106a	; 0x106a <ROOM_switchOn>
    16de:	1d c0       	rjmp	.+58     	; 0x171a <displayRoomSetting+0xea>
				break;
			case '2' :
				ROOM_switchOff(roomNumber);
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	0e 94 48 08 	call	0x1090	; 0x1090 <ROOM_switchOff>
    16e6:	19 c0       	rjmp	.+50     	; 0x171a <displayRoomSetting+0xea>
				break;
			case '3' :
				ROOM_AutoLight(roomNumber);
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <ROOM_AutoLight>
    16ee:	15 c0       	rjmp	.+42     	; 0x171a <displayRoomSetting+0xea>
				break;
			case '*' :
				switch(pageNum){
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	3d 83       	std	Y+5, r19	; 0x05
    16f8:	2c 83       	std	Y+4, r18	; 0x04
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	9d 81       	ldd	r25, Y+5	; 0x05
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	91 05       	cpc	r25, r1
    1702:	31 f0       	breq	.+12     	; 0x1710 <displayRoomSetting+0xe0>
    1704:	2c 81       	ldd	r18, Y+4	; 0x04
    1706:	3d 81       	ldd	r19, Y+5	; 0x05
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	21 f0       	breq	.+8      	; 0x1716 <displayRoomSetting+0xe6>
    170e:	05 c0       	rjmp	.+10     	; 0x171a <displayRoomSetting+0xea>
					case 1:
						displayRoomPageOne();
    1710:	0e 94 4b 0a 	call	0x1496	; 0x1496 <displayRoomPageOne>
    1714:	02 c0       	rjmp	.+4      	; 0x171a <displayRoomSetting+0xea>
						break;
					case 2:
						displayRoomPageTwo();
    1716:	0e 94 ab 0a 	call	0x1556	; 0x1556 <displayRoomPageTwo>
				}
				break;
			default :
				break;
		}
		key = HKEYPAD_u8getPressedValue();
    171a:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    171e:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("1.on       2.off");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("3.auto    *.back");
	while(key!='*'){
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	8a 32       	cpi	r24, 0x2A	; 42
    1724:	09 f0       	breq	.+2      	; 0x1728 <displayRoomSetting+0xf8>
    1726:	ac cf       	rjmp	.-168    	; 0x1680 <displayRoomSetting+0x50>
			default :
				break;
		}
		key = HKEYPAD_u8getPressedValue();
	}
}
    1728:	27 96       	adiw	r28, 0x07	; 7
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <displayDoorSetting>:
 */
#include "../../../LIB/math/datatypes.h"
#include "../../room/room.h"
#include "../../tv/tv.h"
#include "../tvandac/tvpage.h"
void displayDoorSetting(){
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <displayDoorSetting+0x6>
    1740:	0f 92       	push	r0
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
	enableDoor();
    1746:	0e 94 18 09 	call	0x1230	; 0x1230 <enableDoor>
	autoListener();
    174a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <autoListener>
	ACautoListen();
    174e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <ACautoListen>
	u8 key = '+';
    1752:	8b e2       	ldi	r24, 0x2B	; 43
    1754:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
    1756:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	HCLCD_vidGoTo(0,0);
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("1.open   2.close");
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
	HCLCD_vidGoTo(0,1);
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("*.back");
    177a:	81 e1       	ldi	r24, 0x11	; 17
    177c:	91 e0       	ldi	r25, 0x01	; 1
    177e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
    1782:	2c c0       	rjmp	.+88     	; 0x17dc <displayDoorSetting+0xa2>
	while(key!='*'){
		while( key != '1' && key != '2' && key !='*'){
			key = HKEYPAD_u8getPressedValue();
    1784:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    1788:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("1.open   2.close");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("*.back");
	while(key!='*'){
		while( key != '1' && key != '2' && key !='*'){
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	81 33       	cpi	r24, 0x31	; 49
    178e:	31 f0       	breq	.+12     	; 0x179c <displayDoorSetting+0x62>
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	82 33       	cpi	r24, 0x32	; 50
    1794:	19 f0       	breq	.+6      	; 0x179c <displayDoorSetting+0x62>
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	8a 32       	cpi	r24, 0x2A	; 42
    179a:	a1 f7       	brne	.-24     	; 0x1784 <displayDoorSetting+0x4a>
			key = HKEYPAD_u8getPressedValue();
		}
		switch(key){
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	3b 83       	std	Y+3, r19	; 0x03
    17a4:	2a 83       	std	Y+2, r18	; 0x02
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	9b 81       	ldd	r25, Y+3	; 0x03
    17aa:	81 33       	cpi	r24, 0x31	; 49
    17ac:	91 05       	cpc	r25, r1
    17ae:	59 f0       	breq	.+22     	; 0x17c6 <displayDoorSetting+0x8c>
    17b0:	2a 81       	ldd	r18, Y+2	; 0x02
    17b2:	3b 81       	ldd	r19, Y+3	; 0x03
    17b4:	22 33       	cpi	r18, 0x32	; 50
    17b6:	31 05       	cpc	r19, r1
    17b8:	49 f0       	breq	.+18     	; 0x17cc <displayDoorSetting+0x92>
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	9b 81       	ldd	r25, Y+3	; 0x03
    17be:	8a 32       	cpi	r24, 0x2A	; 42
    17c0:	91 05       	cpc	r25, r1
    17c2:	39 f0       	breq	.+14     	; 0x17d2 <displayDoorSetting+0x98>
    17c4:	08 c0       	rjmp	.+16     	; 0x17d6 <displayDoorSetting+0x9c>
		case '1' :
			openDoor();
    17c6:	0e 94 21 09 	call	0x1242	; 0x1242 <openDoor>
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <displayDoorSetting+0x9c>
			break;
		case '2' :
			closeDoor();
    17cc:	0e 94 2a 09 	call	0x1254	; 0x1254 <closeDoor>
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <displayDoorSetting+0x9c>
			break;
		case '*' :
			displayTVPage();
    17d2:	0e 94 33 09 	call	0x1266	; 0x1266 <displayTVPage>
			break;
		default :
			break;
		}
		key = HKEYPAD_u8getPressedValue();
    17d6:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    17da:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_vidClear();
	HCLCD_vidGoTo(0,0);
	HCLCD_vidSendString("1.open   2.close");
	HCLCD_vidGoTo(0,1);
	HCLCD_vidSendString("*.back");
	while(key!='*'){
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	8a 32       	cpi	r24, 0x2A	; 42
    17e0:	a1 f6       	brne	.-88     	; 0x178a <displayDoorSetting+0x50>
			break;
		}
		key = HKEYPAD_u8getPressedValue();

	}
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <displaySignUp>:
#include "../../../MCAL/eeprom/eeprom.h"
#include "../../auth/auth.h"
#include "../tvandac/tvpage.h"
#include "./auth.h"
#include<util/delay.h>
void displaySignUp(u8*username,u8*pass){
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <displaySignUp+0x6>
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <displaySignUp+0x8>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	7c 83       	std	Y+4, r23	; 0x04
    1800:	6b 83       	std	Y+3, r22	; 0x03
	displayMessage("#to proceed",2);
    1802:	88 e1       	ldi	r24, 0x18	; 24
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	62 e0       	ldi	r22, 0x02	; 2
    1808:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <displayMessage>
	while(HKEYPAD_u8getPressedValue()!='#');
    180c:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    1810:	83 32       	cpi	r24, 0x23	; 35
    1812:	e1 f7       	brne	.-8      	; 0x180c <displaySignUp+0x1e>
	HCLCD_vidClear();
    1814:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	HCLCD_vidGoTo(1,0);
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("data was reset");
    1820:	84 e2       	ldi	r24, 0x24	; 36
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
	HCLCD_vidGoTo(1,1);
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("# to signup");
    1830:	83 e3       	ldi	r24, 0x33	; 51
    1832:	91 e0       	ldi	r25, 0x01	; 1
    1834:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
	while(HKEYPAD_u8getPressedValue()!='#');
    1838:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    183c:	83 32       	cpi	r24, 0x23	; 35
    183e:	e1 f7       	brne	.-8      	; 0x1838 <displaySignUp+0x4a>
	HCLCD_vidClear();
    1840:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	signUpExecute(username,pass);
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	2b 81       	ldd	r18, Y+3	; 0x03
    184a:	3c 81       	ldd	r19, Y+4	; 0x04
    184c:	b9 01       	movw	r22, r18
    184e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <signUpExecute>
}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <displayLogin>:
void displayLogin(u8*username,u8*pass){
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	62 97       	sbiw	r28, 0x12	; 18
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	98 8b       	std	Y+16, r25	; 0x10
    1876:	8f 87       	std	Y+15, r24	; 0x0f
    1878:	7a 8b       	std	Y+18, r23	; 0x12
    187a:	69 8b       	std	Y+17, r22	; 0x11
	HCLCD_vidClear();
    187c:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	displayMessage("# to login",3);
    1880:	8f e3       	ldi	r24, 0x3F	; 63
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	63 e0       	ldi	r22, 0x03	; 3
    1886:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <displayMessage>
	while(HKEYPAD_u8getPressedValue()!='#');
    188a:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    188e:	83 32       	cpi	r24, 0x23	; 35
    1890:	e1 f7       	brne	.-8      	; 0x188a <displayLogin+0x2a>
	HCLCD_vidClear();
    1892:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	loginExecute(username,pass);
    1896:	8f 85       	ldd	r24, Y+15	; 0x0f
    1898:	98 89       	ldd	r25, Y+16	; 0x10
    189a:	29 89       	ldd	r18, Y+17	; 0x11
    189c:	3a 89       	ldd	r19, Y+18	; 0x12
    189e:	b9 01       	movw	r22, r18
    18a0:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <loginExecute>
	HCLCD_vidGoTo(0,1);
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString(username);
    18ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ae:	98 89       	ldd	r25, Y+16	; 0x10
    18b0:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a8 e4       	ldi	r26, 0x48	; 72
    18ba:	b3 e4       	ldi	r27, 0x43	; 67
    18bc:	8b 87       	std	Y+11, r24	; 0x0b
    18be:	9c 87       	std	Y+12, r25	; 0x0c
    18c0:	ad 87       	std	Y+13, r26	; 0x0d
    18c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4a ef       	ldi	r20, 0xFA	; 250
    18d2:	54 e4       	ldi	r21, 0x44	; 68
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8f 83       	std	Y+7, r24	; 0x07
    18de:	98 87       	std	Y+8, r25	; 0x08
    18e0:	a9 87       	std	Y+9, r26	; 0x09
    18e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	5f e3       	ldi	r21, 0x3F	; 63
    18f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f8:	88 23       	and	r24, r24
    18fa:	2c f4       	brge	.+10     	; 0x1906 <displayLogin+0xa6>
		__ticks = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
    1904:	3f c0       	rjmp	.+126    	; 0x1984 <displayLogin+0x124>
	else if (__tmp > 65535)
    1906:	6f 81       	ldd	r22, Y+7	; 0x07
    1908:	78 85       	ldd	r23, Y+8	; 0x08
    190a:	89 85       	ldd	r24, Y+9	; 0x09
    190c:	9a 85       	ldd	r25, Y+10	; 0x0a
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	3f ef       	ldi	r19, 0xFF	; 255
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	57 e4       	ldi	r21, 0x47	; 71
    1916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191a:	18 16       	cp	r1, r24
    191c:	4c f5       	brge	.+82     	; 0x1970 <displayLogin+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1920:	7c 85       	ldd	r23, Y+12	; 0x0c
    1922:	8d 85       	ldd	r24, Y+13	; 0x0d
    1924:	9e 85       	ldd	r25, Y+14	; 0x0e
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e2       	ldi	r20, 0x20	; 32
    192c:	51 e4       	ldi	r21, 0x41	; 65
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <displayLogin+0x106>
    1948:	88 ec       	ldi	r24, 0xC8	; 200
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <displayLogin+0xf4>
    1958:	9c 83       	std	Y+4, r25	; 0x04
    195a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195c:	8d 81       	ldd	r24, Y+5	; 0x05
    195e:	9e 81       	ldd	r25, Y+6	; 0x06
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1966:	8d 81       	ldd	r24, Y+5	; 0x05
    1968:	9e 81       	ldd	r25, Y+6	; 0x06
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	69 f7       	brne	.-38     	; 0x1948 <displayLogin+0xe8>
    196e:	14 c0       	rjmp	.+40     	; 0x1998 <displayLogin+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1970:	6f 81       	ldd	r22, Y+7	; 0x07
    1972:	78 85       	ldd	r23, Y+8	; 0x08
    1974:	89 85       	ldd	r24, Y+9	; 0x09
    1976:	9a 85       	ldd	r25, Y+10	; 0x0a
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9e 83       	std	Y+6, r25	; 0x06
    1982:	8d 83       	std	Y+5, r24	; 0x05
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	9e 81       	ldd	r25, Y+6	; 0x06
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	9a 81       	ldd	r25, Y+2	; 0x02
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <displayLogin+0x130>
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	HCLCD_vidClear();
    1998:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
}
    199c:	62 96       	adiw	r28, 0x12	; 18
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <detectLoginData>:
#include "../../MCAL/eeprom/eeprom.h"
#include "../../HAL/keypad/keypad.h"
#include "../../HAL/lcd/lcd.h"
#include "util/delay.h"
#include "./auth.h"
LOGIN_STATUS detectLoginData(u8*name , u8*password){
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	69 97       	sbiw	r28, 0x19	; 25
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	9e 8b       	std	Y+22, r25	; 0x16
    19c4:	8d 8b       	std	Y+21, r24	; 0x15
    19c6:	78 8f       	std	Y+24, r23	; 0x18
    19c8:	6f 8b       	std	Y+23, r22	; 0x17
	u8 usersCounter= 0;
    19ca:	1a 82       	std	Y+2, r1	; 0x02
    19cc:	16 c0       	rjmp	.+44     	; 0x19fa <detectLoginData+0x4c>
	u8 passAddress ;
	u8 userName[10];
	u8 userPass[8];
	while(MC_EEPROM_u8Read(usersCounter) != 0xff && usersCounter < MAXIMUM_USERNAME_SIZE*MAXIMUM_USERS ){
		MC_EEPROM_vidRead(usersCounter,MAXIMUM_USERNAME_SIZE,userName);
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9e 01       	movw	r18, r28
    19d6:	2d 5f       	subi	r18, 0xFD	; 253
    19d8:	3f 4f       	sbci	r19, 0xFF	; 255
    19da:	6a e0       	ldi	r22, 0x0A	; 10
    19dc:	a9 01       	movw	r20, r18
    19de:	0e 94 99 13 	call	0x2732	; 0x2732 <MC_EEPROM_vidRead>
		if( util_u8StringCompare(userName,name) ){
    19e2:	ce 01       	movw	r24, r28
    19e4:	03 96       	adiw	r24, 0x03	; 3
    19e6:	2d 89       	ldd	r18, Y+21	; 0x15
    19e8:	3e 89       	ldd	r19, Y+22	; 0x16
    19ea:	b9 01       	movw	r22, r18
    19ec:	0e 94 91 19 	call	0x3322	; 0x3322 <util_u8StringCompare>
    19f0:	88 23       	and	r24, r24
    19f2:	69 f4       	brne	.+26     	; 0x1a0e <detectLoginData+0x60>
			break;
		}
		usersCounter+=MAXIMUM_USERNAME_SIZE;
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	86 5f       	subi	r24, 0xF6	; 246
    19f8:	8a 83       	std	Y+2, r24	; 0x02
LOGIN_STATUS detectLoginData(u8*name , u8*password){
	u8 usersCounter= 0;
	u8 passAddress ;
	u8 userName[10];
	u8 userPass[8];
	while(MC_EEPROM_u8Read(usersCounter) != 0xff && usersCounter < MAXIMUM_USERNAME_SIZE*MAXIMUM_USERS ){
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	88 2f       	mov	r24, r24
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <MC_EEPROM_u8Read>
    1a04:	8f 3f       	cpi	r24, 0xFF	; 255
    1a06:	19 f0       	breq	.+6      	; 0x1a0e <detectLoginData+0x60>
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	82 33       	cpi	r24, 0x32	; 50
    1a0c:	00 f3       	brcs	.-64     	; 0x19ce <detectLoginData+0x20>
		if( util_u8StringCompare(userName,name) ){
			break;
		}
		usersCounter+=MAXIMUM_USERNAME_SIZE;
	}
	if( !util_u8StringCompare(userName,name)  ){
    1a0e:	ce 01       	movw	r24, r28
    1a10:	03 96       	adiw	r24, 0x03	; 3
    1a12:	2d 89       	ldd	r18, Y+21	; 0x15
    1a14:	3e 89       	ldd	r19, Y+22	; 0x16
    1a16:	b9 01       	movw	r22, r18
    1a18:	0e 94 91 19 	call	0x3322	; 0x3322 <util_u8StringCompare>
    1a1c:	88 23       	and	r24, r24
    1a1e:	19 f4       	brne	.+6      	; 0x1a26 <detectLoginData+0x78>
		return INVALID_USER_NAME;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	89 8f       	std	Y+25, r24	; 0x19
    1a24:	26 c0       	rjmp	.+76     	; 0x1a72 <detectLoginData+0xc4>
	}
	passAddress= (MAXIMUM_USERNAME_SIZE*MAXIMUM_USERS)+((usersCounter/MAXIMUM_USERNAME_SIZE)*MAXIMUM_PASSWORD_SIZE);
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	9a e0       	ldi	r25, 0x0A	; 10
    1a2a:	69 2f       	mov	r22, r25
    1a2c:	0e 94 a1 24 	call	0x4942	; 0x4942 <__udivmodqi4>
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	8e 5c       	subi	r24, 0xCE	; 206
    1a42:	89 83       	std	Y+1, r24	; 0x01
	MC_EEPROM_vidRead(passAddress,MAXIMUM_PASSWORD_SIZE,userPass);
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9e 01       	movw	r18, r28
    1a4c:	23 5f       	subi	r18, 0xF3	; 243
    1a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a50:	68 e0       	ldi	r22, 0x08	; 8
    1a52:	a9 01       	movw	r20, r18
    1a54:	0e 94 99 13 	call	0x2732	; 0x2732 <MC_EEPROM_vidRead>
	if( !util_u8StringCompare(userPass,password) ){
    1a58:	ce 01       	movw	r24, r28
    1a5a:	0d 96       	adiw	r24, 0x0d	; 13
    1a5c:	2f 89       	ldd	r18, Y+23	; 0x17
    1a5e:	38 8d       	ldd	r19, Y+24	; 0x18
    1a60:	b9 01       	movw	r22, r18
    1a62:	0e 94 91 19 	call	0x3322	; 0x3322 <util_u8StringCompare>
    1a66:	88 23       	and	r24, r24
    1a68:	19 f4       	brne	.+6      	; 0x1a70 <detectLoginData+0xc2>
		return INVALID_USER_PASSWORD;
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	89 8f       	std	Y+25, r24	; 0x19
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <detectLoginData+0xc4>
	}
	return LOGGED_IN;
    1a70:	19 8e       	std	Y+25, r1	; 0x19
    1a72:	89 8d       	ldd	r24, Y+25	; 0x19
}
    1a74:	69 96       	adiw	r28, 0x19	; 25
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <loginExecute>:
void loginExecute(u8*name , u8*password){
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	a2 97       	sbiw	r28, 0x22	; 34
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	98 a3       	std	Y+32, r25	; 0x20
    1a9c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a9e:	7a a3       	std	Y+34, r23	; 0x22
    1aa0:	69 a3       	std	Y+33, r22	; 0x21
	LOGIN_STATUS status;
	u8 counter = MAXIMUM_TRIES;
    1aa2:	85 e0       	ldi	r24, 0x05	; 5
    1aa4:	8d 8f       	std	Y+29, r24	; 0x1d
	while(1){
		counter--;
    1aa6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aa8:	81 50       	subi	r24, 0x01	; 1
    1aaa:	8d 8f       	std	Y+29, r24	; 0x1d
		HCLCD_vidSendString("insert name");
    1aac:	8a e4       	ldi	r24, 0x4A	; 74
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		getData(CHARACTERS,name,0,1);
    1ab4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1ab6:	38 a1       	ldd	r19, Y+32	; 0x20
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	b9 01       	movw	r22, r18
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	21 e0       	ldi	r18, 0x01	; 1
    1ac0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <getData>
		HCLCD_vidClear();
    1ac4:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
		HCLCD_vidSendString("insert password");
    1ac8:	86 e5       	ldi	r24, 0x56	; 86
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		getData(NUMBERS,password,0,1);
    1ad0:	29 a1       	ldd	r18, Y+33	; 0x21
    1ad2:	3a a1       	ldd	r19, Y+34	; 0x22
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	b9 01       	movw	r22, r18
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	21 e0       	ldi	r18, 0x01	; 1
    1adc:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <getData>
		status = detectLoginData(name,password);
    1ae0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ae2:	98 a1       	ldd	r25, Y+32	; 0x20
    1ae4:	29 a1       	ldd	r18, Y+33	; 0x21
    1ae6:	3a a1       	ldd	r19, Y+34	; 0x22
    1ae8:	b9 01       	movw	r22, r18
    1aea:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <detectLoginData>
    1aee:	8e 8f       	std	Y+30, r24	; 0x1e
		HCLCD_vidClear();
    1af0:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
		if(status == LOGGED_IN){
    1af4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1af6:	88 23       	and	r24, r24
    1af8:	69 f4       	brne	.+26     	; 0x1b14 <loginExecute+0x8e>
			HCLCD_vidSendString("confirmed");
    1afa:	86 e6       	ldi	r24, 0x66	; 102
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		HCLCD_vidSendString("# to proceed");
		while(HKEYPAD_u8getPressedValue()!='#');
		HCLCD_vidClear();

	}
}
    1b02:	a2 96       	adiw	r28, 0x22	; 34
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret
		status = detectLoginData(name,password);
		HCLCD_vidClear();
		if(status == LOGGED_IN){
			HCLCD_vidSendString("confirmed");
			break;
		}else if(status == INVALID_USER_NAME ){
    1b14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	29 f4       	brne	.+10     	; 0x1b24 <loginExecute+0x9e>
			HCLCD_vidSendString("invalid name");
    1b1a:	80 e7       	ldi	r24, 0x70	; 112
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <loginExecute+0xac>

		}
		else if(status == INVALID_USER_PASSWORD  ){
    1b24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	21 f4       	brne	.+8      	; 0x1b32 <loginExecute+0xac>
			HCLCD_vidSendString("invalid pass");
    1b2a:	8d e7       	ldi	r24, 0x7D	; 125
    1b2c:	91 e0       	ldi	r25, 0x01	; 1
    1b2e:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a8 e4       	ldi	r26, 0x48	; 72
    1b38:	b3 e4       	ldi	r27, 0x43	; 67
    1b3a:	89 8f       	std	Y+25, r24	; 0x19
    1b3c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b3e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b42:	69 8d       	ldd	r22, Y+25	; 0x19
    1b44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	4a ef       	ldi	r20, 0xFA	; 250
    1b50:	54 e4       	ldi	r21, 0x44	; 68
    1b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	8d 8b       	std	Y+21, r24	; 0x15
    1b5c:	9e 8b       	std	Y+22, r25	; 0x16
    1b5e:	af 8b       	std	Y+23, r26	; 0x17
    1b60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b62:	6d 89       	ldd	r22, Y+21	; 0x15
    1b64:	7e 89       	ldd	r23, Y+22	; 0x16
    1b66:	8f 89       	ldd	r24, Y+23	; 0x17
    1b68:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e8       	ldi	r20, 0x80	; 128
    1b70:	5f e3       	ldi	r21, 0x3F	; 63
    1b72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b76:	88 23       	and	r24, r24
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <loginExecute+0xfe>
		__ticks = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9c 8b       	std	Y+20, r25	; 0x14
    1b80:	8b 8b       	std	Y+19, r24	; 0x13
    1b82:	3f c0       	rjmp	.+126    	; 0x1c02 <loginExecute+0x17c>
	else if (__tmp > 65535)
    1b84:	6d 89       	ldd	r22, Y+21	; 0x15
    1b86:	7e 89       	ldd	r23, Y+22	; 0x16
    1b88:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	3f ef       	ldi	r19, 0xFF	; 255
    1b90:	4f e7       	ldi	r20, 0x7F	; 127
    1b92:	57 e4       	ldi	r21, 0x47	; 71
    1b94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b98:	18 16       	cp	r1, r24
    1b9a:	4c f5       	brge	.+82     	; 0x1bee <loginExecute+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e2       	ldi	r20, 0x20	; 32
    1baa:	51 e4       	ldi	r21, 0x41	; 65
    1bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9c 8b       	std	Y+20, r25	; 0x14
    1bc2:	8b 8b       	std	Y+19, r24	; 0x13
    1bc4:	0f c0       	rjmp	.+30     	; 0x1be4 <loginExecute+0x15e>
    1bc6:	88 ec       	ldi	r24, 0xC8	; 200
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9a 8b       	std	Y+18, r25	; 0x12
    1bcc:	89 8b       	std	Y+17, r24	; 0x11
    1bce:	89 89       	ldd	r24, Y+17	; 0x11
    1bd0:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <loginExecute+0x14c>
    1bd6:	9a 8b       	std	Y+18, r25	; 0x12
    1bd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bda:	8b 89       	ldd	r24, Y+19	; 0x13
    1bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	9c 8b       	std	Y+20, r25	; 0x14
    1be2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be4:	8b 89       	ldd	r24, Y+19	; 0x13
    1be6:	9c 89       	ldd	r25, Y+20	; 0x14
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	69 f7       	brne	.-38     	; 0x1bc6 <loginExecute+0x140>
    1bec:	14 c0       	rjmp	.+40     	; 0x1c16 <loginExecute+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bee:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9c 8b       	std	Y+20, r25	; 0x14
    1c00:	8b 8b       	std	Y+19, r24	; 0x13
    1c02:	8b 89       	ldd	r24, Y+19	; 0x13
    1c04:	9c 89       	ldd	r25, Y+20	; 0x14
    1c06:	98 8b       	std	Y+16, r25	; 0x10
    1c08:	8f 87       	std	Y+15, r24	; 0x0f
    1c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0c:	98 89       	ldd	r25, Y+16	; 0x10
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <loginExecute+0x188>
    1c12:	98 8b       	std	Y+16, r25	; 0x10
    1c14:	8f 87       	std	Y+15, r24	; 0x0f
		}
		_delay_ms(200);
		HCLCD_vidClear();
    1c16:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
		if(counter==0){
    1c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c1c:	88 23       	and	r24, r24
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <loginExecute+0x19c>
    1c20:	ba c0       	rjmp	.+372    	; 0x1d96 <loginExecute+0x310>
			HCLCD_vidSendString("maximum of tries");
    1c22:	8a e8       	ldi	r24, 0x8A	; 138
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
			HCLCD_vidGoTo(0,1);
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
			HCLCD_vidSendString("wait for");
    1c32:	8b e9       	ldi	r24, 0x9B	; 155
    1c34:	91 e0       	ldi	r25, 0x01	; 1
    1c36:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
			HCLCD_vidGoTo(12,1);
    1c3a:	8c e0       	ldi	r24, 0x0C	; 12
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
			HCLCD_vidSendString("sec");
    1c42:	84 ea       	ldi	r24, 0xA4	; 164
    1c44:	91 e0       	ldi	r25, 0x01	; 1
    1c46:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
			counter = 30;
    1c4a:	8e e1       	ldi	r24, 0x1E	; 30
    1c4c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c4e:	9a c0       	rjmp	.+308    	; 0x1d84 <loginExecute+0x2fe>
			while(counter){
				if(counter<10){
    1c50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c52:	8a 30       	cpi	r24, 0x0A	; 10
    1c54:	a8 f4       	brcc	.+42     	; 0x1c80 <loginExecute+0x1fa>
					HCLCD_vidGoTo(9,1);
    1c56:	89 e0       	ldi	r24, 0x09	; 9
    1c58:	61 e0       	ldi	r22, 0x01	; 1
    1c5a:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
					HCLCD_vidSendData('0');
    1c5e:	80 e3       	ldi	r24, 0x30	; 48
    1c60:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <HCLCD_vidSendData>
					HCLCD_vidGoTo(10,1);
    1c64:	8a e0       	ldi	r24, 0x0A	; 10
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
					HCLCD_vidSendNumber(counter);
    1c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c6e:	88 2f       	mov	r24, r24
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	bc 01       	movw	r22, r24
    1c78:	cd 01       	movw	r24, r26
    1c7a:	0e 94 14 20 	call	0x4028	; 0x4028 <HCLCD_vidSendNumber>
    1c7e:	0d c0       	rjmp	.+26     	; 0x1c9a <loginExecute+0x214>
				}else{
					HCLCD_vidGoTo(9,1);
    1c80:	89 e0       	ldi	r24, 0x09	; 9
    1c82:	61 e0       	ldi	r22, 0x01	; 1
    1c84:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
					HCLCD_vidSendNumber(counter);
    1c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a0 e0       	ldi	r26, 0x00	; 0
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 14 20 	call	0x4028	; 0x4028 <HCLCD_vidSendNumber>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a8 e4       	ldi	r26, 0x48	; 72
    1ca0:	b4 e4       	ldi	r27, 0x44	; 68
    1ca2:	8b 87       	std	Y+11, r24	; 0x0b
    1ca4:	9c 87       	std	Y+12, r25	; 0x0c
    1ca6:	ad 87       	std	Y+13, r26	; 0x0d
    1ca8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	4a ef       	ldi	r20, 0xFA	; 250
    1cb8:	54 e4       	ldi	r21, 0x44	; 68
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	8f 83       	std	Y+7, r24	; 0x07
    1cc4:	98 87       	std	Y+8, r25	; 0x08
    1cc6:	a9 87       	std	Y+9, r26	; 0x09
    1cc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	5f e3       	ldi	r21, 0x3F	; 63
    1cda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cde:	88 23       	and	r24, r24
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <loginExecute+0x266>
		__ticks = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	3f c0       	rjmp	.+126    	; 0x1d6a <loginExecute+0x2e4>
	else if (__tmp > 65535)
    1cec:	6f 81       	ldd	r22, Y+7	; 0x07
    1cee:	78 85       	ldd	r23, Y+8	; 0x08
    1cf0:	89 85       	ldd	r24, Y+9	; 0x09
    1cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	3f ef       	ldi	r19, 0xFF	; 255
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	57 e4       	ldi	r21, 0x47	; 71
    1cfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	4c f5       	brge	.+82     	; 0x1d56 <loginExecute+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <loginExecute+0x2c6>
    1d2e:	88 ec       	ldi	r24, 0xC8	; 200
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8b 83       	std	Y+3, r24	; 0x03
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <loginExecute+0x2b4>
    1d3e:	9c 83       	std	Y+4, r25	; 0x04
    1d40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	69 f7       	brne	.-38     	; 0x1d2e <loginExecute+0x2a8>
    1d54:	14 c0       	rjmp	.+40     	; 0x1d7e <loginExecute+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9e 83       	std	Y+6, r25	; 0x06
    1d68:	8d 83       	std	Y+5, r24	; 0x05
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <loginExecute+0x2f0>
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
				}
				_delay_ms(800);
				counter--;
    1d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d80:	81 50       	subi	r24, 0x01	; 1
    1d82:	8d 8f       	std	Y+29, r24	; 0x1d
			HCLCD_vidGoTo(0,1);
			HCLCD_vidSendString("wait for");
			HCLCD_vidGoTo(12,1);
			HCLCD_vidSendString("sec");
			counter = 30;
			while(counter){
    1d84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d86:	88 23       	and	r24, r24
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <loginExecute+0x306>
    1d8a:	62 cf       	rjmp	.-316    	; 0x1c50 <loginExecute+0x1ca>
					HCLCD_vidSendNumber(counter);
				}
				_delay_ms(800);
				counter--;
			}
			counter = MAXIMUM_TRIES;
    1d8c:	85 e0       	ldi	r24, 0x05	; 5
    1d8e:	8d 8f       	std	Y+29, r24	; 0x1d
			HCLCD_vidClear();
    1d90:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
    1d94:	88 ce       	rjmp	.-752    	; 0x1aa6 <loginExecute+0x20>
			continue;
		}
		HCLCD_vidSendNumber(counter);
    1d96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e0       	ldi	r26, 0x00	; 0
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 14 20 	call	0x4028	; 0x4028 <HCLCD_vidSendNumber>
		HCLCD_vidSendString(" tries left");
    1da8:	88 ea       	ldi	r24, 0xA8	; 168
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		HCLCD_vidGoTo(0,1);
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	61 e0       	ldi	r22, 0x01	; 1
    1db4:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
		HCLCD_vidSendString("# to proceed");
    1db8:	84 eb       	ldi	r24, 0xB4	; 180
    1dba:	91 e0       	ldi	r25, 0x01	; 1
    1dbc:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		while(HKEYPAD_u8getPressedValue()!='#');
    1dc0:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    1dc4:	83 32       	cpi	r24, 0x23	; 35
    1dc6:	e1 f7       	brne	.-8      	; 0x1dc0 <loginExecute+0x33a>
		HCLCD_vidClear();
    1dc8:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
    1dcc:	6c ce       	rjmp	.-808    	; 0x1aa6 <loginExecute+0x20>

00001dce <signUpOrAddUser>:

	}
}
SIGNUP_STATUS signUpOrAddUser(u8*name, u8*password){
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <signUpOrAddUser+0x6>
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <signUpOrAddUser+0x8>
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <signUpOrAddUser+0xa>
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	9b 83       	std	Y+3, r25	; 0x03
    1dde:	8a 83       	std	Y+2, r24	; 0x02
    1de0:	7d 83       	std	Y+5, r23	; 0x05
    1de2:	6c 83       	std	Y+4, r22	; 0x04
	u8 count =  MC_EEPROM_u8Read(USER_COUNT_LOCATION);
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	93 e0       	ldi	r25, 0x03	; 3
    1de8:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <MC_EEPROM_u8Read>
    1dec:	89 83       	std	Y+1, r24	; 0x01
	if(count == 0xff ){
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	8f 3f       	cpi	r24, 0xFF	; 255
    1df2:	29 f4       	brne	.+10     	; 0x1dfe <signUpOrAddUser+0x30>
		MC_EEPROM_vidWrite(USER_COUNT_LOCATION,0);
    1df4:	8f ef       	ldi	r24, 0xFF	; 255
    1df6:	93 e0       	ldi	r25, 0x03	; 3
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	0e 94 30 13 	call	0x2660	; 0x2660 <MC_EEPROM_vidWrite>
	}
	count =  MC_EEPROM_u8Read(USER_COUNT_LOCATION);
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	93 e0       	ldi	r25, 0x03	; 3
    1e02:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <MC_EEPROM_u8Read>
    1e06:	89 83       	std	Y+1, r24	; 0x01
	if(count == MAXIMUM_USERS){
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	85 30       	cpi	r24, 0x05	; 5
    1e0c:	19 f4       	brne	.+6      	; 0x1e14 <signUpOrAddUser+0x46>
		return NO_ROOM;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	8e 83       	std	Y+6, r24	; 0x06
    1e12:	2a c0       	rjmp	.+84     	; 0x1e68 <signUpOrAddUser+0x9a>
	}
	MC_EEPROM_vidWriteString((count)*MAXIMUM_USERNAME_SIZE ,name);
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9c 01       	movw	r18, r24
    1e1c:	22 0f       	add	r18, r18
    1e1e:	33 1f       	adc	r19, r19
    1e20:	c9 01       	movw	r24, r18
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	82 0f       	add	r24, r18
    1e2c:	93 1f       	adc	r25, r19
    1e2e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e30:	3b 81       	ldd	r19, Y+3	; 0x03
    1e32:	b9 01       	movw	r22, r18
    1e34:	0e 94 61 13 	call	0x26c2	; 0x26c2 <MC_EEPROM_vidWriteString>
	MC_EEPROM_vidWriteString( ((MAXIMUM_USERS*MAXIMUM_USERNAME_SIZE)+((count)*MAXIMUM_PASSWORD_SIZE)) ,password );
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	88 2f       	mov	r24, r24
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	c2 96       	adiw	r24, 0x32	; 50
    1e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e50:	b9 01       	movw	r22, r18
    1e52:	0e 94 61 13 	call	0x26c2	; 0x26c2 <MC_EEPROM_vidWriteString>
	count++;
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	8f 5f       	subi	r24, 0xFF	; 255
    1e5a:	89 83       	std	Y+1, r24	; 0x01
	MC_EEPROM_vidWrite(USER_COUNT_LOCATION,count);
    1e5c:	8f ef       	ldi	r24, 0xFF	; 255
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	69 81       	ldd	r22, Y+1	; 0x01
    1e62:	0e 94 30 13 	call	0x2660	; 0x2660 <MC_EEPROM_vidWrite>
	return SIGNED;
    1e66:	1e 82       	std	Y+6, r1	; 0x06
    1e68:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1e6a:	26 96       	adiw	r28, 0x06	; 6
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <signUpExecute>:
boolean	signUpExecute(u8*name, u8*password){
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	28 97       	sbiw	r28, 0x08	; 8
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	9c 83       	std	Y+4, r25	; 0x04
    1e92:	8b 83       	std	Y+3, r24	; 0x03
    1e94:	7e 83       	std	Y+6, r23	; 0x06
    1e96:	6d 83       	std	Y+5, r22	; 0x05
    1e98:	40 c0       	rjmp	.+128    	; 0x1f1a <signUpExecute+0x9e>
	SIGNUP_STATUS status ;
	while(name[0] == '\0'){
		HCLCD_vidClear();
    1e9a:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
		HCLCD_vidSendString("insert name");
    1e9e:	8a e4       	ldi	r24, 0x4A	; 74
    1ea0:	91 e0       	ldi	r25, 0x01	; 1
    1ea2:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		getData(CHARACTERS,name,0,1);
    1ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	b9 01       	movw	r22, r18
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	21 e0       	ldi	r18, 0x01	; 1
    1eb2:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <getData>
		HCLCD_vidClear();
    1eb6:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
		HCLCD_vidSendString("name: ");
    1eba:	81 ec       	ldi	r24, 0xC1	; 193
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		HCLCD_vidSendString(name);
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		HCLCD_vidGoTo(0,1);
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	61 e0       	ldi	r22, 0x01	; 1
    1ece:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
		HCLCD_vidSendString("#continue");
    1ed2:	88 ec       	ldi	r24, 0xC8	; 200
    1ed4:	91 e0       	ldi	r25, 0x01	; 1
    1ed6:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		HCLCD_vidGoTo(11,1);
    1eda:	8b e0       	ldi	r24, 0x0B	; 11
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
		HCLCD_vidSendString("*back");
    1ee2:	82 ed       	ldi	r24, 0xD2	; 210
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		u8 key ='+';
    1eea:	8b e2       	ldi	r24, 0x2B	; 43
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	03 c0       	rjmp	.+6      	; 0x1ef6 <signUpExecute+0x7a>
		while(key!='#' && key !='*' ){
			key = HKEYPAD_u8getPressedValue();
    1ef0:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    1ef4:	89 83       	std	Y+1, r24	; 0x01
		HCLCD_vidGoTo(0,1);
		HCLCD_vidSendString("#continue");
		HCLCD_vidGoTo(11,1);
		HCLCD_vidSendString("*back");
		u8 key ='+';
		while(key!='#' && key !='*' ){
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	83 32       	cpi	r24, 0x23	; 35
    1efa:	19 f0       	breq	.+6      	; 0x1f02 <signUpExecute+0x86>
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	8a 32       	cpi	r24, 0x2A	; 42
    1f00:	b9 f7       	brne	.-18     	; 0x1ef0 <signUpExecute+0x74>
			key = HKEYPAD_u8getPressedValue();
		}
		if(key=='#'){
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	83 32       	cpi	r24, 0x23	; 35
    1f06:	f1 f0       	breq	.+60     	; 0x1f44 <signUpExecute+0xc8>
			break;
		}else if(key=='*'){
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	8a 32       	cpi	r24, 0x2A	; 42
    1f0c:	31 f4       	brne	.+12     	; 0x1f1a <signUpExecute+0x9e>
			name[0]='\0';
    1f0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f10:	fc 81       	ldd	r31, Y+4	; 0x04
    1f12:	10 82       	st	Z, r1
			password[0]='\0';
    1f14:	ed 81       	ldd	r30, Y+5	; 0x05
    1f16:	fe 81       	ldd	r31, Y+6	; 0x06
    1f18:	10 82       	st	Z, r1
	MC_EEPROM_vidWrite(USER_COUNT_LOCATION,count);
	return SIGNED;
}
boolean	signUpExecute(u8*name, u8*password){
	SIGNUP_STATUS status ;
	while(name[0] == '\0'){
    1f1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f1e:	80 81       	ld	r24, Z
    1f20:	88 23       	and	r24, r24
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <signUpExecute+0xaa>
    1f24:	ba cf       	rjmp	.-140    	; 0x1e9a <signUpExecute+0x1e>
    1f26:	0e c0       	rjmp	.+28     	; 0x1f44 <signUpExecute+0xc8>
			continue;
		}

	}
	while(password[0]== '\0'){
		HCLCD_vidClear();
    1f28:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
		HCLCD_vidSendString("insert password");
    1f2c:	86 e5       	ldi	r24, 0x56	; 86
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		getData(NUMBERS,password,0,1);
    1f34:	2d 81       	ldd	r18, Y+5	; 0x05
    1f36:	3e 81       	ldd	r19, Y+6	; 0x06
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	b9 01       	movw	r22, r18
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	21 e0       	ldi	r18, 0x01	; 1
    1f40:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <getData>
			password[0]='\0';
			continue;
		}

	}
	while(password[0]== '\0'){
    1f44:	ed 81       	ldd	r30, Y+5	; 0x05
    1f46:	fe 81       	ldd	r31, Y+6	; 0x06
    1f48:	80 81       	ld	r24, Z
    1f4a:	88 23       	and	r24, r24
    1f4c:	69 f3       	breq	.-38     	; 0x1f28 <signUpExecute+0xac>
		HCLCD_vidClear();
		HCLCD_vidSendString("insert password");
		getData(NUMBERS,password,0,1);
	}
	status = signUpOrAddUser(name,password);
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	2d 81       	ldd	r18, Y+5	; 0x05
    1f54:	3e 81       	ldd	r19, Y+6	; 0x06
    1f56:	b9 01       	movw	r22, r18
    1f58:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <signUpOrAddUser>
    1f5c:	8a 83       	std	Y+2, r24	; 0x02
	HCLCD_vidClear();
    1f5e:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	if(status == SIGNED){
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	88 23       	and	r24, r24
    1f66:	59 f4       	brne	.+22     	; 0x1f7e <signUpExecute+0x102>
		HCLCD_vidSendString("confirmed ");
    1f68:	88 ed       	ldi	r24, 0xD8	; 216
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		HCLCD_vidSendString(name);
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		return true;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	8f 83       	std	Y+7, r24	; 0x07
    1f7c:	0a c0       	rjmp	.+20     	; 0x1f92 <signUpExecute+0x116>
	}
	else if(status == NO_ROOM){
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	31 f4       	brne	.+12     	; 0x1f90 <signUpExecute+0x114>
		HCLCD_vidSendString("maximum users");
    1f84:	83 ee       	ldi	r24, 0xE3	; 227
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		return false;
    1f8c:	1f 82       	std	Y+7, r1	; 0x07
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <signUpExecute+0x116>
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <signUpExecute+0x11a>
	}
}
    1f92:	8f 81       	ldd	r24, Y+7	; 0x07
    1f94:	88 87       	std	Y+8, r24	; 0x08
    1f96:	88 85       	ldd	r24, Y+8	; 0x08
    1f98:	28 96       	adiw	r28, 0x08	; 8
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <getData>:
void getData(KEYPAD_RETRIVE_VALUES type , u8*dataPtr, u8 xPosition ,u8 yPosition ){
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	6a 97       	sbiw	r28, 0x1a	; 26
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	8c 8b       	std	Y+20, r24	; 0x14
    1fc0:	7e 8b       	std	Y+22, r23	; 0x16
    1fc2:	6d 8b       	std	Y+21, r22	; 0x15
    1fc4:	4f 8b       	std	Y+23, r20	; 0x17
    1fc6:	28 8f       	std	Y+24, r18	; 0x18
	u8(*ptrFunction)(void) = NULL;
    1fc8:	1b 8a       	std	Y+19, r1	; 0x13
    1fca:	1a 8a       	std	Y+18, r1	; 0x12
	u8 key= 0;
    1fcc:	19 8a       	std	Y+17, r1	; 0x11
	u8 i=0;
    1fce:	18 8a       	std	Y+16, r1	; 0x10
	u8 max;
	HCLCD_vidGoTo(xPosition,yPosition);
    1fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd2:	68 8d       	ldd	r22, Y+24	; 0x18
    1fd4:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	switch(type){
    1fd8:	8c 89       	ldd	r24, Y+20	; 0x14
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	3a 8f       	std	Y+26, r19	; 0x1a
    1fe0:	29 8f       	std	Y+25, r18	; 0x19
    1fe2:	89 8d       	ldd	r24, Y+25	; 0x19
    1fe4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	31 f0       	breq	.+12     	; 0x1ff6 <getData+0x4c>
    1fea:	29 8d       	ldd	r18, Y+25	; 0x19
    1fec:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1fee:	21 30       	cpi	r18, 0x01	; 1
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	41 f0       	breq	.+16     	; 0x2004 <getData+0x5a>
    1ff4:	d0 c0       	rjmp	.+416    	; 0x2196 <getData+0x1ec>
		case NUMBERS :
			ptrFunction = HKEYPAD_u8getPressedValue;
    1ff6:	8e e3       	ldi	r24, 0x3E	; 62
    1ff8:	92 e2       	ldi	r25, 0x22	; 34
    1ffa:	9b 8b       	std	Y+19, r25	; 0x13
    1ffc:	8a 8b       	std	Y+18, r24	; 0x12
			max = MAXIMUM_PASSWORD_SIZE;
    1ffe:	88 e0       	ldi	r24, 0x08	; 8
    2000:	8f 87       	std	Y+15, r24	; 0x0f
    2002:	c9 c0       	rjmp	.+402    	; 0x2196 <getData+0x1ec>
			break;
		case CHARACTERS :
			ptrFunction = HKEYPAD_u8getCharecterValue;
    2004:	88 e2       	ldi	r24, 0x28	; 40
    2006:	93 e2       	ldi	r25, 0x23	; 35
    2008:	9b 8b       	std	Y+19, r25	; 0x13
    200a:	8a 8b       	std	Y+18, r24	; 0x12
			max = MAXIMUM_USERNAME_SIZE;
    200c:	8a e0       	ldi	r24, 0x0A	; 10
    200e:	8f 87       	std	Y+15, r24	; 0x0f
    2010:	c2 c0       	rjmp	.+388    	; 0x2196 <getData+0x1ec>
			break;
		default:
			break;
	}
	while (key != '#'){
		key = ptrFunction();
    2012:	ea 89       	ldd	r30, Y+18	; 0x12
    2014:	fb 89       	ldd	r31, Y+19	; 0x13
    2016:	09 95       	icall
    2018:	89 8b       	std	Y+17, r24	; 0x11
		if(key!='+'){
    201a:	89 89       	ldd	r24, Y+17	; 0x11
    201c:	8b 32       	cpi	r24, 0x2B	; 43
    201e:	09 f4       	brne	.+2      	; 0x2022 <getData+0x78>
    2020:	ba c0       	rjmp	.+372    	; 0x2196 <getData+0x1ec>
			if(key == '*'){
    2022:	89 89       	ldd	r24, Y+17	; 0x11
    2024:	8a 32       	cpi	r24, 0x2A	; 42
    2026:	b9 f4       	brne	.+46     	; 0x2056 <getData+0xac>
				if(i!=0){
    2028:	88 89       	ldd	r24, Y+16	; 0x10
    202a:	88 23       	and	r24, r24
    202c:	09 f4       	brne	.+2      	; 0x2030 <getData+0x86>
    202e:	b3 c0       	rjmp	.+358    	; 0x2196 <getData+0x1ec>
					i--;
    2030:	88 89       	ldd	r24, Y+16	; 0x10
    2032:	81 50       	subi	r24, 0x01	; 1
    2034:	88 8b       	std	Y+16, r24	; 0x10
					HCLCD_vidGoTo((xPosition+i),yPosition);
    2036:	9f 89       	ldd	r25, Y+23	; 0x17
    2038:	88 89       	ldd	r24, Y+16	; 0x10
    203a:	89 0f       	add	r24, r25
    203c:	68 8d       	ldd	r22, Y+24	; 0x18
    203e:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
					HCLCD_vidSendData('\b');
    2042:	88 e0       	ldi	r24, 0x08	; 8
    2044:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <HCLCD_vidSendData>
					HCLCD_vidGoTo((xPosition+i),yPosition);
    2048:	9f 89       	ldd	r25, Y+23	; 0x17
    204a:	88 89       	ldd	r24, Y+16	; 0x10
    204c:	89 0f       	add	r24, r25
    204e:	68 8d       	ldd	r22, Y+24	; 0x18
    2050:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
    2054:	a0 c0       	rjmp	.+320    	; 0x2196 <getData+0x1ec>
				}
			}else if(key=='#'){
    2056:	89 89       	ldd	r24, Y+17	; 0x11
    2058:	83 32       	cpi	r24, 0x23	; 35
    205a:	09 f4       	brne	.+2      	; 0x205e <getData+0xb4>
    205c:	a0 c0       	rjmp	.+320    	; 0x219e <getData+0x1f4>
				break;
			}else{
				if(i == max){
    205e:	98 89       	ldd	r25, Y+16	; 0x10
    2060:	8f 85       	ldd	r24, Y+15	; 0x0f
    2062:	98 17       	cp	r25, r24
    2064:	09 f4       	brne	.+2      	; 0x2068 <getData+0xbe>
    2066:	9b c0       	rjmp	.+310    	; 0x219e <getData+0x1f4>
					break;
				}
				dataPtr[i] = key;
    2068:	88 89       	ldd	r24, Y+16	; 0x10
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	8d 89       	ldd	r24, Y+21	; 0x15
    2070:	9e 89       	ldd	r25, Y+22	; 0x16
    2072:	fc 01       	movw	r30, r24
    2074:	e2 0f       	add	r30, r18
    2076:	f3 1f       	adc	r31, r19
    2078:	89 89       	ldd	r24, Y+17	; 0x11
    207a:	80 83       	st	Z, r24
				HCLCD_vidSendData(dataPtr[i]);
    207c:	88 89       	ldd	r24, Y+16	; 0x10
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	8d 89       	ldd	r24, Y+21	; 0x15
    2084:	9e 89       	ldd	r25, Y+22	; 0x16
    2086:	fc 01       	movw	r30, r24
    2088:	e2 0f       	add	r30, r18
    208a:	f3 1f       	adc	r31, r19
    208c:	80 81       	ld	r24, Z
    208e:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <HCLCD_vidSendData>
				if(type == NUMBERS){
    2092:	8c 89       	ldd	r24, Y+20	; 0x14
    2094:	88 23       	and	r24, r24
    2096:	09 f0       	breq	.+2      	; 0x209a <getData+0xf0>
    2098:	7b c0       	rjmp	.+246    	; 0x2190 <getData+0x1e6>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 ef       	ldi	r26, 0xF0	; 240
    20a0:	b1 e4       	ldi	r27, 0x41	; 65
    20a2:	8b 87       	std	Y+11, r24	; 0x0b
    20a4:	9c 87       	std	Y+12, r25	; 0x0c
    20a6:	ad 87       	std	Y+13, r26	; 0x0d
    20a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a ef       	ldi	r20, 0xFA	; 250
    20b8:	54 e4       	ldi	r21, 0x44	; 68
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	8f 83       	std	Y+7, r24	; 0x07
    20c4:	98 87       	std	Y+8, r25	; 0x08
    20c6:	a9 87       	std	Y+9, r26	; 0x09
    20c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ca:	6f 81       	ldd	r22, Y+7	; 0x07
    20cc:	78 85       	ldd	r23, Y+8	; 0x08
    20ce:	89 85       	ldd	r24, Y+9	; 0x09
    20d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	2c f4       	brge	.+10     	; 0x20ec <getData+0x142>
		__ticks = 1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	3f c0       	rjmp	.+126    	; 0x216a <getData+0x1c0>
	else if (__tmp > 65535)
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	57 e4       	ldi	r21, 0x47	; 71
    20fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	4c f5       	brge	.+82     	; 0x2156 <getData+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	6b 85       	ldd	r22, Y+11	; 0x0b
    2106:	7c 85       	ldd	r23, Y+12	; 0x0c
    2108:	8d 85       	ldd	r24, Y+13	; 0x0d
    210a:	9e 85       	ldd	r25, Y+14	; 0x0e
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	0f c0       	rjmp	.+30     	; 0x214c <getData+0x1a2>
    212e:	88 ec       	ldi	r24, 0xC8	; 200
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9c 83       	std	Y+4, r25	; 0x04
    2134:	8b 83       	std	Y+3, r24	; 0x03
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <getData+0x190>
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	8d 81       	ldd	r24, Y+5	; 0x05
    214e:	9e 81       	ldd	r25, Y+6	; 0x06
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f7       	brne	.-38     	; 0x212e <getData+0x184>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <getData+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2156:	6f 81       	ldd	r22, Y+7	; 0x07
    2158:	78 85       	ldd	r23, Y+8	; 0x08
    215a:	89 85       	ldd	r24, Y+9	; 0x09
    215c:	9a 85       	ldd	r25, Y+10	; 0x0a
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	9a 83       	std	Y+2, r25	; 0x02
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <getData+0x1cc>
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(30);
					HCLCD_vidGoTo((xPosition+i),yPosition);
    217e:	8f 89       	ldd	r24, Y+23	; 0x17
    2180:	98 89       	ldd	r25, Y+16	; 0x10
    2182:	89 0f       	add	r24, r25
    2184:	68 8d       	ldd	r22, Y+24	; 0x18
    2186:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
					HCLCD_vidSendData('*');
    218a:	8a e2       	ldi	r24, 0x2A	; 42
    218c:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <HCLCD_vidSendData>
				}
				i++;
    2190:	88 89       	ldd	r24, Y+16	; 0x10
    2192:	8f 5f       	subi	r24, 0xFF	; 255
    2194:	88 8b       	std	Y+16, r24	; 0x10
			max = MAXIMUM_USERNAME_SIZE;
			break;
		default:
			break;
	}
	while (key != '#'){
    2196:	89 89       	ldd	r24, Y+17	; 0x11
    2198:	83 32       	cpi	r24, 0x23	; 35
    219a:	09 f0       	breq	.+2      	; 0x219e <getData+0x1f4>
    219c:	3a cf       	rjmp	.-396    	; 0x2012 <getData+0x68>
				}
				i++;
			}
		}
	}
	dataPtr[i] = '\0';
    219e:	88 89       	ldd	r24, Y+16	; 0x10
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	8d 89       	ldd	r24, Y+21	; 0x15
    21a6:	9e 89       	ldd	r25, Y+22	; 0x16
    21a8:	fc 01       	movw	r30, r24
    21aa:	e2 0f       	add	r30, r18
    21ac:	f3 1f       	adc	r31, r19
    21ae:	10 82       	st	Z, r1
}
    21b0:	6a 96       	adiw	r28, 0x1a	; 26
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <displayMessage>:
void displayMessage(u8*message,u8 xPosition){
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <displayMessage+0x6>
    21c8:	0f 92       	push	r0
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	9a 83       	std	Y+2, r25	; 0x02
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	6b 83       	std	Y+3, r22	; 0x03
	HCLCD_vidGoTo(3,0);
    21d4:	83 e0       	ldi	r24, 0x03	; 3
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString("smart home");
    21dc:	81 ef       	ldi	r24, 0xF1	; 241
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
	HCLCD_vidGoTo(xPosition,1);
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	61 e0       	ldi	r22, 0x01	; 1
    21e8:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
	HCLCD_vidSendString(message);
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
}
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <logOut>:
void logOut(void){
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
	HCLCD_vidClear();
    2208:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
	displayMessage("# to login",3);
    220c:	8c ef       	ldi	r24, 0xFC	; 252
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	63 e0       	ldi	r22, 0x03	; 3
    2212:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <displayMessage>
}
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <disableAll>:
#include "./tv/tv.h"
#include "./component/authpage/auth.h"
#include "./component/tvandac/tvpage.h"
#include "./component/roompage/roompage.h"
#include<util/delay.h>
void disableAll(){
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
	switchOffTVAndAC();
    2224:	0e 94 8a 07 	call	0xf14	; 0xf14 <switchOffTVAndAC>
	switchOffRooms();
    2228:	0e 94 fb 07 	call	0xff6	; 0xff6 <switchOffRooms>
	closeDoor();
    222c:	0e 94 2a 09 	call	0x1254	; 0x1254 <closeDoor>
}
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <main>:
int main(){
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	ef 97       	sbiw	r28, 0x3f	; 63
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
	HCLCD_vidInit();
    224a:	0e 94 44 1b 	call	0x3688	; 0x3688 <HCLCD_vidInit>
	HKEYPAD_vidinit();
    224e:	0e 94 2f 22 	call	0x445e	; 0x445e <HKEYPAD_vidinit>
	u8 username[10]= {'\0'};
    2252:	8a e0       	ldi	r24, 0x0A	; 10
    2254:	fe 01       	movw	r30, r28
    2256:	bc 96       	adiw	r30, 0x2c	; 44
    2258:	df 01       	movw	r26, r30
    225a:	28 2f       	mov	r18, r24
    225c:	1d 92       	st	X+, r1
    225e:	2a 95       	dec	r18
    2260:	e9 f7       	brne	.-6      	; 0x225c <main+0x26>
	u8 pass[8] = {'\0'};
    2262:	88 e0       	ldi	r24, 0x08	; 8
    2264:	fe 01       	movw	r30, r28
    2266:	f6 96       	adiw	r30, 0x36	; 54
    2268:	df 01       	movw	r26, r30
    226a:	28 2f       	mov	r18, r24
    226c:	1d 92       	st	X+, r1
    226e:	2a 95       	dec	r18
    2270:	e9 f7       	brne	.-6      	; 0x226c <main+0x36>
	if(MC_EEPROM_u8Read(USER_COUNT_LOCATION)==0xff){
    2272:	8f ef       	ldi	r24, 0xFF	; 255
    2274:	93 e0       	ldi	r25, 0x03	; 3
    2276:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <MC_EEPROM_u8Read>
    227a:	8f 3f       	cpi	r24, 0xFF	; 255
    227c:	41 f4       	brne	.+16     	; 0x228e <main+0x58>
		displaySignUp(username,pass);
    227e:	ce 01       	movw	r24, r28
    2280:	8c 96       	adiw	r24, 0x2c	; 44
    2282:	9e 01       	movw	r18, r28
    2284:	2a 5c       	subi	r18, 0xCA	; 202
    2286:	3f 4f       	sbci	r19, 0xFF	; 255
    2288:	b9 01       	movw	r22, r18
    228a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <displaySignUp>
	}
	displayLogin(username,pass);
    228e:	ce 01       	movw	r24, r28
    2290:	8c 96       	adiw	r24, 0x2c	; 44
    2292:	9e 01       	movw	r18, r28
    2294:	2a 5c       	subi	r18, 0xCA	; 202
    2296:	3f 4f       	sbci	r19, 0xFF	; 255
    2298:	b9 01       	movw	r22, r18
    229a:	0e 94 30 0c 	call	0x1860	; 0x1860 <displayLogin>
	while(1){
		ROOM_vidInit();
    229e:	0e 94 16 08 	call	0x102c	; 0x102c <ROOM_vidInit>
		TVandACinit();
    22a2:	0e 94 75 07 	call	0xeea	; 0xeea <TVandACinit>
		HCLCD_vidClear();
    22a6:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
		HCLCD_vidSendString("1.logOut 3.reset");
    22aa:	87 e0       	ldi	r24, 0x07	; 7
    22ac:	92 e0       	ldi	r25, 0x02	; 2
    22ae:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		HCLCD_vidGoTo(0,1);
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	61 e0       	ldi	r22, 0x01	; 1
    22b6:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
		HCLCD_vidSendString("2.addnew  #.more");
    22ba:	88 e1       	ldi	r24, 0x18	; 24
    22bc:	92 e0       	ldi	r25, 0x02	; 2
    22be:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <HCLCD_vidSendString>
		u8 key='+';
    22c2:	8b e2       	ldi	r24, 0x2B	; 43
    22c4:	8b a7       	std	Y+43, r24	; 0x2b
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <main+0x98>
		while(key!='1' && key!='2' && key!='3' && key!='#'){
			key = HKEYPAD_u8getPressedValue();
    22c8:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    22cc:	8b a7       	std	Y+43, r24	; 0x2b
		HCLCD_vidClear();
		HCLCD_vidSendString("1.logOut 3.reset");
		HCLCD_vidGoTo(0,1);
		HCLCD_vidSendString("2.addnew  #.more");
		u8 key='+';
		while(key!='1' && key!='2' && key!='3' && key!='#'){
    22ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d0:	81 33       	cpi	r24, 0x31	; 49
    22d2:	49 f0       	breq	.+18     	; 0x22e6 <main+0xb0>
    22d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d6:	82 33       	cpi	r24, 0x32	; 50
    22d8:	31 f0       	breq	.+12     	; 0x22e6 <main+0xb0>
    22da:	8b a5       	ldd	r24, Y+43	; 0x2b
    22dc:	83 33       	cpi	r24, 0x33	; 51
    22de:	19 f0       	breq	.+6      	; 0x22e6 <main+0xb0>
    22e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e2:	83 32       	cpi	r24, 0x23	; 35
    22e4:	89 f7       	brne	.-30     	; 0x22c8 <main+0x92>
			key = HKEYPAD_u8getPressedValue();
		}
		switch(key){
    22e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e8:	a8 2f       	mov	r26, r24
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	bf af       	std	Y+63, r27	; 0x3f
    22ee:	ae af       	std	Y+62, r26	; 0x3e
    22f0:	2e ad       	ldd	r18, Y+62	; 0x3e
    22f2:	3f ad       	ldd	r19, Y+63	; 0x3f
    22f4:	22 33       	cpi	r18, 0x32	; 50
    22f6:	31 05       	cpc	r19, r1
    22f8:	09 f4       	brne	.+2      	; 0x22fc <main+0xc6>
    22fa:	9f c0       	rjmp	.+318    	; 0x243a <main+0x204>
    22fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    22fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2300:	83 33       	cpi	r24, 0x33	; 51
    2302:	91 05       	cpc	r25, r1
    2304:	64 f4       	brge	.+24     	; 0x231e <main+0xe8>
    2306:	ae ad       	ldd	r26, Y+62	; 0x3e
    2308:	bf ad       	ldd	r27, Y+63	; 0x3f
    230a:	a3 32       	cpi	r26, 0x23	; 35
    230c:	b1 05       	cpc	r27, r1
    230e:	09 f4       	brne	.+2      	; 0x2312 <main+0xdc>
    2310:	a4 c1       	rjmp	.+840    	; 0x265a <main+0x424>
    2312:	2e ad       	ldd	r18, Y+62	; 0x3e
    2314:	3f ad       	ldd	r19, Y+63	; 0x3f
    2316:	21 33       	cpi	r18, 0x31	; 49
    2318:	31 05       	cpc	r19, r1
    231a:	41 f0       	breq	.+16     	; 0x232c <main+0xf6>
    231c:	c0 cf       	rjmp	.-128    	; 0x229e <main+0x68>
    231e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2320:	9f ad       	ldd	r25, Y+63	; 0x3f
    2322:	83 33       	cpi	r24, 0x33	; 51
    2324:	91 05       	cpc	r25, r1
    2326:	09 f4       	brne	.+2      	; 0x232a <main+0xf4>
    2328:	0b c1       	rjmp	.+534    	; 0x2540 <main+0x30a>
    232a:	b9 cf       	rjmp	.-142    	; 0x229e <main+0x68>
		case '1' :
			disableAll();
    232c:	0e 94 0e 11 	call	0x221c	; 0x221c <disableAll>
			logOut();
    2330:	0e 94 00 11 	call	0x2200	; 0x2200 <logOut>
			while(HKEYPAD_u8getPressedValue()!='#');
    2334:	0e 94 3e 22 	call	0x447c	; 0x447c <HKEYPAD_u8getPressedValue>
    2338:	83 32       	cpi	r24, 0x23	; 35
    233a:	e1 f7       	brne	.-8      	; 0x2334 <main+0xfe>
			HCLCD_vidClear();
    233c:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
			loginExecute(username,pass);
    2340:	ce 01       	movw	r24, r28
    2342:	8c 96       	adiw	r24, 0x2c	; 44
    2344:	9e 01       	movw	r18, r28
    2346:	2a 5c       	subi	r18, 0xCA	; 202
    2348:	3f 4f       	sbci	r19, 0xFF	; 255
    234a:	b9 01       	movw	r22, r18
    234c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <loginExecute>
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a6 e1       	ldi	r26, 0x16	; 22
    2356:	b4 e4       	ldi	r27, 0x44	; 68
    2358:	8f a3       	std	Y+39, r24	; 0x27
    235a:	98 a7       	std	Y+40, r25	; 0x28
    235c:	a9 a7       	std	Y+41, r26	; 0x29
    235e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2360:	6f a1       	ldd	r22, Y+39	; 0x27
    2362:	78 a5       	ldd	r23, Y+40	; 0x28
    2364:	89 a5       	ldd	r24, Y+41	; 0x29
    2366:	9a a5       	ldd	r25, Y+42	; 0x2a
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	4a ef       	ldi	r20, 0xFA	; 250
    236e:	54 e4       	ldi	r21, 0x44	; 68
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	8b a3       	std	Y+35, r24	; 0x23
    237a:	9c a3       	std	Y+36, r25	; 0x24
    237c:	ad a3       	std	Y+37, r26	; 0x25
    237e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2380:	6b a1       	ldd	r22, Y+35	; 0x23
    2382:	7c a1       	ldd	r23, Y+36	; 0x24
    2384:	8d a1       	ldd	r24, Y+37	; 0x25
    2386:	9e a1       	ldd	r25, Y+38	; 0x26
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e8       	ldi	r20, 0x80	; 128
    238e:	5f e3       	ldi	r21, 0x3F	; 63
    2390:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2394:	88 23       	and	r24, r24
    2396:	2c f4       	brge	.+10     	; 0x23a2 <main+0x16c>
		__ticks = 1;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9a a3       	std	Y+34, r25	; 0x22
    239e:	89 a3       	std	Y+33, r24	; 0x21
    23a0:	3f c0       	rjmp	.+126    	; 0x2420 <main+0x1ea>
	else if (__tmp > 65535)
    23a2:	6b a1       	ldd	r22, Y+35	; 0x23
    23a4:	7c a1       	ldd	r23, Y+36	; 0x24
    23a6:	8d a1       	ldd	r24, Y+37	; 0x25
    23a8:	9e a1       	ldd	r25, Y+38	; 0x26
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	3f ef       	ldi	r19, 0xFF	; 255
    23ae:	4f e7       	ldi	r20, 0x7F	; 127
    23b0:	57 e4       	ldi	r21, 0x47	; 71
    23b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b6:	18 16       	cp	r1, r24
    23b8:	4c f5       	brge	.+82     	; 0x240c <main+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ba:	6f a1       	ldd	r22, Y+39	; 0x27
    23bc:	78 a5       	ldd	r23, Y+40	; 0x28
    23be:	89 a5       	ldd	r24, Y+41	; 0x29
    23c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e2       	ldi	r20, 0x20	; 32
    23c8:	51 e4       	ldi	r21, 0x41	; 65
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9a a3       	std	Y+34, r25	; 0x22
    23e0:	89 a3       	std	Y+33, r24	; 0x21
    23e2:	0f c0       	rjmp	.+30     	; 0x2402 <main+0x1cc>
    23e4:	88 ec       	ldi	r24, 0xC8	; 200
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	98 a3       	std	Y+32, r25	; 0x20
    23ea:	8f 8f       	std	Y+31, r24	; 0x1f
    23ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23ee:	98 a1       	ldd	r25, Y+32	; 0x20
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <main+0x1ba>
    23f4:	98 a3       	std	Y+32, r25	; 0x20
    23f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f8:	89 a1       	ldd	r24, Y+33	; 0x21
    23fa:	9a a1       	ldd	r25, Y+34	; 0x22
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	9a a3       	std	Y+34, r25	; 0x22
    2400:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2402:	89 a1       	ldd	r24, Y+33	; 0x21
    2404:	9a a1       	ldd	r25, Y+34	; 0x22
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	69 f7       	brne	.-38     	; 0x23e4 <main+0x1ae>
    240a:	14 c0       	rjmp	.+40     	; 0x2434 <main+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240c:	6b a1       	ldd	r22, Y+35	; 0x23
    240e:	7c a1       	ldd	r23, Y+36	; 0x24
    2410:	8d a1       	ldd	r24, Y+37	; 0x25
    2412:	9e a1       	ldd	r25, Y+38	; 0x26
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9a a3       	std	Y+34, r25	; 0x22
    241e:	89 a3       	std	Y+33, r24	; 0x21
    2420:	89 a1       	ldd	r24, Y+33	; 0x21
    2422:	9a a1       	ldd	r25, Y+34	; 0x22
    2424:	9e 8f       	std	Y+30, r25	; 0x1e
    2426:	8d 8f       	std	Y+29, r24	; 0x1d
    2428:	8d 8d       	ldd	r24, Y+29	; 0x1d
    242a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <main+0x1f6>
    2430:	9e 8f       	std	Y+30, r25	; 0x1e
    2432:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(600);
			HCLCD_vidClear();
    2434:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
    2438:	32 cf       	rjmp	.-412    	; 0x229e <main+0x68>
			break;
		case '2' :
			autoListener();
    243a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <autoListener>
			ACautoListen();
    243e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <ACautoListen>
			username[0]= '\0';
    2442:	1c a6       	std	Y+44, r1	; 0x2c
			pass[0] = '\0';
    2444:	1e aa       	std	Y+54, r1	; 0x36
			signUpExecute(username,pass);
    2446:	ce 01       	movw	r24, r28
    2448:	8c 96       	adiw	r24, 0x2c	; 44
    244a:	9e 01       	movw	r18, r28
    244c:	2a 5c       	subi	r18, 0xCA	; 202
    244e:	3f 4f       	sbci	r19, 0xFF	; 255
    2450:	b9 01       	movw	r22, r18
    2452:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <signUpExecute>
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a6 e1       	ldi	r26, 0x16	; 22
    245c:	b4 e4       	ldi	r27, 0x44	; 68
    245e:	89 8f       	std	Y+25, r24	; 0x19
    2460:	9a 8f       	std	Y+26, r25	; 0x1a
    2462:	ab 8f       	std	Y+27, r26	; 0x1b
    2464:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2466:	69 8d       	ldd	r22, Y+25	; 0x19
    2468:	7a 8d       	ldd	r23, Y+26	; 0x1a
    246a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    246c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	4a ef       	ldi	r20, 0xFA	; 250
    2474:	54 e4       	ldi	r21, 0x44	; 68
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	8d 8b       	std	Y+21, r24	; 0x15
    2480:	9e 8b       	std	Y+22, r25	; 0x16
    2482:	af 8b       	std	Y+23, r26	; 0x17
    2484:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2486:	6d 89       	ldd	r22, Y+21	; 0x15
    2488:	7e 89       	ldd	r23, Y+22	; 0x16
    248a:	8f 89       	ldd	r24, Y+23	; 0x17
    248c:	98 8d       	ldd	r25, Y+24	; 0x18
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e8       	ldi	r20, 0x80	; 128
    2494:	5f e3       	ldi	r21, 0x3F	; 63
    2496:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    249a:	88 23       	and	r24, r24
    249c:	2c f4       	brge	.+10     	; 0x24a8 <main+0x272>
		__ticks = 1;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9c 8b       	std	Y+20, r25	; 0x14
    24a4:	8b 8b       	std	Y+19, r24	; 0x13
    24a6:	3f c0       	rjmp	.+126    	; 0x2526 <main+0x2f0>
	else if (__tmp > 65535)
    24a8:	6d 89       	ldd	r22, Y+21	; 0x15
    24aa:	7e 89       	ldd	r23, Y+22	; 0x16
    24ac:	8f 89       	ldd	r24, Y+23	; 0x17
    24ae:	98 8d       	ldd	r25, Y+24	; 0x18
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	3f ef       	ldi	r19, 0xFF	; 255
    24b4:	4f e7       	ldi	r20, 0x7F	; 127
    24b6:	57 e4       	ldi	r21, 0x47	; 71
    24b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24bc:	18 16       	cp	r1, r24
    24be:	4c f5       	brge	.+82     	; 0x2512 <main+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c0:	69 8d       	ldd	r22, Y+25	; 0x19
    24c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e2       	ldi	r20, 0x20	; 32
    24ce:	51 e4       	ldi	r21, 0x41	; 65
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	9c 8b       	std	Y+20, r25	; 0x14
    24e6:	8b 8b       	std	Y+19, r24	; 0x13
    24e8:	0f c0       	rjmp	.+30     	; 0x2508 <main+0x2d2>
    24ea:	88 ec       	ldi	r24, 0xC8	; 200
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9a 8b       	std	Y+18, r25	; 0x12
    24f0:	89 8b       	std	Y+17, r24	; 0x11
    24f2:	89 89       	ldd	r24, Y+17	; 0x11
    24f4:	9a 89       	ldd	r25, Y+18	; 0x12
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <main+0x2c0>
    24fa:	9a 8b       	std	Y+18, r25	; 0x12
    24fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2500:	9c 89       	ldd	r25, Y+20	; 0x14
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	9c 8b       	std	Y+20, r25	; 0x14
    2506:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2508:	8b 89       	ldd	r24, Y+19	; 0x13
    250a:	9c 89       	ldd	r25, Y+20	; 0x14
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	69 f7       	brne	.-38     	; 0x24ea <main+0x2b4>
    2510:	14 c0       	rjmp	.+40     	; 0x253a <main+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2512:	6d 89       	ldd	r22, Y+21	; 0x15
    2514:	7e 89       	ldd	r23, Y+22	; 0x16
    2516:	8f 89       	ldd	r24, Y+23	; 0x17
    2518:	98 8d       	ldd	r25, Y+24	; 0x18
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9c 8b       	std	Y+20, r25	; 0x14
    2524:	8b 8b       	std	Y+19, r24	; 0x13
    2526:	8b 89       	ldd	r24, Y+19	; 0x13
    2528:	9c 89       	ldd	r25, Y+20	; 0x14
    252a:	98 8b       	std	Y+16, r25	; 0x10
    252c:	8f 87       	std	Y+15, r24	; 0x0f
    252e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2530:	98 89       	ldd	r25, Y+16	; 0x10
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <main+0x2fc>
    2536:	98 8b       	std	Y+16, r25	; 0x10
    2538:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(600);
			HCLCD_vidClear();
    253a:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
    253e:	af ce       	rjmp	.-674    	; 0x229e <main+0x68>
			break;
		case '3' :
			MC_EEPROM_RESET();
    2540:	0e 94 18 14 	call	0x2830	; 0x2830 <MC_EEPROM_RESET>
			HCLCD_vidClear();
    2544:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
			username[0]= '\0';
    2548:	1c a6       	std	Y+44, r1	; 0x2c
			pass[0] = '\0';
    254a:	1e aa       	std	Y+54, r1	; 0x36
			displaySignUp(username,pass);
    254c:	ce 01       	movw	r24, r28
    254e:	8c 96       	adiw	r24, 0x2c	; 44
    2550:	9e 01       	movw	r18, r28
    2552:	2a 5c       	subi	r18, 0xCA	; 202
    2554:	3f 4f       	sbci	r19, 0xFF	; 255
    2556:	b9 01       	movw	r22, r18
    2558:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <displaySignUp>
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	a8 e4       	ldi	r26, 0x48	; 72
    2562:	b3 e4       	ldi	r27, 0x43	; 67
    2564:	8b 87       	std	Y+11, r24	; 0x0b
    2566:	9c 87       	std	Y+12, r25	; 0x0c
    2568:	ad 87       	std	Y+13, r26	; 0x0d
    256a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256c:	6b 85       	ldd	r22, Y+11	; 0x0b
    256e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2570:	8d 85       	ldd	r24, Y+13	; 0x0d
    2572:	9e 85       	ldd	r25, Y+14	; 0x0e
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	4a ef       	ldi	r20, 0xFA	; 250
    257a:	54 e4       	ldi	r21, 0x44	; 68
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	8f 83       	std	Y+7, r24	; 0x07
    2586:	98 87       	std	Y+8, r25	; 0x08
    2588:	a9 87       	std	Y+9, r26	; 0x09
    258a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    258c:	6f 81       	ldd	r22, Y+7	; 0x07
    258e:	78 85       	ldd	r23, Y+8	; 0x08
    2590:	89 85       	ldd	r24, Y+9	; 0x09
    2592:	9a 85       	ldd	r25, Y+10	; 0x0a
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e8       	ldi	r20, 0x80	; 128
    259a:	5f e3       	ldi	r21, 0x3F	; 63
    259c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a0:	88 23       	and	r24, r24
    25a2:	2c f4       	brge	.+10     	; 0x25ae <main+0x378>
		__ticks = 1;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9e 83       	std	Y+6, r25	; 0x06
    25aa:	8d 83       	std	Y+5, r24	; 0x05
    25ac:	3f c0       	rjmp	.+126    	; 0x262c <main+0x3f6>
	else if (__tmp > 65535)
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	57 e4       	ldi	r21, 0x47	; 71
    25be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	4c f5       	brge	.+82     	; 0x2618 <main+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    25cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e2       	ldi	r20, 0x20	; 32
    25d4:	51 e4       	ldi	r21, 0x41	; 65
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9e 83       	std	Y+6, r25	; 0x06
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	0f c0       	rjmp	.+30     	; 0x260e <main+0x3d8>
    25f0:	88 ec       	ldi	r24, 0xC8	; 200
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	9c 83       	std	Y+4, r25	; 0x04
    25f6:	8b 83       	std	Y+3, r24	; 0x03
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	9c 81       	ldd	r25, Y+4	; 0x04
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <main+0x3c6>
    2600:	9c 83       	std	Y+4, r25	; 0x04
    2602:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	9e 83       	std	Y+6, r25	; 0x06
    260c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260e:	8d 81       	ldd	r24, Y+5	; 0x05
    2610:	9e 81       	ldd	r25, Y+6	; 0x06
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	69 f7       	brne	.-38     	; 0x25f0 <main+0x3ba>
    2616:	14 c0       	rjmp	.+40     	; 0x2640 <main+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2618:	6f 81       	ldd	r22, Y+7	; 0x07
    261a:	78 85       	ldd	r23, Y+8	; 0x08
    261c:	89 85       	ldd	r24, Y+9	; 0x09
    261e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	9e 81       	ldd	r25, Y+6	; 0x06
    2630:	9a 83       	std	Y+2, r25	; 0x02
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	9a 81       	ldd	r25, Y+2	; 0x02
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <main+0x402>
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
			HCLCD_vidClear();
    2640:	0e 94 72 21 	call	0x42e4	; 0x42e4 <HCLCD_vidClear>
			username[0]= '\0';
    2644:	1c a6       	std	Y+44, r1	; 0x2c
			pass[0] = '\0';
    2646:	1e aa       	std	Y+54, r1	; 0x36
			displayLogin(username,pass);
    2648:	ce 01       	movw	r24, r28
    264a:	8c 96       	adiw	r24, 0x2c	; 44
    264c:	9e 01       	movw	r18, r28
    264e:	2a 5c       	subi	r18, 0xCA	; 202
    2650:	3f 4f       	sbci	r19, 0xFF	; 255
    2652:	b9 01       	movw	r22, r18
    2654:	0e 94 30 0c 	call	0x1860	; 0x1860 <displayLogin>
    2658:	22 ce       	rjmp	.-956    	; 0x229e <main+0x68>
			break;
		case '#':
			displayRoomPageOne();
    265a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <displayRoomPageOne>
    265e:	1f ce       	rjmp	.-962    	; 0x229e <main+0x68>

00002660 <MC_EEPROM_vidWrite>:
#include "../../LIB/math/datatypes.h"
#include "../../LIB/math/bitmask.h"
#include "avr/delay.h"
#include "./eeprom.h"

void MC_EEPROM_vidWrite(u16 address , u8 data){
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <MC_EEPROM_vidWrite+0x6>
    2666:	0f 92       	push	r0
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	6b 83       	std	Y+3, r22	; 0x03
	while(EECR & (1<<EECR_EEWE));
    2672:	ec e3       	ldi	r30, 0x3C	; 60
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	88 2f       	mov	r24, r24
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	82 70       	andi	r24, 0x02	; 2
    267e:	90 70       	andi	r25, 0x00	; 0
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	b9 f7       	brne	.-18     	; 0x2672 <MC_EEPROM_vidWrite+0x12>
	EEARL = (address & 0x00FF);
    2684:	ee e3       	ldi	r30, 0x3E	; 62
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	80 83       	st	Z, r24
	EEARH = (address & 0x0300)>>8;
    268c:	ef e3       	ldi	r30, 0x3F	; 63
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	80 70       	andi	r24, 0x00	; 0
    2696:	93 70       	andi	r25, 0x03	; 3
    2698:	89 2f       	mov	r24, r25
    269a:	99 27       	eor	r25, r25
    269c:	80 83       	st	Z, r24
	EEDR  =	data;
    269e:	ed e3       	ldi	r30, 0x3D	; 61
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	80 83       	st	Z, r24
	EECR =(1<<EECR_EEMWE);
    26a6:	ec e3       	ldi	r30, 0x3C	; 60
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	84 e0       	ldi	r24, 0x04	; 4
    26ac:	80 83       	st	Z, r24
	EECR =(1<<EECR_EEWE);
    26ae:	ec e3       	ldi	r30, 0x3C	; 60
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	80 83       	st	Z, r24

}
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <MC_EEPROM_vidWriteString>:
void MC_EEPROM_vidWriteString(u16 address ,u8*data ){
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <MC_EEPROM_vidWriteString+0x6>
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <MC_EEPROM_vidWriteString+0x8>
    26ca:	0f 92       	push	r0
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	9b 83       	std	Y+3, r25	; 0x03
    26d2:	8a 83       	std	Y+2, r24	; 0x02
    26d4:	7d 83       	std	Y+5, r23	; 0x05
    26d6:	6c 83       	std	Y+4, r22	; 0x04
	u8 i= 0;
    26d8:	19 82       	std	Y+1, r1	; 0x01
    26da:	18 c0       	rjmp	.+48     	; 0x270c <MC_EEPROM_vidWriteString+0x4a>
	while(data[i]){
		MC_EEPROM_vidWrite( (address+i) , data[i]);
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
    26e6:	a9 01       	movw	r20, r18
    26e8:	48 0f       	add	r20, r24
    26ea:	59 1f       	adc	r21, r25
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	8c 81       	ldd	r24, Y+4	; 0x04
    26f4:	9d 81       	ldd	r25, Y+5	; 0x05
    26f6:	fc 01       	movw	r30, r24
    26f8:	e2 0f       	add	r30, r18
    26fa:	f3 1f       	adc	r31, r19
    26fc:	20 81       	ld	r18, Z
    26fe:	ca 01       	movw	r24, r20
    2700:	62 2f       	mov	r22, r18
    2702:	0e 94 30 13 	call	0x2660	; 0x2660 <MC_EEPROM_vidWrite>
		i++;
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	8f 5f       	subi	r24, 0xFF	; 255
    270a:	89 83       	std	Y+1, r24	; 0x01
	EECR =(1<<EECR_EEWE);

}
void MC_EEPROM_vidWriteString(u16 address ,u8*data ){
	u8 i= 0;
	while(data[i]){
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8c 81       	ldd	r24, Y+4	; 0x04
    2714:	9d 81       	ldd	r25, Y+5	; 0x05
    2716:	fc 01       	movw	r30, r24
    2718:	e2 0f       	add	r30, r18
    271a:	f3 1f       	adc	r31, r19
    271c:	80 81       	ld	r24, Z
    271e:	88 23       	and	r24, r24
    2720:	e9 f6       	brne	.-70     	; 0x26dc <MC_EEPROM_vidWriteString+0x1a>
		MC_EEPROM_vidWrite( (address+i) , data[i]);
		i++;
	}
}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <MC_EEPROM_vidRead>:
void  MC_EEPROM_vidRead(u16 address,u8 size,u8 *dataPtr){
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	00 d0       	rcall	.+0      	; 0x273c <MC_EEPROM_vidRead+0xa>
    273c:	00 d0       	rcall	.+0      	; 0x273e <MC_EEPROM_vidRead+0xc>
    273e:	00 d0       	rcall	.+0      	; 0x2740 <MC_EEPROM_vidRead+0xe>
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	9b 83       	std	Y+3, r25	; 0x03
    2746:	8a 83       	std	Y+2, r24	; 0x02
    2748:	6c 83       	std	Y+4, r22	; 0x04
    274a:	5e 83       	std	Y+6, r21	; 0x06
    274c:	4d 83       	std	Y+5, r20	; 0x05
	u8 counter = 0;
    274e:	19 82       	std	Y+1, r1	; 0x01
    2750:	16 c0       	rjmp	.+44     	; 0x277e <MC_EEPROM_vidRead+0x4c>
	while( counter<size  && dataPtr[counter-1] != 0xff){
		dataPtr[counter] = MC_EEPROM_u8Read(  (address+counter) );
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	8c 01       	movw	r16, r24
    275e:	02 0f       	add	r16, r18
    2760:	13 1f       	adc	r17, r19
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	9b 81       	ldd	r25, Y+3	; 0x03
    276c:	82 0f       	add	r24, r18
    276e:	93 1f       	adc	r25, r19
    2770:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <MC_EEPROM_u8Read>
    2774:	f8 01       	movw	r30, r16
    2776:	80 83       	st	Z, r24
		counter++;
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	8f 5f       	subi	r24, 0xFF	; 255
    277c:	89 83       	std	Y+1, r24	; 0x01
		i++;
	}
}
void  MC_EEPROM_vidRead(u16 address,u8 size,u8 *dataPtr){
	u8 counter = 0;
	while( counter<size  && dataPtr[counter-1] != 0xff){
    277e:	99 81       	ldd	r25, Y+1	; 0x01
    2780:	8c 81       	ldd	r24, Y+4	; 0x04
    2782:	98 17       	cp	r25, r24
    2784:	70 f4       	brcc	.+28     	; 0x27a2 <MC_EEPROM_vidRead+0x70>
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	88 2f       	mov	r24, r24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9c 01       	movw	r18, r24
    278e:	21 50       	subi	r18, 0x01	; 1
    2790:	30 40       	sbci	r19, 0x00	; 0
    2792:	8d 81       	ldd	r24, Y+5	; 0x05
    2794:	9e 81       	ldd	r25, Y+6	; 0x06
    2796:	fc 01       	movw	r30, r24
    2798:	e2 0f       	add	r30, r18
    279a:	f3 1f       	adc	r31, r19
    279c:	80 81       	ld	r24, Z
    279e:	8f 3f       	cpi	r24, 0xFF	; 255
    27a0:	c1 f6       	brne	.-80     	; 0x2752 <MC_EEPROM_vidRead+0x20>
		dataPtr[counter] = MC_EEPROM_u8Read(  (address+counter) );
		counter++;
	}
	dataPtr[--counter] = '\0';
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	81 50       	subi	r24, 0x01	; 1
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	fc 01       	movw	r30, r24
    27b4:	e2 0f       	add	r30, r18
    27b6:	f3 1f       	adc	r31, r19
    27b8:	10 82       	st	Z, r1
}
    27ba:	26 96       	adiw	r28, 0x06	; 6
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	08 95       	ret

000027d0 <MC_EEPROM_u8Read>:
u8   MC_EEPROM_u8Read(u16 address){
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <MC_EEPROM_u8Read+0x6>
    27d6:	0f 92       	push	r0
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	9b 83       	std	Y+3, r25	; 0x03
    27de:	8a 83       	std	Y+2, r24	; 0x02
	while(EECR & (1<<EECR_EEWE));
    27e0:	ec e3       	ldi	r30, 0x3C	; 60
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	82 70       	andi	r24, 0x02	; 2
    27ec:	90 70       	andi	r25, 0x00	; 0
    27ee:	00 97       	sbiw	r24, 0x00	; 0
    27f0:	b9 f7       	brne	.-18     	; 0x27e0 <MC_EEPROM_u8Read+0x10>
	u8 data;
	EEARL = (address & 0x00FF);
    27f2:	ee e3       	ldi	r30, 0x3E	; 62
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	80 83       	st	Z, r24
	EEARH = (address & 0x0300)>>8;
    27fa:	ef e3       	ldi	r30, 0x3F	; 63
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	9b 81       	ldd	r25, Y+3	; 0x03
    2802:	80 70       	andi	r24, 0x00	; 0
    2804:	93 70       	andi	r25, 0x03	; 3
    2806:	89 2f       	mov	r24, r25
    2808:	99 27       	eor	r25, r25
    280a:	80 83       	st	Z, r24
	EECR  |= 1<< EECR_EERE;
    280c:	ac e3       	ldi	r26, 0x3C	; 60
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	ec e3       	ldi	r30, 0x3C	; 60
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	81 60       	ori	r24, 0x01	; 1
    2818:	8c 93       	st	X, r24
	data = EEDR;
    281a:	ed e3       	ldi	r30, 0x3D	; 61
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	89 83       	std	Y+1, r24	; 0x01
	return data;
    2822:	89 81       	ldd	r24, Y+1	; 0x01
}
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <MC_EEPROM_RESET>:
void MC_EEPROM_RESET(){
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	00 d0       	rcall	.+0      	; 0x2836 <MC_EEPROM_RESET+0x6>
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
	u16 i =0;
    283a:	1a 82       	std	Y+2, r1	; 0x02
    283c:	19 82       	std	Y+1, r1	; 0x01
    283e:	0a c0       	rjmp	.+20     	; 0x2854 <MC_EEPROM_RESET+0x24>
	while(i<1024){
		MC_EEPROM_vidWrite(i,0xff);
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	6f ef       	ldi	r22, 0xFF	; 255
    2846:	0e 94 30 13 	call	0x2660	; 0x2660 <MC_EEPROM_vidWrite>
		i++;
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	9a 81       	ldd	r25, Y+2	; 0x02
    284e:	01 96       	adiw	r24, 0x01	; 1
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01
	data = EEDR;
	return data;
}
void MC_EEPROM_RESET(){
	u16 i =0;
	while(i<1024){
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	9a 81       	ldd	r25, Y+2	; 0x02
    2858:	24 e0       	ldi	r18, 0x04	; 4
    285a:	80 30       	cpi	r24, 0x00	; 0
    285c:	92 07       	cpc	r25, r18
    285e:	80 f3       	brcs	.-32     	; 0x2840 <MC_EEPROM_RESET+0x10>
		MC_EEPROM_vidWrite(i,0xff);
		i++;
	}
}
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <DIO_VIDSetPinDirection>:
 * Author: 				ASHRY
 */
#include "../../LIB/math/bitmask.h"
#include "../../LIB/math/datatypes.h"
#include "./dio.h"
void DIO_VIDSetPinDirection(u8 cpy_u8PortNumber,u8 cpy_u8PinNumber,u8 cpy_u8PinDirection){
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	29 97       	sbiw	r28, 0x09	; 9
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	6a 83       	std	Y+2, r22	; 0x02
    2882:	4b 83       	std	Y+3, r20	; 0x03
	switch(cpy_u8PinDirection){
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	39 87       	std	Y+9, r19	; 0x09
    288c:	28 87       	std	Y+8, r18	; 0x08
    288e:	88 85       	ldd	r24, Y+8	; 0x08
    2890:	99 85       	ldd	r25, Y+9	; 0x09
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	09 f4       	brne	.+2      	; 0x2898 <DIO_VIDSetPinDirection+0x2e>
    2896:	77 c0       	rjmp	.+238    	; 0x2986 <DIO_VIDSetPinDirection+0x11c>
    2898:	28 85       	ldd	r18, Y+8	; 0x08
    289a:	39 85       	ldd	r19, Y+9	; 0x09
    289c:	21 30       	cpi	r18, 0x01	; 1
    289e:	31 05       	cpc	r19, r1
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <DIO_VIDSetPinDirection+0x3a>
    28a2:	e5 c0       	rjmp	.+458    	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
	case OUTPUT:
		switch (cpy_u8PortNumber){
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	3f 83       	std	Y+7, r19	; 0x07
    28ac:	2e 83       	std	Y+6, r18	; 0x06
    28ae:	8e 81       	ldd	r24, Y+6	; 0x06
    28b0:	9f 81       	ldd	r25, Y+7	; 0x07
    28b2:	82 34       	cpi	r24, 0x42	; 66
    28b4:	91 05       	cpc	r25, r1
    28b6:	59 f1       	breq	.+86     	; 0x290e <DIO_VIDSetPinDirection+0xa4>
    28b8:	2e 81       	ldd	r18, Y+6	; 0x06
    28ba:	3f 81       	ldd	r19, Y+7	; 0x07
    28bc:	23 34       	cpi	r18, 0x43	; 67
    28be:	31 05       	cpc	r19, r1
    28c0:	34 f4       	brge	.+12     	; 0x28ce <DIO_VIDSetPinDirection+0x64>
    28c2:	8e 81       	ldd	r24, Y+6	; 0x06
    28c4:	9f 81       	ldd	r25, Y+7	; 0x07
    28c6:	81 34       	cpi	r24, 0x41	; 65
    28c8:	91 05       	cpc	r25, r1
    28ca:	69 f0       	breq	.+26     	; 0x28e6 <DIO_VIDSetPinDirection+0x7c>
    28cc:	d0 c0       	rjmp	.+416    	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
    28ce:	2e 81       	ldd	r18, Y+6	; 0x06
    28d0:	3f 81       	ldd	r19, Y+7	; 0x07
    28d2:	24 34       	cpi	r18, 0x44	; 68
    28d4:	31 05       	cpc	r19, r1
    28d6:	09 f4       	brne	.+2      	; 0x28da <DIO_VIDSetPinDirection+0x70>
    28d8:	42 c0       	rjmp	.+132    	; 0x295e <DIO_VIDSetPinDirection+0xf4>
    28da:	8e 81       	ldd	r24, Y+6	; 0x06
    28dc:	9f 81       	ldd	r25, Y+7	; 0x07
    28de:	83 36       	cpi	r24, 0x63	; 99
    28e0:	91 05       	cpc	r25, r1
    28e2:	49 f1       	breq	.+82     	; 0x2936 <DIO_VIDSetPinDirection+0xcc>
    28e4:	c4 c0       	rjmp	.+392    	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
		case PORT_A:
			setBit(DDRA,cpy_u8PinNumber);
    28e6:	aa e3       	ldi	r26, 0x3A	; 58
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	ea e3       	ldi	r30, 0x3A	; 58
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	48 2f       	mov	r20, r24
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	02 2e       	mov	r0, r18
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <DIO_VIDSetPinDirection+0x9a>
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	0a 94       	dec	r0
    2906:	e2 f7       	brpl	.-8      	; 0x2900 <DIO_VIDSetPinDirection+0x96>
    2908:	84 2b       	or	r24, r20
    290a:	8c 93       	st	X, r24
    290c:	b0 c0       	rjmp	.+352    	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
			break;
		case PORT_B:
			setBit(DDRB,cpy_u8PinNumber);
    290e:	a7 e3       	ldi	r26, 0x37	; 55
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e7 e3       	ldi	r30, 0x37	; 55
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	48 2f       	mov	r20, r24
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	02 2e       	mov	r0, r18
    2926:	02 c0       	rjmp	.+4      	; 0x292c <DIO_VIDSetPinDirection+0xc2>
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	0a 94       	dec	r0
    292e:	e2 f7       	brpl	.-8      	; 0x2928 <DIO_VIDSetPinDirection+0xbe>
    2930:	84 2b       	or	r24, r20
    2932:	8c 93       	st	X, r24
    2934:	9c c0       	rjmp	.+312    	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
			break;
		case PORT_C:
			setBit(DDRC,cpy_u8PinNumber);
    2936:	a4 e3       	ldi	r26, 0x34	; 52
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e4 e3       	ldi	r30, 0x34	; 52
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	48 2f       	mov	r20, r24
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	28 2f       	mov	r18, r24
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	02 2e       	mov	r0, r18
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <DIO_VIDSetPinDirection+0xea>
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	0a 94       	dec	r0
    2956:	e2 f7       	brpl	.-8      	; 0x2950 <DIO_VIDSetPinDirection+0xe6>
    2958:	84 2b       	or	r24, r20
    295a:	8c 93       	st	X, r24
    295c:	88 c0       	rjmp	.+272    	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
			break;
		case PORT_D:
			setBit(DDRD,cpy_u8PinNumber);
    295e:	a1 e3       	ldi	r26, 0x31	; 49
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e1 e3       	ldi	r30, 0x31	; 49
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	48 2f       	mov	r20, r24
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	28 2f       	mov	r18, r24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	02 2e       	mov	r0, r18
    2976:	02 c0       	rjmp	.+4      	; 0x297c <DIO_VIDSetPinDirection+0x112>
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	0a 94       	dec	r0
    297e:	e2 f7       	brpl	.-8      	; 0x2978 <DIO_VIDSetPinDirection+0x10e>
    2980:	84 2b       	or	r24, r20
    2982:	8c 93       	st	X, r24
    2984:	74 c0       	rjmp	.+232    	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
		default:
			break;
		}
		break;
		case INPUT:
			switch (cpy_u8PortNumber){
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	3d 83       	std	Y+5, r19	; 0x05
    298e:	2c 83       	std	Y+4, r18	; 0x04
    2990:	8c 81       	ldd	r24, Y+4	; 0x04
    2992:	9d 81       	ldd	r25, Y+5	; 0x05
    2994:	82 34       	cpi	r24, 0x42	; 66
    2996:	91 05       	cpc	r25, r1
    2998:	61 f1       	breq	.+88     	; 0x29f2 <DIO_VIDSetPinDirection+0x188>
    299a:	2c 81       	ldd	r18, Y+4	; 0x04
    299c:	3d 81       	ldd	r19, Y+5	; 0x05
    299e:	23 34       	cpi	r18, 0x43	; 67
    29a0:	31 05       	cpc	r19, r1
    29a2:	34 f4       	brge	.+12     	; 0x29b0 <DIO_VIDSetPinDirection+0x146>
    29a4:	8c 81       	ldd	r24, Y+4	; 0x04
    29a6:	9d 81       	ldd	r25, Y+5	; 0x05
    29a8:	81 34       	cpi	r24, 0x41	; 65
    29aa:	91 05       	cpc	r25, r1
    29ac:	69 f0       	breq	.+26     	; 0x29c8 <DIO_VIDSetPinDirection+0x15e>
    29ae:	5f c0       	rjmp	.+190    	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
    29b0:	2c 81       	ldd	r18, Y+4	; 0x04
    29b2:	3d 81       	ldd	r19, Y+5	; 0x05
    29b4:	24 34       	cpi	r18, 0x44	; 68
    29b6:	31 05       	cpc	r19, r1
    29b8:	09 f4       	brne	.+2      	; 0x29bc <DIO_VIDSetPinDirection+0x152>
    29ba:	45 c0       	rjmp	.+138    	; 0x2a46 <DIO_VIDSetPinDirection+0x1dc>
    29bc:	8c 81       	ldd	r24, Y+4	; 0x04
    29be:	9d 81       	ldd	r25, Y+5	; 0x05
    29c0:	83 36       	cpi	r24, 0x63	; 99
    29c2:	91 05       	cpc	r25, r1
    29c4:	59 f1       	breq	.+86     	; 0x2a1c <DIO_VIDSetPinDirection+0x1b2>
    29c6:	53 c0       	rjmp	.+166    	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
			case PORT_A:
				clearBit(DDRA,cpy_u8PinNumber);
    29c8:	aa e3       	ldi	r26, 0x3A	; 58
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	ea e3       	ldi	r30, 0x3A	; 58
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	48 2f       	mov	r20, r24
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	02 2e       	mov	r0, r18
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <DIO_VIDSetPinDirection+0x17c>
    29e2:	88 0f       	add	r24, r24
    29e4:	99 1f       	adc	r25, r25
    29e6:	0a 94       	dec	r0
    29e8:	e2 f7       	brpl	.-8      	; 0x29e2 <DIO_VIDSetPinDirection+0x178>
    29ea:	80 95       	com	r24
    29ec:	84 23       	and	r24, r20
    29ee:	8c 93       	st	X, r24
    29f0:	3e c0       	rjmp	.+124    	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
				break;
			case PORT_B:
				clearBit(DDRB,cpy_u8PinNumber);
    29f2:	a7 e3       	ldi	r26, 0x37	; 55
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	e7 e3       	ldi	r30, 0x37	; 55
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	48 2f       	mov	r20, r24
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	28 2f       	mov	r18, r24
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	02 2e       	mov	r0, r18
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <DIO_VIDSetPinDirection+0x1a6>
    2a0c:	88 0f       	add	r24, r24
    2a0e:	99 1f       	adc	r25, r25
    2a10:	0a 94       	dec	r0
    2a12:	e2 f7       	brpl	.-8      	; 0x2a0c <DIO_VIDSetPinDirection+0x1a2>
    2a14:	80 95       	com	r24
    2a16:	84 23       	and	r24, r20
    2a18:	8c 93       	st	X, r24
    2a1a:	29 c0       	rjmp	.+82     	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
				break;
			case PORT_C:
				clearBit(DDRC,cpy_u8PinNumber);
    2a1c:	a4 e3       	ldi	r26, 0x34	; 52
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	e4 e3       	ldi	r30, 0x34	; 52
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	48 2f       	mov	r20, r24
    2a28:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	02 2e       	mov	r0, r18
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <DIO_VIDSetPinDirection+0x1d0>
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	0a 94       	dec	r0
    2a3c:	e2 f7       	brpl	.-8      	; 0x2a36 <DIO_VIDSetPinDirection+0x1cc>
    2a3e:	80 95       	com	r24
    2a40:	84 23       	and	r24, r20
    2a42:	8c 93       	st	X, r24
    2a44:	14 c0       	rjmp	.+40     	; 0x2a6e <DIO_VIDSetPinDirection+0x204>
				break;
			case PORT_D:
				clearBit(DDRD,cpy_u8PinNumber);
    2a46:	a1 e3       	ldi	r26, 0x31	; 49
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e1 e3       	ldi	r30, 0x31	; 49
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	48 2f       	mov	r20, r24
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	02 2e       	mov	r0, r18
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <DIO_VIDSetPinDirection+0x1fa>
    2a60:	88 0f       	add	r24, r24
    2a62:	99 1f       	adc	r25, r25
    2a64:	0a 94       	dec	r0
    2a66:	e2 f7       	brpl	.-8      	; 0x2a60 <DIO_VIDSetPinDirection+0x1f6>
    2a68:	80 95       	com	r24
    2a6a:	84 23       	and	r24, r20
    2a6c:	8c 93       	st	X, r24
			}
			break;
			default:
				break;
	}
}
    2a6e:	29 96       	adiw	r28, 0x09	; 9
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <DIO_VIDSetPinValue>:
void DIO_VIDSetPinValue(u8 cpy_u8PortNumber,u8 cpy_u8PinNumber,u8 cpy_u8PinValue){
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	29 97       	sbiw	r28, 0x09	; 9
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	89 83       	std	Y+1, r24	; 0x01
    2a96:	6a 83       	std	Y+2, r22	; 0x02
    2a98:	4b 83       	std	Y+3, r20	; 0x03
	switch(cpy_u8PinValue){
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	39 87       	std	Y+9, r19	; 0x09
    2aa2:	28 87       	std	Y+8, r18	; 0x08
    2aa4:	88 85       	ldd	r24, Y+8	; 0x08
    2aa6:	99 85       	ldd	r25, Y+9	; 0x09
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <DIO_VIDSetPinValue+0x2e>
    2aac:	77 c0       	rjmp	.+238    	; 0x2b9c <DIO_VIDSetPinValue+0x11c>
    2aae:	28 85       	ldd	r18, Y+8	; 0x08
    2ab0:	39 85       	ldd	r19, Y+9	; 0x09
    2ab2:	21 30       	cpi	r18, 0x01	; 1
    2ab4:	31 05       	cpc	r19, r1
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <DIO_VIDSetPinValue+0x3a>
    2ab8:	e5 c0       	rjmp	.+458    	; 0x2c84 <DIO_VIDSetPinValue+0x204>
	case HIGH :
		switch (cpy_u8PortNumber){
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	28 2f       	mov	r18, r24
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	3f 83       	std	Y+7, r19	; 0x07
    2ac2:	2e 83       	std	Y+6, r18	; 0x06
    2ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ac8:	82 34       	cpi	r24, 0x42	; 66
    2aca:	91 05       	cpc	r25, r1
    2acc:	59 f1       	breq	.+86     	; 0x2b24 <DIO_VIDSetPinValue+0xa4>
    2ace:	2e 81       	ldd	r18, Y+6	; 0x06
    2ad0:	3f 81       	ldd	r19, Y+7	; 0x07
    2ad2:	23 34       	cpi	r18, 0x43	; 67
    2ad4:	31 05       	cpc	r19, r1
    2ad6:	34 f4       	brge	.+12     	; 0x2ae4 <DIO_VIDSetPinValue+0x64>
    2ad8:	8e 81       	ldd	r24, Y+6	; 0x06
    2ada:	9f 81       	ldd	r25, Y+7	; 0x07
    2adc:	81 34       	cpi	r24, 0x41	; 65
    2ade:	91 05       	cpc	r25, r1
    2ae0:	69 f0       	breq	.+26     	; 0x2afc <DIO_VIDSetPinValue+0x7c>
    2ae2:	d0 c0       	rjmp	.+416    	; 0x2c84 <DIO_VIDSetPinValue+0x204>
    2ae4:	2e 81       	ldd	r18, Y+6	; 0x06
    2ae6:	3f 81       	ldd	r19, Y+7	; 0x07
    2ae8:	24 34       	cpi	r18, 0x44	; 68
    2aea:	31 05       	cpc	r19, r1
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <DIO_VIDSetPinValue+0x70>
    2aee:	42 c0       	rjmp	.+132    	; 0x2b74 <DIO_VIDSetPinValue+0xf4>
    2af0:	8e 81       	ldd	r24, Y+6	; 0x06
    2af2:	9f 81       	ldd	r25, Y+7	; 0x07
    2af4:	83 36       	cpi	r24, 0x63	; 99
    2af6:	91 05       	cpc	r25, r1
    2af8:	49 f1       	breq	.+82     	; 0x2b4c <DIO_VIDSetPinValue+0xcc>
    2afa:	c4 c0       	rjmp	.+392    	; 0x2c84 <DIO_VIDSetPinValue+0x204>
		case PORT_A:
			setBit(PORTA,cpy_u8PinNumber);
    2afc:	ab e3       	ldi	r26, 0x3B	; 59
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	eb e3       	ldi	r30, 0x3B	; 59
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	48 2f       	mov	r20, r24
    2b08:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	02 2e       	mov	r0, r18
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <DIO_VIDSetPinValue+0x9a>
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	0a 94       	dec	r0
    2b1c:	e2 f7       	brpl	.-8      	; 0x2b16 <DIO_VIDSetPinValue+0x96>
    2b1e:	84 2b       	or	r24, r20
    2b20:	8c 93       	st	X, r24
    2b22:	b0 c0       	rjmp	.+352    	; 0x2c84 <DIO_VIDSetPinValue+0x204>
			break;
		case PORT_B:
			setBit(PORTB,cpy_u8PinNumber);
    2b24:	a8 e3       	ldi	r26, 0x38	; 56
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	e8 e3       	ldi	r30, 0x38	; 56
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	48 2f       	mov	r20, r24
    2b30:	8a 81       	ldd	r24, Y+2	; 0x02
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	02 2e       	mov	r0, r18
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <DIO_VIDSetPinValue+0xc2>
    2b3e:	88 0f       	add	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	0a 94       	dec	r0
    2b44:	e2 f7       	brpl	.-8      	; 0x2b3e <DIO_VIDSetPinValue+0xbe>
    2b46:	84 2b       	or	r24, r20
    2b48:	8c 93       	st	X, r24
    2b4a:	9c c0       	rjmp	.+312    	; 0x2c84 <DIO_VIDSetPinValue+0x204>
			break;
		case PORT_C:
			setBit(PORTC,cpy_u8PinNumber);
    2b4c:	a5 e3       	ldi	r26, 0x35	; 53
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e5 e3       	ldi	r30, 0x35	; 53
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	48 2f       	mov	r20, r24
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	28 2f       	mov	r18, r24
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	02 2e       	mov	r0, r18
    2b64:	02 c0       	rjmp	.+4      	; 0x2b6a <DIO_VIDSetPinValue+0xea>
    2b66:	88 0f       	add	r24, r24
    2b68:	99 1f       	adc	r25, r25
    2b6a:	0a 94       	dec	r0
    2b6c:	e2 f7       	brpl	.-8      	; 0x2b66 <DIO_VIDSetPinValue+0xe6>
    2b6e:	84 2b       	or	r24, r20
    2b70:	8c 93       	st	X, r24
    2b72:	88 c0       	rjmp	.+272    	; 0x2c84 <DIO_VIDSetPinValue+0x204>
			break;
		case PORT_D:
			setBit(PORTD,cpy_u8PinNumber);
    2b74:	a2 e3       	ldi	r26, 0x32	; 50
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	e2 e3       	ldi	r30, 0x32	; 50
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	48 2f       	mov	r20, r24
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	28 2f       	mov	r18, r24
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	02 2e       	mov	r0, r18
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <DIO_VIDSetPinValue+0x112>
    2b8e:	88 0f       	add	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	0a 94       	dec	r0
    2b94:	e2 f7       	brpl	.-8      	; 0x2b8e <DIO_VIDSetPinValue+0x10e>
    2b96:	84 2b       	or	r24, r20
    2b98:	8c 93       	st	X, r24
    2b9a:	74 c0       	rjmp	.+232    	; 0x2c84 <DIO_VIDSetPinValue+0x204>
		default:
			break;
		}
		break;
		case LOW :
			switch (cpy_u8PortNumber){
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	3d 83       	std	Y+5, r19	; 0x05
    2ba4:	2c 83       	std	Y+4, r18	; 0x04
    2ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    2baa:	82 34       	cpi	r24, 0x42	; 66
    2bac:	91 05       	cpc	r25, r1
    2bae:	61 f1       	breq	.+88     	; 0x2c08 <DIO_VIDSetPinValue+0x188>
    2bb0:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb2:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb4:	23 34       	cpi	r18, 0x43	; 67
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	34 f4       	brge	.+12     	; 0x2bc6 <DIO_VIDSetPinValue+0x146>
    2bba:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbe:	81 34       	cpi	r24, 0x41	; 65
    2bc0:	91 05       	cpc	r25, r1
    2bc2:	69 f0       	breq	.+26     	; 0x2bde <DIO_VIDSetPinValue+0x15e>
    2bc4:	5f c0       	rjmp	.+190    	; 0x2c84 <DIO_VIDSetPinValue+0x204>
    2bc6:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc8:	3d 81       	ldd	r19, Y+5	; 0x05
    2bca:	24 34       	cpi	r18, 0x44	; 68
    2bcc:	31 05       	cpc	r19, r1
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <DIO_VIDSetPinValue+0x152>
    2bd0:	45 c0       	rjmp	.+138    	; 0x2c5c <DIO_VIDSetPinValue+0x1dc>
    2bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd6:	83 36       	cpi	r24, 0x63	; 99
    2bd8:	91 05       	cpc	r25, r1
    2bda:	59 f1       	breq	.+86     	; 0x2c32 <DIO_VIDSetPinValue+0x1b2>
    2bdc:	53 c0       	rjmp	.+166    	; 0x2c84 <DIO_VIDSetPinValue+0x204>
			case PORT_A:
				clearBit(PORTA,cpy_u8PinNumber);
    2bde:	ab e3       	ldi	r26, 0x3B	; 59
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	eb e3       	ldi	r30, 0x3B	; 59
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	48 2f       	mov	r20, r24
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	02 2e       	mov	r0, r18
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <DIO_VIDSetPinValue+0x17c>
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	0a 94       	dec	r0
    2bfe:	e2 f7       	brpl	.-8      	; 0x2bf8 <DIO_VIDSetPinValue+0x178>
    2c00:	80 95       	com	r24
    2c02:	84 23       	and	r24, r20
    2c04:	8c 93       	st	X, r24
    2c06:	3e c0       	rjmp	.+124    	; 0x2c84 <DIO_VIDSetPinValue+0x204>
				break;
			case PORT_B:
				clearBit(PORTB,cpy_u8PinNumber);
    2c08:	a8 e3       	ldi	r26, 0x38	; 56
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e8 e3       	ldi	r30, 0x38	; 56
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	48 2f       	mov	r20, r24
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	02 2e       	mov	r0, r18
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <DIO_VIDSetPinValue+0x1a6>
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	0a 94       	dec	r0
    2c28:	e2 f7       	brpl	.-8      	; 0x2c22 <DIO_VIDSetPinValue+0x1a2>
    2c2a:	80 95       	com	r24
    2c2c:	84 23       	and	r24, r20
    2c2e:	8c 93       	st	X, r24
    2c30:	29 c0       	rjmp	.+82     	; 0x2c84 <DIO_VIDSetPinValue+0x204>
				break;
			case PORT_C:
				clearBit(PORTC,cpy_u8PinNumber);
    2c32:	a5 e3       	ldi	r26, 0x35	; 53
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e5 e3       	ldi	r30, 0x35	; 53
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	48 2f       	mov	r20, r24
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	02 2e       	mov	r0, r18
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <DIO_VIDSetPinValue+0x1d0>
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	0a 94       	dec	r0
    2c52:	e2 f7       	brpl	.-8      	; 0x2c4c <DIO_VIDSetPinValue+0x1cc>
    2c54:	80 95       	com	r24
    2c56:	84 23       	and	r24, r20
    2c58:	8c 93       	st	X, r24
    2c5a:	14 c0       	rjmp	.+40     	; 0x2c84 <DIO_VIDSetPinValue+0x204>
				break;
			case PORT_D:
				clearBit(PORTD,cpy_u8PinNumber);
    2c5c:	a2 e3       	ldi	r26, 0x32	; 50
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	e2 e3       	ldi	r30, 0x32	; 50
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	48 2f       	mov	r20, r24
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	02 2e       	mov	r0, r18
    2c74:	02 c0       	rjmp	.+4      	; 0x2c7a <DIO_VIDSetPinValue+0x1fa>
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	0a 94       	dec	r0
    2c7c:	e2 f7       	brpl	.-8      	; 0x2c76 <DIO_VIDSetPinValue+0x1f6>
    2c7e:	80 95       	com	r24
    2c80:	84 23       	and	r24, r20
    2c82:	8c 93       	st	X, r24
			break;
			default :
				break;

	}
}
    2c84:	29 96       	adiw	r28, 0x09	; 9
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	cd bf       	out	0x3d, r28	; 61
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <DIO_VIDgetPinDirection>:
void DIO_VIDgetPinDirection(u8 cpy_u8PortNumber,u8 cpy_u8PinNumber,u8* buf_u8value){
    2c96:	df 93       	push	r29
    2c98:	cf 93       	push	r28
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <DIO_VIDgetPinDirection+0x6>
    2c9c:	00 d0       	rcall	.+0      	; 0x2c9e <DIO_VIDgetPinDirection+0x8>
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <DIO_VIDgetPinDirection+0xa>
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	6a 83       	std	Y+2, r22	; 0x02
    2ca8:	5c 83       	std	Y+4, r21	; 0x04
    2caa:	4b 83       	std	Y+3, r20	; 0x03
	switch (cpy_u8PortNumber){
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	3e 83       	std	Y+6, r19	; 0x06
    2cb4:	2d 83       	std	Y+5, r18	; 0x05
    2cb6:	4d 81       	ldd	r20, Y+5	; 0x05
    2cb8:	5e 81       	ldd	r21, Y+6	; 0x06
    2cba:	42 34       	cpi	r20, 0x42	; 66
    2cbc:	51 05       	cpc	r21, r1
    2cbe:	59 f1       	breq	.+86     	; 0x2d16 <DIO_VIDgetPinDirection+0x80>
    2cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc4:	83 34       	cpi	r24, 0x43	; 67
    2cc6:	91 05       	cpc	r25, r1
    2cc8:	34 f4       	brge	.+12     	; 0x2cd6 <DIO_VIDgetPinDirection+0x40>
    2cca:	2d 81       	ldd	r18, Y+5	; 0x05
    2ccc:	3e 81       	ldd	r19, Y+6	; 0x06
    2cce:	21 34       	cpi	r18, 0x41	; 65
    2cd0:	31 05       	cpc	r19, r1
    2cd2:	69 f0       	breq	.+26     	; 0x2cee <DIO_VIDgetPinDirection+0x58>
    2cd4:	5b c0       	rjmp	.+182    	; 0x2d8c <DIO_VIDgetPinDirection+0xf6>
    2cd6:	4d 81       	ldd	r20, Y+5	; 0x05
    2cd8:	5e 81       	ldd	r21, Y+6	; 0x06
    2cda:	44 34       	cpi	r20, 0x44	; 68
    2cdc:	51 05       	cpc	r21, r1
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <DIO_VIDgetPinDirection+0x4c>
    2ce0:	42 c0       	rjmp	.+132    	; 0x2d66 <DIO_VIDgetPinDirection+0xd0>
    2ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce6:	83 36       	cpi	r24, 0x63	; 99
    2ce8:	91 05       	cpc	r25, r1
    2cea:	49 f1       	breq	.+82     	; 0x2d3e <DIO_VIDgetPinDirection+0xa8>
    2cec:	4f c0       	rjmp	.+158    	; 0x2d8c <DIO_VIDgetPinDirection+0xf6>
	case PORT_A:
		*buf_u8value = getBit(PINA,cpy_u8PinNumber);
    2cee:	e9 e3       	ldi	r30, 0x39	; 57
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	a9 01       	movw	r20, r18
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <DIO_VIDgetPinDirection+0x70>
    2d02:	55 95       	asr	r21
    2d04:	47 95       	ror	r20
    2d06:	8a 95       	dec	r24
    2d08:	e2 f7       	brpl	.-8      	; 0x2d02 <DIO_VIDgetPinDirection+0x6c>
    2d0a:	ca 01       	movw	r24, r20
    2d0c:	81 70       	andi	r24, 0x01	; 1
    2d0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d10:	fc 81       	ldd	r31, Y+4	; 0x04
    2d12:	80 83       	st	Z, r24
    2d14:	3b c0       	rjmp	.+118    	; 0x2d8c <DIO_VIDgetPinDirection+0xf6>
		break;
	case PORT_B:
		*buf_u8value = getBit(PINB,cpy_u8PinNumber);
    2d16:	e6 e3       	ldi	r30, 0x36	; 54
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	88 2f       	mov	r24, r24
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	a9 01       	movw	r20, r18
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <DIO_VIDgetPinDirection+0x98>
    2d2a:	55 95       	asr	r21
    2d2c:	47 95       	ror	r20
    2d2e:	8a 95       	dec	r24
    2d30:	e2 f7       	brpl	.-8      	; 0x2d2a <DIO_VIDgetPinDirection+0x94>
    2d32:	ca 01       	movw	r24, r20
    2d34:	81 70       	andi	r24, 0x01	; 1
    2d36:	eb 81       	ldd	r30, Y+3	; 0x03
    2d38:	fc 81       	ldd	r31, Y+4	; 0x04
    2d3a:	80 83       	st	Z, r24
    2d3c:	27 c0       	rjmp	.+78     	; 0x2d8c <DIO_VIDgetPinDirection+0xf6>
		break;
	case PORT_C:
		*buf_u8value = getBit(PINC,cpy_u8PinNumber);
    2d3e:	e3 e3       	ldi	r30, 0x33	; 51
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	28 2f       	mov	r18, r24
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	88 2f       	mov	r24, r24
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	a9 01       	movw	r20, r18
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <DIO_VIDgetPinDirection+0xc0>
    2d52:	55 95       	asr	r21
    2d54:	47 95       	ror	r20
    2d56:	8a 95       	dec	r24
    2d58:	e2 f7       	brpl	.-8      	; 0x2d52 <DIO_VIDgetPinDirection+0xbc>
    2d5a:	ca 01       	movw	r24, r20
    2d5c:	81 70       	andi	r24, 0x01	; 1
    2d5e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d60:	fc 81       	ldd	r31, Y+4	; 0x04
    2d62:	80 83       	st	Z, r24
    2d64:	13 c0       	rjmp	.+38     	; 0x2d8c <DIO_VIDgetPinDirection+0xf6>
		break;
	case PORT_D:
		*buf_u8value = getBit(PINA,cpy_u8PinNumber);
    2d66:	e9 e3       	ldi	r30, 0x39	; 57
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	88 2f       	mov	r24, r24
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	a9 01       	movw	r20, r18
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <DIO_VIDgetPinDirection+0xe8>
    2d7a:	55 95       	asr	r21
    2d7c:	47 95       	ror	r20
    2d7e:	8a 95       	dec	r24
    2d80:	e2 f7       	brpl	.-8      	; 0x2d7a <DIO_VIDgetPinDirection+0xe4>
    2d82:	ca 01       	movw	r24, r20
    2d84:	81 70       	andi	r24, 0x01	; 1
    2d86:	eb 81       	ldd	r30, Y+3	; 0x03
    2d88:	fc 81       	ldd	r31, Y+4	; 0x04
    2d8a:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    2d8c:	26 96       	adiw	r28, 0x06	; 6
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <DIO_VIDSetPortDirection>:
void DIO_VIDSetPortDirection(u8 cpy_u8PortNumber,u8 cpy_u8PortDirection){
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <DIO_VIDSetPortDirection+0x6>
    2da4:	00 d0       	rcall	.+0      	; 0x2da6 <DIO_VIDSetPortDirection+0x8>
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	6a 83       	std	Y+2, r22	; 0x02
	switch (cpy_u8PortNumber){
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	3c 83       	std	Y+4, r19	; 0x04
    2db6:	2b 83       	std	Y+3, r18	; 0x03
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbc:	82 34       	cpi	r24, 0x42	; 66
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	d9 f0       	breq	.+54     	; 0x2df8 <DIO_VIDSetPortDirection+0x5a>
    2dc2:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc4:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc6:	23 34       	cpi	r18, 0x43	; 67
    2dc8:	31 05       	cpc	r19, r1
    2dca:	34 f4       	brge	.+12     	; 0x2dd8 <DIO_VIDSetPortDirection+0x3a>
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd0:	81 34       	cpi	r24, 0x41	; 65
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	61 f0       	breq	.+24     	; 0x2dee <DIO_VIDSetPortDirection+0x50>
    2dd6:	1e c0       	rjmp	.+60     	; 0x2e14 <DIO_VIDSetPortDirection+0x76>
    2dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    2dda:	3c 81       	ldd	r19, Y+4	; 0x04
    2ddc:	24 34       	cpi	r18, 0x44	; 68
    2dde:	31 05       	cpc	r19, r1
    2de0:	a9 f0       	breq	.+42     	; 0x2e0c <DIO_VIDSetPortDirection+0x6e>
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	9c 81       	ldd	r25, Y+4	; 0x04
    2de6:	83 36       	cpi	r24, 0x63	; 99
    2de8:	91 05       	cpc	r25, r1
    2dea:	59 f0       	breq	.+22     	; 0x2e02 <DIO_VIDSetPortDirection+0x64>
    2dec:	13 c0       	rjmp	.+38     	; 0x2e14 <DIO_VIDSetPortDirection+0x76>
	case PORT_A:
		DDRA = cpy_u8PortDirection;
    2dee:	ea e3       	ldi	r30, 0x3A	; 58
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	80 83       	st	Z, r24
    2df6:	0e c0       	rjmp	.+28     	; 0x2e14 <DIO_VIDSetPortDirection+0x76>
		break;
	case PORT_B:
		DDRB = cpy_u8PortDirection;
    2df8:	e7 e3       	ldi	r30, 0x37	; 55
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	80 83       	st	Z, r24
    2e00:	09 c0       	rjmp	.+18     	; 0x2e14 <DIO_VIDSetPortDirection+0x76>
		break;
	case PORT_C:
		DDRC = cpy_u8PortDirection;
    2e02:	e4 e3       	ldi	r30, 0x34	; 52
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	80 83       	st	Z, r24
    2e0a:	04 c0       	rjmp	.+8      	; 0x2e14 <DIO_VIDSetPortDirection+0x76>
		break;
	case PORT_D:
		DDRD = cpy_u8PortDirection;
    2e0c:	e1 e3       	ldi	r30, 0x31	; 49
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	8a 81       	ldd	r24, Y+2	; 0x02
    2e12:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    2e14:	0f 90       	pop	r0
    2e16:	0f 90       	pop	r0
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	cf 91       	pop	r28
    2e1e:	df 91       	pop	r29
    2e20:	08 95       	ret

00002e22 <DIO_VIDSetPortValue>:
void DIO_VIDSetPortValue(u8 cpy_u8PortNumber,u8 cpy_u8PortValue){
    2e22:	df 93       	push	r29
    2e24:	cf 93       	push	r28
    2e26:	00 d0       	rcall	.+0      	; 0x2e28 <DIO_VIDSetPortValue+0x6>
    2e28:	00 d0       	rcall	.+0      	; 0x2e2a <DIO_VIDSetPortValue+0x8>
    2e2a:	cd b7       	in	r28, 0x3d	; 61
    2e2c:	de b7       	in	r29, 0x3e	; 62
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	6a 83       	std	Y+2, r22	; 0x02
	switch (cpy_u8PortNumber){
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	28 2f       	mov	r18, r24
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	3c 83       	std	Y+4, r19	; 0x04
    2e3a:	2b 83       	std	Y+3, r18	; 0x03
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e40:	82 34       	cpi	r24, 0x42	; 66
    2e42:	91 05       	cpc	r25, r1
    2e44:	d9 f0       	breq	.+54     	; 0x2e7c <DIO_VIDSetPortValue+0x5a>
    2e46:	2b 81       	ldd	r18, Y+3	; 0x03
    2e48:	3c 81       	ldd	r19, Y+4	; 0x04
    2e4a:	23 34       	cpi	r18, 0x43	; 67
    2e4c:	31 05       	cpc	r19, r1
    2e4e:	34 f4       	brge	.+12     	; 0x2e5c <DIO_VIDSetPortValue+0x3a>
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	9c 81       	ldd	r25, Y+4	; 0x04
    2e54:	81 34       	cpi	r24, 0x41	; 65
    2e56:	91 05       	cpc	r25, r1
    2e58:	61 f0       	breq	.+24     	; 0x2e72 <DIO_VIDSetPortValue+0x50>
    2e5a:	1e c0       	rjmp	.+60     	; 0x2e98 <DIO_VIDSetPortValue+0x76>
    2e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e5e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e60:	24 34       	cpi	r18, 0x44	; 68
    2e62:	31 05       	cpc	r19, r1
    2e64:	a9 f0       	breq	.+42     	; 0x2e90 <DIO_VIDSetPortValue+0x6e>
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6a:	83 36       	cpi	r24, 0x63	; 99
    2e6c:	91 05       	cpc	r25, r1
    2e6e:	59 f0       	breq	.+22     	; 0x2e86 <DIO_VIDSetPortValue+0x64>
    2e70:	13 c0       	rjmp	.+38     	; 0x2e98 <DIO_VIDSetPortValue+0x76>
	case PORT_A:
		PORTA = cpy_u8PortValue;
    2e72:	eb e3       	ldi	r30, 0x3B	; 59
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	80 83       	st	Z, r24
    2e7a:	0e c0       	rjmp	.+28     	; 0x2e98 <DIO_VIDSetPortValue+0x76>
		break;
	case PORT_B:
		PORTB = cpy_u8PortValue;
    2e7c:	e8 e3       	ldi	r30, 0x38	; 56
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	80 83       	st	Z, r24
    2e84:	09 c0       	rjmp	.+18     	; 0x2e98 <DIO_VIDSetPortValue+0x76>
		break;
	case PORT_C:
		PORTC = cpy_u8PortValue;
    2e86:	e5 e3       	ldi	r30, 0x35	; 53
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	80 83       	st	Z, r24
    2e8e:	04 c0       	rjmp	.+8      	; 0x2e98 <DIO_VIDSetPortValue+0x76>
		break;
	case PORT_D:
		PORTD = cpy_u8PortValue;
    2e90:	e2 e3       	ldi	r30, 0x32	; 50
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	08 95       	ret

00002ea6 <DIO_VIDgetPortValue>:
void DIO_VIDgetPortValue(u8 cpy_u8PortNumber,u8* buf_u8PortValue){
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <DIO_VIDgetPortValue+0x6>
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <DIO_VIDgetPortValue+0x8>
    2eae:	0f 92       	push	r0
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	7b 83       	std	Y+3, r23	; 0x03
    2eb8:	6a 83       	std	Y+2, r22	; 0x02
	switch (cpy_u8PortNumber){
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	28 2f       	mov	r18, r24
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	3d 83       	std	Y+5, r19	; 0x05
    2ec2:	2c 83       	std	Y+4, r18	; 0x04
    2ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec8:	82 34       	cpi	r24, 0x42	; 66
    2eca:	91 05       	cpc	r25, r1
    2ecc:	e9 f0       	breq	.+58     	; 0x2f08 <DIO_VIDgetPortValue+0x62>
    2ece:	2c 81       	ldd	r18, Y+4	; 0x04
    2ed0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ed2:	23 34       	cpi	r18, 0x43	; 67
    2ed4:	31 05       	cpc	r19, r1
    2ed6:	34 f4       	brge	.+12     	; 0x2ee4 <DIO_VIDgetPortValue+0x3e>
    2ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eda:	9d 81       	ldd	r25, Y+5	; 0x05
    2edc:	81 34       	cpi	r24, 0x41	; 65
    2ede:	91 05       	cpc	r25, r1
    2ee0:	61 f0       	breq	.+24     	; 0x2efa <DIO_VIDgetPortValue+0x54>
    2ee2:	26 c0       	rjmp	.+76     	; 0x2f30 <DIO_VIDgetPortValue+0x8a>
    2ee4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ee6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ee8:	24 34       	cpi	r18, 0x44	; 68
    2eea:	31 05       	cpc	r19, r1
    2eec:	d9 f0       	breq	.+54     	; 0x2f24 <DIO_VIDgetPortValue+0x7e>
    2eee:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef2:	83 36       	cpi	r24, 0x63	; 99
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	79 f0       	breq	.+30     	; 0x2f16 <DIO_VIDgetPortValue+0x70>
    2ef8:	1b c0       	rjmp	.+54     	; 0x2f30 <DIO_VIDgetPortValue+0x8a>
	case PORT_A:
		*buf_u8PortValue = PINA;
    2efa:	e9 e3       	ldi	r30, 0x39	; 57
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	ea 81       	ldd	r30, Y+2	; 0x02
    2f02:	fb 81       	ldd	r31, Y+3	; 0x03
    2f04:	80 83       	st	Z, r24
    2f06:	14 c0       	rjmp	.+40     	; 0x2f30 <DIO_VIDgetPortValue+0x8a>
		break;
	case PORT_B:
		*buf_u8PortValue = PINB;
    2f08:	e6 e3       	ldi	r30, 0x36	; 54
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f10:	fb 81       	ldd	r31, Y+3	; 0x03
    2f12:	80 83       	st	Z, r24
    2f14:	0d c0       	rjmp	.+26     	; 0x2f30 <DIO_VIDgetPortValue+0x8a>
		break;
	case PORT_C:
		*buf_u8PortValue = PINC;
    2f16:	e3 e3       	ldi	r30, 0x33	; 51
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f1e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f20:	80 83       	st	Z, r24
    2f22:	06 c0       	rjmp	.+12     	; 0x2f30 <DIO_VIDgetPortValue+0x8a>
		break;
	case PORT_D:
		*buf_u8PortValue = PIND;
    2f24:	e0 e3       	ldi	r30, 0x30	; 48
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f2c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f2e:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	cf 91       	pop	r28
    2f3c:	df 91       	pop	r29
    2f3e:	08 95       	ret

00002f40 <MADC_vidInit>:
 */
#include "../../LIB/math/bitmask.h"
#include "../../LIB/math/datatypes.h"
#include "./adc.h"

void MADC_vidInit(u8 volt_reference,u8 pre_scaler){
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	00 d0       	rcall	.+0      	; 0x2f46 <MADC_vidInit+0x6>
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <MADC_vidInit+0x8>
    2f48:	00 d0       	rcall	.+0      	; 0x2f4a <MADC_vidInit+0xa>
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	89 83       	std	Y+1, r24	; 0x01
    2f50:	6a 83       	std	Y+2, r22	; 0x02
	//1-volt reference
	switch(volt_reference){
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	3e 83       	std	Y+6, r19	; 0x06
    2f5a:	2d 83       	std	Y+5, r18	; 0x05
    2f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f60:	81 30       	cpi	r24, 0x01	; 1
    2f62:	91 05       	cpc	r25, r1
    2f64:	c1 f0       	breq	.+48     	; 0x2f96 <MADC_vidInit+0x56>
    2f66:	2d 81       	ldd	r18, Y+5	; 0x05
    2f68:	3e 81       	ldd	r19, Y+6	; 0x06
    2f6a:	23 30       	cpi	r18, 0x03	; 3
    2f6c:	31 05       	cpc	r19, r1
    2f6e:	11 f1       	breq	.+68     	; 0x2fb4 <MADC_vidInit+0x74>
    2f70:	8d 81       	ldd	r24, Y+5	; 0x05
    2f72:	9e 81       	ldd	r25, Y+6	; 0x06
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	61 f5       	brne	.+88     	; 0x2fd0 <MADC_vidInit+0x90>
	case AREF :
		clearBit(ADMUX,ADMUX_REFS0);
    2f78:	a7 e2       	ldi	r26, 0x27	; 39
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e7 e2       	ldi	r30, 0x27	; 39
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	8f 7b       	andi	r24, 0xBF	; 191
    2f84:	8c 93       	st	X, r24
		clearBit(ADMUX,ADMUX_REFS1);
    2f86:	a7 e2       	ldi	r26, 0x27	; 39
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e7 e2       	ldi	r30, 0x27	; 39
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	8f 77       	andi	r24, 0x7F	; 127
    2f92:	8c 93       	st	X, r24
    2f94:	1d c0       	rjmp	.+58     	; 0x2fd0 <MADC_vidInit+0x90>
		break;
	case AVCC :
		setBit(ADMUX,ADMUX_REFS0);
    2f96:	a7 e2       	ldi	r26, 0x27	; 39
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	e7 e2       	ldi	r30, 0x27	; 39
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	80 64       	ori	r24, 0x40	; 64
    2fa2:	8c 93       	st	X, r24
		clearBit(ADMUX,ADMUX_REFS1);
    2fa4:	a7 e2       	ldi	r26, 0x27	; 39
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	e7 e2       	ldi	r30, 0x27	; 39
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	8f 77       	andi	r24, 0x7F	; 127
    2fb0:	8c 93       	st	X, r24
    2fb2:	0e c0       	rjmp	.+28     	; 0x2fd0 <MADC_vidInit+0x90>
		break;
	case INTERNAL :
		setBit(ADMUX,ADMUX_REFS0);
    2fb4:	a7 e2       	ldi	r26, 0x27	; 39
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e7 e2       	ldi	r30, 0x27	; 39
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	80 64       	ori	r24, 0x40	; 64
    2fc0:	8c 93       	st	X, r24
		setBit(ADMUX,ADMUX_REFS1);
    2fc2:	a7 e2       	ldi	r26, 0x27	; 39
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	e7 e2       	ldi	r30, 0x27	; 39
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	80 68       	ori	r24, 0x80	; 128
    2fce:	8c 93       	st	X, r24
		break;
	default :
		break;
	}
	//2.data direction
	clearBit(ADMUX,ADMUX_ADLAR);
    2fd0:	a7 e2       	ldi	r26, 0x27	; 39
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	e7 e2       	ldi	r30, 0x27	; 39
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	8f 7d       	andi	r24, 0xDF	; 223
    2fdc:	8c 93       	st	X, r24
	//3.set pre-scaller
	switch(pre_scaler){
    2fde:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	3c 83       	std	Y+4, r19	; 0x04
    2fe6:	2b 83       	std	Y+3, r18	; 0x03
    2fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fea:	9c 81       	ldd	r25, Y+4	; 0x04
    2fec:	80 31       	cpi	r24, 0x10	; 16
    2fee:	91 05       	cpc	r25, r1
    2ff0:	09 f4       	brne	.+2      	; 0x2ff4 <MADC_vidInit+0xb4>
    2ff2:	6b c0       	rjmp	.+214    	; 0x30ca <MADC_vidInit+0x18a>
    2ff4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ff6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ff8:	21 31       	cpi	r18, 0x11	; 17
    2ffa:	31 05       	cpc	r19, r1
    2ffc:	8c f4       	brge	.+34     	; 0x3020 <MADC_vidInit+0xe0>
    2ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    3000:	9c 81       	ldd	r25, Y+4	; 0x04
    3002:	84 30       	cpi	r24, 0x04	; 4
    3004:	91 05       	cpc	r25, r1
    3006:	a9 f1       	breq	.+106    	; 0x3072 <MADC_vidInit+0x132>
    3008:	2b 81       	ldd	r18, Y+3	; 0x03
    300a:	3c 81       	ldd	r19, Y+4	; 0x04
    300c:	28 30       	cpi	r18, 0x08	; 8
    300e:	31 05       	cpc	r19, r1
    3010:	09 f4       	brne	.+2      	; 0x3014 <MADC_vidInit+0xd4>
    3012:	45 c0       	rjmp	.+138    	; 0x309e <MADC_vidInit+0x15e>
    3014:	8b 81       	ldd	r24, Y+3	; 0x03
    3016:	9c 81       	ldd	r25, Y+4	; 0x04
    3018:	82 30       	cpi	r24, 0x02	; 2
    301a:	91 05       	cpc	r25, r1
    301c:	a1 f0       	breq	.+40     	; 0x3046 <MADC_vidInit+0x106>
    301e:	ac c0       	rjmp	.+344    	; 0x3178 <MADC_vidInit+0x238>
    3020:	2b 81       	ldd	r18, Y+3	; 0x03
    3022:	3c 81       	ldd	r19, Y+4	; 0x04
    3024:	20 34       	cpi	r18, 0x40	; 64
    3026:	31 05       	cpc	r19, r1
    3028:	09 f4       	brne	.+2      	; 0x302c <MADC_vidInit+0xec>
    302a:	7b c0       	rjmp	.+246    	; 0x3122 <MADC_vidInit+0x1e2>
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	9c 81       	ldd	r25, Y+4	; 0x04
    3030:	80 38       	cpi	r24, 0x80	; 128
    3032:	91 05       	cpc	r25, r1
    3034:	09 f4       	brne	.+2      	; 0x3038 <MADC_vidInit+0xf8>
    3036:	8b c0       	rjmp	.+278    	; 0x314e <MADC_vidInit+0x20e>
    3038:	2b 81       	ldd	r18, Y+3	; 0x03
    303a:	3c 81       	ldd	r19, Y+4	; 0x04
    303c:	20 32       	cpi	r18, 0x20	; 32
    303e:	31 05       	cpc	r19, r1
    3040:	09 f4       	brne	.+2      	; 0x3044 <MADC_vidInit+0x104>
    3042:	59 c0       	rjmp	.+178    	; 0x30f6 <MADC_vidInit+0x1b6>
    3044:	99 c0       	rjmp	.+306    	; 0x3178 <MADC_vidInit+0x238>
		case PRE_SCALER_1 :
			clearBit(ADCSRA,ADCSRA_ADPS0);
    3046:	a6 e2       	ldi	r26, 0x26	; 38
    3048:	b0 e0       	ldi	r27, 0x00	; 0
    304a:	e6 e2       	ldi	r30, 0x26	; 38
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	80 81       	ld	r24, Z
    3050:	8e 7f       	andi	r24, 0xFE	; 254
    3052:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS1);
    3054:	a6 e2       	ldi	r26, 0x26	; 38
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	e6 e2       	ldi	r30, 0x26	; 38
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	8d 7f       	andi	r24, 0xFD	; 253
    3060:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS2);
    3062:	a6 e2       	ldi	r26, 0x26	; 38
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	e6 e2       	ldi	r30, 0x26	; 38
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	8b 7f       	andi	r24, 0xFB	; 251
    306e:	8c 93       	st	X, r24
    3070:	83 c0       	rjmp	.+262    	; 0x3178 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_2:
			clearBit(ADCSRA,ADCSRA_ADPS0);
    3072:	a6 e2       	ldi	r26, 0x26	; 38
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	e6 e2       	ldi	r30, 0x26	; 38
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	8e 7f       	andi	r24, 0xFE	; 254
    307e:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS1);
    3080:	a6 e2       	ldi	r26, 0x26	; 38
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	e6 e2       	ldi	r30, 0x26	; 38
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	82 60       	ori	r24, 0x02	; 2
    308c:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS2);
    308e:	a6 e2       	ldi	r26, 0x26	; 38
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	e6 e2       	ldi	r30, 0x26	; 38
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	8b 7f       	andi	r24, 0xFB	; 251
    309a:	8c 93       	st	X, r24
    309c:	6d c0       	rjmp	.+218    	; 0x3178 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_3:
			setBit(ADCSRA,ADCSRA_ADPS0);
    309e:	a6 e2       	ldi	r26, 0x26	; 38
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	e6 e2       	ldi	r30, 0x26	; 38
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	81 60       	ori	r24, 0x01	; 1
    30aa:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS1);
    30ac:	a6 e2       	ldi	r26, 0x26	; 38
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	e6 e2       	ldi	r30, 0x26	; 38
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	82 60       	ori	r24, 0x02	; 2
    30b8:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS2);
    30ba:	a6 e2       	ldi	r26, 0x26	; 38
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e6 e2       	ldi	r30, 0x26	; 38
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	8b 7f       	andi	r24, 0xFB	; 251
    30c6:	8c 93       	st	X, r24
    30c8:	57 c0       	rjmp	.+174    	; 0x3178 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_4:
			clearBit(ADCSRA,ADCSRA_ADPS0);
    30ca:	a6 e2       	ldi	r26, 0x26	; 38
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	e6 e2       	ldi	r30, 0x26	; 38
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	8e 7f       	andi	r24, 0xFE	; 254
    30d6:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS1);
    30d8:	a6 e2       	ldi	r26, 0x26	; 38
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e6 e2       	ldi	r30, 0x26	; 38
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	8d 7f       	andi	r24, 0xFD	; 253
    30e4:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS2);
    30e6:	a6 e2       	ldi	r26, 0x26	; 38
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	e6 e2       	ldi	r30, 0x26	; 38
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	84 60       	ori	r24, 0x04	; 4
    30f2:	8c 93       	st	X, r24
    30f4:	41 c0       	rjmp	.+130    	; 0x3178 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_5:
			setBit(ADCSRA,ADCSRA_ADPS0);
    30f6:	a6 e2       	ldi	r26, 0x26	; 38
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	e6 e2       	ldi	r30, 0x26	; 38
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	81 60       	ori	r24, 0x01	; 1
    3102:	8c 93       	st	X, r24
			clearBit(ADCSRA,ADCSRA_ADPS1);
    3104:	a6 e2       	ldi	r26, 0x26	; 38
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e6 e2       	ldi	r30, 0x26	; 38
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	8d 7f       	andi	r24, 0xFD	; 253
    3110:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS2);
    3112:	a6 e2       	ldi	r26, 0x26	; 38
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	e6 e2       	ldi	r30, 0x26	; 38
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	84 60       	ori	r24, 0x04	; 4
    311e:	8c 93       	st	X, r24
    3120:	2b c0       	rjmp	.+86     	; 0x3178 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_6:
			clearBit(ADCSRA,ADCSRA_ADPS0);
    3122:	a6 e2       	ldi	r26, 0x26	; 38
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	e6 e2       	ldi	r30, 0x26	; 38
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	8e 7f       	andi	r24, 0xFE	; 254
    312e:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS1);
    3130:	a6 e2       	ldi	r26, 0x26	; 38
    3132:	b0 e0       	ldi	r27, 0x00	; 0
    3134:	e6 e2       	ldi	r30, 0x26	; 38
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	82 60       	ori	r24, 0x02	; 2
    313c:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS2);
    313e:	a6 e2       	ldi	r26, 0x26	; 38
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e6 e2       	ldi	r30, 0x26	; 38
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	80 81       	ld	r24, Z
    3148:	84 60       	ori	r24, 0x04	; 4
    314a:	8c 93       	st	X, r24
    314c:	15 c0       	rjmp	.+42     	; 0x3178 <MADC_vidInit+0x238>
			break;
		case PRE_SCALER_7:
			setBit(ADCSRA,ADCSRA_ADPS0);
    314e:	a6 e2       	ldi	r26, 0x26	; 38
    3150:	b0 e0       	ldi	r27, 0x00	; 0
    3152:	e6 e2       	ldi	r30, 0x26	; 38
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 81       	ld	r24, Z
    3158:	81 60       	ori	r24, 0x01	; 1
    315a:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS1);
    315c:	a6 e2       	ldi	r26, 0x26	; 38
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	e6 e2       	ldi	r30, 0x26	; 38
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	82 60       	ori	r24, 0x02	; 2
    3168:	8c 93       	st	X, r24
			setBit(ADCSRA,ADCSRA_ADPS2);
    316a:	a6 e2       	ldi	r26, 0x26	; 38
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	e6 e2       	ldi	r30, 0x26	; 38
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	84 60       	ori	r24, 0x04	; 4
    3176:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
	//enable
	setBit(ADCSRA,ADCSRA_ADEN);
    3178:	a6 e2       	ldi	r26, 0x26	; 38
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	e6 e2       	ldi	r30, 0x26	; 38
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	80 68       	ori	r24, 0x80	; 128
    3184:	8c 93       	st	X, r24
}
    3186:	26 96       	adiw	r28, 0x06	; 6
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <MADC_u16Read>:
u16 MADC_u16Read(u8 channel){
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	00 d0       	rcall	.+0      	; 0x319e <MADC_u16Read+0x6>
    319e:	0f 92       	push	r0
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	89 83       	std	Y+1, r24	; 0x01

	//select Channel
	ADMUX&=0xD0;
    31a6:	a7 e2       	ldi	r26, 0x27	; 39
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	e7 e2       	ldi	r30, 0x27	; 39
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	80 7d       	andi	r24, 0xD0	; 208
    31b2:	8c 93       	st	X, r24
	ADMUX = ADMUX|channel;
    31b4:	a7 e2       	ldi	r26, 0x27	; 39
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e7 e2       	ldi	r30, 0x27	; 39
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	90 81       	ld	r25, Z
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	89 2b       	or	r24, r25
    31c2:	8c 93       	st	X, r24
	//start conversion
	setBit(ADCSRA,ADCSRA_ADSC);
    31c4:	a6 e2       	ldi	r26, 0x26	; 38
    31c6:	b0 e0       	ldi	r27, 0x00	; 0
    31c8:	e6 e2       	ldi	r30, 0x26	; 38
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	80 81       	ld	r24, Z
    31ce:	80 64       	ori	r24, 0x40	; 64
    31d0:	8c 93       	st	X, r24
	//wait
	while(!getBit(ADCSRA,ADCSRA_ADIF)){}
    31d2:	e6 e2       	ldi	r30, 0x26	; 38
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	82 95       	swap	r24
    31da:	8f 70       	andi	r24, 0x0F	; 15
    31dc:	88 2f       	mov	r24, r24
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	81 70       	andi	r24, 0x01	; 1
    31e2:	90 70       	andi	r25, 0x00	; 0
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	a9 f3       	breq	.-22     	; 0x31d2 <MADC_u16Read+0x3a>
	//clear flag
	setBit(ADCSRA,ADCSRA_ADIF);
    31e8:	a6 e2       	ldi	r26, 0x26	; 38
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	e6 e2       	ldi	r30, 0x26	; 38
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	80 61       	ori	r24, 0x10	; 16
    31f4:	8c 93       	st	X, r24
	return getBit(ADMUX,ADMUX_ADLAR)? ADCL>>6|ADCH<<2 :ADCL|ADCH<<8;
    31f6:	e7 e2       	ldi	r30, 0x27	; 39
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	82 95       	swap	r24
    31fe:	86 95       	lsr	r24
    3200:	87 70       	andi	r24, 0x07	; 7
    3202:	88 2f       	mov	r24, r24
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	81 70       	andi	r24, 0x01	; 1
    3208:	90 70       	andi	r25, 0x00	; 0
    320a:	88 23       	and	r24, r24
    320c:	c1 f0       	breq	.+48     	; 0x323e <MADC_u16Read+0xa6>
    320e:	e4 e2       	ldi	r30, 0x24	; 36
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	82 95       	swap	r24
    3216:	86 95       	lsr	r24
    3218:	86 95       	lsr	r24
    321a:	83 70       	andi	r24, 0x03	; 3
    321c:	28 2f       	mov	r18, r24
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	e5 e2       	ldi	r30, 0x25	; 37
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	80 81       	ld	r24, Z
    3226:	88 2f       	mov	r24, r24
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	88 0f       	add	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	88 0f       	add	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	a9 01       	movw	r20, r18
    3234:	48 2b       	or	r20, r24
    3236:	59 2b       	or	r21, r25
    3238:	5b 83       	std	Y+3, r21	; 0x03
    323a:	4a 83       	std	Y+2, r20	; 0x02
    323c:	11 c0       	rjmp	.+34     	; 0x3260 <MADC_u16Read+0xc8>
    323e:	e4 e2       	ldi	r30, 0x24	; 36
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	e5 e2       	ldi	r30, 0x25	; 37
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	80 81       	ld	r24, Z
    324e:	88 2f       	mov	r24, r24
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	98 2f       	mov	r25, r24
    3254:	88 27       	eor	r24, r24
    3256:	a9 01       	movw	r20, r18
    3258:	48 2b       	or	r20, r24
    325a:	59 2b       	or	r21, r25
    325c:	5b 83       	std	Y+3, r21	; 0x03
    325e:	4a 83       	std	Y+2, r20	; 0x02
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	08 95       	ret

00003270 <MADC_f32getVolt>:
f32 MADC_f32getVolt(u8 channel){
    3270:	df 93       	push	r29
    3272:	cf 93       	push	r28
    3274:	00 d0       	rcall	.+0      	; 0x3276 <MADC_f32getVolt+0x6>
    3276:	00 d0       	rcall	.+0      	; 0x3278 <MADC_f32getVolt+0x8>
    3278:	0f 92       	push	r0
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	8d 83       	std	Y+5, r24	; 0x05
	f32 volt = (MADC_u16Read(channel)*5.0000)/(1024);
    3280:	8d 81       	ldd	r24, Y+5	; 0x05
    3282:	0e 94 cc 18 	call	0x3198	; 0x3198 <MADC_u16Read>
    3286:	cc 01       	movw	r24, r24
    3288:	a0 e0       	ldi	r26, 0x00	; 0
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	bc 01       	movw	r22, r24
    328e:	cd 01       	movw	r24, r26
    3290:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	bc 01       	movw	r22, r24
    329a:	cd 01       	movw	r24, r26
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	40 ea       	ldi	r20, 0xA0	; 160
    32a2:	50 e4       	ldi	r21, 0x40	; 64
    32a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	bc 01       	movw	r22, r24
    32ae:	cd 01       	movw	r24, r26
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e8       	ldi	r20, 0x80	; 128
    32b6:	54 e4       	ldi	r21, 0x44	; 68
    32b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	89 83       	std	Y+1, r24	; 0x01
    32c2:	9a 83       	std	Y+2, r25	; 0x02
    32c4:	ab 83       	std	Y+3, r26	; 0x03
    32c6:	bc 83       	std	Y+4, r27	; 0x04
	return volt;
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	9a 81       	ldd	r25, Y+2	; 0x02
    32cc:	ab 81       	ldd	r26, Y+3	; 0x03
    32ce:	bc 81       	ldd	r27, Y+4	; 0x04
}
    32d0:	bc 01       	movw	r22, r24
    32d2:	cd 01       	movw	r24, r26
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	cf 91       	pop	r28
    32e0:	df 91       	pop	r29
    32e2:	08 95       	ret

000032e4 <MADC_u8getTemprature>:
u8 MADC_u8getTemprature(u8 channel){
    32e4:	df 93       	push	r29
    32e6:	cf 93       	push	r28
    32e8:	0f 92       	push	r0
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	89 83       	std	Y+1, r24	; 0x01
	return MADC_f32getVolt(channel)*100;
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	0e 94 38 19 	call	0x3270	; 0x3270 <MADC_f32getVolt>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	bc 01       	movw	r22, r24
    32fc:	cd 01       	movw	r24, r26
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	48 ec       	ldi	r20, 0xC8	; 200
    3304:	52 e4       	ldi	r21, 0x42	; 66
    3306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
}
    331a:	0f 90       	pop	r0
    331c:	cf 91       	pop	r28
    331e:	df 91       	pop	r29
    3320:	08 95       	ret

00003322 <util_u8StringCompare>:
 *  Created on: ٠٩‏/٠٩‏/٢٠٢٣
 *      Author: ASHRY
 */
#include "../../LIB/math/datatypes.h"
#include "util.h"
u8 util_u8StringCompare(u8 string1[] , u8 string2[]){
    3322:	df 93       	push	r29
    3324:	cf 93       	push	r28
    3326:	00 d0       	rcall	.+0      	; 0x3328 <util_u8StringCompare+0x6>
    3328:	00 d0       	rcall	.+0      	; 0x332a <util_u8StringCompare+0x8>
    332a:	00 d0       	rcall	.+0      	; 0x332c <util_u8StringCompare+0xa>
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	9b 83       	std	Y+3, r25	; 0x03
    3332:	8a 83       	std	Y+2, r24	; 0x02
    3334:	7d 83       	std	Y+5, r23	; 0x05
    3336:	6c 83       	std	Y+4, r22	; 0x04
	u8 counter = 0;
    3338:	19 82       	std	Y+1, r1	; 0x01
    333a:	19 c0       	rjmp	.+50     	; 0x336e <util_u8StringCompare+0x4c>
	while(string1[counter] == string2[counter]){
		if(string1[counter]=='\0' || string2[counter]=='\0'){
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	28 2f       	mov	r18, r24
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	8a 81       	ldd	r24, Y+2	; 0x02
    3344:	9b 81       	ldd	r25, Y+3	; 0x03
    3346:	fc 01       	movw	r30, r24
    3348:	e2 0f       	add	r30, r18
    334a:	f3 1f       	adc	r31, r19
    334c:	80 81       	ld	r24, Z
    334e:	88 23       	and	r24, r24
    3350:	11 f1       	breq	.+68     	; 0x3396 <util_u8StringCompare+0x74>
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	28 2f       	mov	r18, r24
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	8c 81       	ldd	r24, Y+4	; 0x04
    335a:	9d 81       	ldd	r25, Y+5	; 0x05
    335c:	fc 01       	movw	r30, r24
    335e:	e2 0f       	add	r30, r18
    3360:	f3 1f       	adc	r31, r19
    3362:	80 81       	ld	r24, Z
    3364:	88 23       	and	r24, r24
    3366:	b9 f0       	breq	.+46     	; 0x3396 <util_u8StringCompare+0x74>
			break;
		}
		counter++;
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	8f 5f       	subi	r24, 0xFF	; 255
    336c:	89 83       	std	Y+1, r24	; 0x01
 */
#include "../../LIB/math/datatypes.h"
#include "util.h"
u8 util_u8StringCompare(u8 string1[] , u8 string2[]){
	u8 counter = 0;
	while(string1[counter] == string2[counter]){
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	28 2f       	mov	r18, r24
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	9b 81       	ldd	r25, Y+3	; 0x03
    3378:	fc 01       	movw	r30, r24
    337a:	e2 0f       	add	r30, r18
    337c:	f3 1f       	adc	r31, r19
    337e:	40 81       	ld	r20, Z
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	28 2f       	mov	r18, r24
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	8c 81       	ldd	r24, Y+4	; 0x04
    3388:	9d 81       	ldd	r25, Y+5	; 0x05
    338a:	fc 01       	movw	r30, r24
    338c:	e2 0f       	add	r30, r18
    338e:	f3 1f       	adc	r31, r19
    3390:	80 81       	ld	r24, Z
    3392:	48 17       	cp	r20, r24
    3394:	99 f2       	breq	.-90     	; 0x333c <util_u8StringCompare+0x1a>
		if(string1[counter]=='\0' || string2[counter]=='\0'){
			break;
		}
		counter++;
	}
	if(string1[counter]=='\0' && string2[counter]=='\0'){
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	28 2f       	mov	r18, r24
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	9b 81       	ldd	r25, Y+3	; 0x03
    33a0:	fc 01       	movw	r30, r24
    33a2:	e2 0f       	add	r30, r18
    33a4:	f3 1f       	adc	r31, r19
    33a6:	80 81       	ld	r24, Z
    33a8:	88 23       	and	r24, r24
    33aa:	71 f4       	brne	.+28     	; 0x33c8 <util_u8StringCompare+0xa6>
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
    33ae:	28 2f       	mov	r18, r24
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	8c 81       	ldd	r24, Y+4	; 0x04
    33b4:	9d 81       	ldd	r25, Y+5	; 0x05
    33b6:	fc 01       	movw	r30, r24
    33b8:	e2 0f       	add	r30, r18
    33ba:	f3 1f       	adc	r31, r19
    33bc:	80 81       	ld	r24, Z
    33be:	88 23       	and	r24, r24
    33c0:	19 f4       	brne	.+6      	; 0x33c8 <util_u8StringCompare+0xa6>
		return 1;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	8e 83       	std	Y+6, r24	; 0x06
    33c6:	01 c0       	rjmp	.+2      	; 0x33ca <util_u8StringCompare+0xa8>
	}else{
		return 0;
    33c8:	1e 82       	std	Y+6, r1	; 0x06
    33ca:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
    33cc:	26 96       	adiw	r28, 0x06	; 6
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	08 95       	ret

000033de <reverseNumber>:
 *  Created on: ٢٢‏/٠٨‏/٢٠٢٣
 *      Author: ASHRY
 */
#include "../datatypes.h"
#include "operations.h"
void reverseNumber(s32 value,u32 digitsWithZeros , s32*buffer){
    33de:	ef 92       	push	r14
    33e0:	ff 92       	push	r15
    33e2:	0f 93       	push	r16
    33e4:	1f 93       	push	r17
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
    33ee:	6a 97       	sbiw	r28, 0x1a	; 26
    33f0:	0f b6       	in	r0, 0x3f	; 63
    33f2:	f8 94       	cli
    33f4:	de bf       	out	0x3e, r29	; 62
    33f6:	0f be       	out	0x3f, r0	; 63
    33f8:	cd bf       	out	0x3d, r28	; 61
    33fa:	69 8b       	std	Y+17, r22	; 0x11
    33fc:	7a 8b       	std	Y+18, r23	; 0x12
    33fe:	8b 8b       	std	Y+19, r24	; 0x13
    3400:	9c 8b       	std	Y+20, r25	; 0x14
    3402:	2d 8b       	std	Y+21, r18	; 0x15
    3404:	3e 8b       	std	Y+22, r19	; 0x16
    3406:	4f 8b       	std	Y+23, r20	; 0x17
    3408:	58 8f       	std	Y+24, r21	; 0x18
    340a:	1a 8f       	std	Y+26, r17	; 0x1a
    340c:	09 8f       	std	Y+25, r16	; 0x19
	s32 cpy_value= value;
    340e:	89 89       	ldd	r24, Y+17	; 0x11
    3410:	9a 89       	ldd	r25, Y+18	; 0x12
    3412:	ab 89       	ldd	r26, Y+19	; 0x13
    3414:	bc 89       	ldd	r27, Y+20	; 0x14
    3416:	8d 87       	std	Y+13, r24	; 0x0d
    3418:	9e 87       	std	Y+14, r25	; 0x0e
    341a:	af 87       	std	Y+15, r26	; 0x0f
    341c:	b8 8b       	std	Y+16, r27	; 0x10
	u32 digitCounter= 1 ;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	a0 e0       	ldi	r26, 0x00	; 0
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	89 87       	std	Y+9, r24	; 0x09
    3428:	9a 87       	std	Y+10, r25	; 0x0a
    342a:	ab 87       	std	Y+11, r26	; 0x0b
    342c:	bc 87       	std	Y+12, r27	; 0x0c
    342e:	24 c0       	rjmp	.+72     	; 0x3478 <reverseNumber+0x9a>
	while(value){
		value/=10;
    3430:	89 89       	ldd	r24, Y+17	; 0x11
    3432:	9a 89       	ldd	r25, Y+18	; 0x12
    3434:	ab 89       	ldd	r26, Y+19	; 0x13
    3436:	bc 89       	ldd	r27, Y+20	; 0x14
    3438:	2a e0       	ldi	r18, 0x0A	; 10
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	40 e0       	ldi	r20, 0x00	; 0
    343e:	50 e0       	ldi	r21, 0x00	; 0
    3440:	bc 01       	movw	r22, r24
    3442:	cd 01       	movw	r24, r26
    3444:	0e 94 cf 24 	call	0x499e	; 0x499e <__divmodsi4>
    3448:	da 01       	movw	r26, r20
    344a:	c9 01       	movw	r24, r18
    344c:	89 8b       	std	Y+17, r24	; 0x11
    344e:	9a 8b       	std	Y+18, r25	; 0x12
    3450:	ab 8b       	std	Y+19, r26	; 0x13
    3452:	bc 8b       	std	Y+20, r27	; 0x14
		digitCounter*=10;
    3454:	89 85       	ldd	r24, Y+9	; 0x09
    3456:	9a 85       	ldd	r25, Y+10	; 0x0a
    3458:	ab 85       	ldd	r26, Y+11	; 0x0b
    345a:	bc 85       	ldd	r27, Y+12	; 0x0c
    345c:	2a e0       	ldi	r18, 0x0A	; 10
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	40 e0       	ldi	r20, 0x00	; 0
    3462:	50 e0       	ldi	r21, 0x00	; 0
    3464:	bc 01       	movw	r22, r24
    3466:	cd 01       	movw	r24, r26
    3468:	0e 94 82 24 	call	0x4904	; 0x4904 <__mulsi3>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	89 87       	std	Y+9, r24	; 0x09
    3472:	9a 87       	std	Y+10, r25	; 0x0a
    3474:	ab 87       	std	Y+11, r26	; 0x0b
    3476:	bc 87       	std	Y+12, r27	; 0x0c
#include "../datatypes.h"
#include "operations.h"
void reverseNumber(s32 value,u32 digitsWithZeros , s32*buffer){
	s32 cpy_value= value;
	u32 digitCounter= 1 ;
	while(value){
    3478:	89 89       	ldd	r24, Y+17	; 0x11
    347a:	9a 89       	ldd	r25, Y+18	; 0x12
    347c:	ab 89       	ldd	r26, Y+19	; 0x13
    347e:	bc 89       	ldd	r27, Y+20	; 0x14
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	a1 05       	cpc	r26, r1
    3484:	b1 05       	cpc	r27, r1
    3486:	a1 f6       	brne	.-88     	; 0x3430 <reverseNumber+0x52>
		value/=10;
		digitCounter*=10;
	}
	u32 digitDifference =digitsWithZeros/digitCounter;
    3488:	8d 89       	ldd	r24, Y+21	; 0x15
    348a:	9e 89       	ldd	r25, Y+22	; 0x16
    348c:	af 89       	ldd	r26, Y+23	; 0x17
    348e:	b8 8d       	ldd	r27, Y+24	; 0x18
    3490:	29 85       	ldd	r18, Y+9	; 0x09
    3492:	3a 85       	ldd	r19, Y+10	; 0x0a
    3494:	4b 85       	ldd	r20, Y+11	; 0x0b
    3496:	5c 85       	ldd	r21, Y+12	; 0x0c
    3498:	bc 01       	movw	r22, r24
    349a:	cd 01       	movw	r24, r26
    349c:	0e 94 ad 24 	call	0x495a	; 0x495a <__udivmodsi4>
    34a0:	da 01       	movw	r26, r20
    34a2:	c9 01       	movw	r24, r18
    34a4:	8d 83       	std	Y+5, r24	; 0x05
    34a6:	9e 83       	std	Y+6, r25	; 0x06
    34a8:	af 83       	std	Y+7, r26	; 0x07
    34aa:	b8 87       	std	Y+8, r27	; 0x08
	for(u32 i= 1;digitCounter>1;i*=10){
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	a0 e0       	ldi	r26, 0x00	; 0
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	89 83       	std	Y+1, r24	; 0x01
    34b6:	9a 83       	std	Y+2, r25	; 0x02
    34b8:	ab 83       	std	Y+3, r26	; 0x03
    34ba:	bc 83       	std	Y+4, r27	; 0x04
    34bc:	60 c0       	rjmp	.+192    	; 0x357e <reverseNumber+0x1a0>
		digitCounter/=10;
    34be:	89 85       	ldd	r24, Y+9	; 0x09
    34c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c2:	ab 85       	ldd	r26, Y+11	; 0x0b
    34c4:	bc 85       	ldd	r27, Y+12	; 0x0c
    34c6:	2a e0       	ldi	r18, 0x0A	; 10
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 e0       	ldi	r20, 0x00	; 0
    34cc:	50 e0       	ldi	r21, 0x00	; 0
    34ce:	bc 01       	movw	r22, r24
    34d0:	cd 01       	movw	r24, r26
    34d2:	0e 94 ad 24 	call	0x495a	; 0x495a <__udivmodsi4>
    34d6:	da 01       	movw	r26, r20
    34d8:	c9 01       	movw	r24, r18
    34da:	89 87       	std	Y+9, r24	; 0x09
    34dc:	9a 87       	std	Y+10, r25	; 0x0a
    34de:	ab 87       	std	Y+11, r26	; 0x0b
    34e0:	bc 87       	std	Y+12, r27	; 0x0c
		*(buffer)+= ((cpy_value/digitCounter)*i);
    34e2:	e9 8d       	ldd	r30, Y+25	; 0x19
    34e4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    34e6:	80 81       	ld	r24, Z
    34e8:	91 81       	ldd	r25, Z+1	; 0x01
    34ea:	a2 81       	ldd	r26, Z+2	; 0x02
    34ec:	b3 81       	ldd	r27, Z+3	; 0x03
    34ee:	7c 01       	movw	r14, r24
    34f0:	8d 01       	movw	r16, r26
    34f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f6:	af 85       	ldd	r26, Y+15	; 0x0f
    34f8:	b8 89       	ldd	r27, Y+16	; 0x10
    34fa:	29 85       	ldd	r18, Y+9	; 0x09
    34fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    34fe:	4b 85       	ldd	r20, Y+11	; 0x0b
    3500:	5c 85       	ldd	r21, Y+12	; 0x0c
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	0e 94 ad 24 	call	0x495a	; 0x495a <__udivmodsi4>
    350a:	da 01       	movw	r26, r20
    350c:	c9 01       	movw	r24, r18
    350e:	29 81       	ldd	r18, Y+1	; 0x01
    3510:	3a 81       	ldd	r19, Y+2	; 0x02
    3512:	4b 81       	ldd	r20, Y+3	; 0x03
    3514:	5c 81       	ldd	r21, Y+4	; 0x04
    3516:	bc 01       	movw	r22, r24
    3518:	cd 01       	movw	r24, r26
    351a:	0e 94 82 24 	call	0x4904	; 0x4904 <__mulsi3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	8e 0d       	add	r24, r14
    3524:	9f 1d       	adc	r25, r15
    3526:	a0 1f       	adc	r26, r16
    3528:	b1 1f       	adc	r27, r17
    352a:	e9 8d       	ldd	r30, Y+25	; 0x19
    352c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    352e:	80 83       	st	Z, r24
    3530:	91 83       	std	Z+1, r25	; 0x01
    3532:	a2 83       	std	Z+2, r26	; 0x02
    3534:	b3 83       	std	Z+3, r27	; 0x03
		cpy_value%= digitCounter;
    3536:	8d 85       	ldd	r24, Y+13	; 0x0d
    3538:	9e 85       	ldd	r25, Y+14	; 0x0e
    353a:	af 85       	ldd	r26, Y+15	; 0x0f
    353c:	b8 89       	ldd	r27, Y+16	; 0x10
    353e:	29 85       	ldd	r18, Y+9	; 0x09
    3540:	3a 85       	ldd	r19, Y+10	; 0x0a
    3542:	4b 85       	ldd	r20, Y+11	; 0x0b
    3544:	5c 85       	ldd	r21, Y+12	; 0x0c
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	0e 94 ad 24 	call	0x495a	; 0x495a <__udivmodsi4>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	8d 87       	std	Y+13, r24	; 0x0d
    3554:	9e 87       	std	Y+14, r25	; 0x0e
    3556:	af 87       	std	Y+15, r26	; 0x0f
    3558:	b8 8b       	std	Y+16, r27	; 0x10
	while(value){
		value/=10;
		digitCounter*=10;
	}
	u32 digitDifference =digitsWithZeros/digitCounter;
	for(u32 i= 1;digitCounter>1;i*=10){
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	9a 81       	ldd	r25, Y+2	; 0x02
    355e:	ab 81       	ldd	r26, Y+3	; 0x03
    3560:	bc 81       	ldd	r27, Y+4	; 0x04
    3562:	2a e0       	ldi	r18, 0x0A	; 10
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e0       	ldi	r20, 0x00	; 0
    3568:	50 e0       	ldi	r21, 0x00	; 0
    356a:	bc 01       	movw	r22, r24
    356c:	cd 01       	movw	r24, r26
    356e:	0e 94 82 24 	call	0x4904	; 0x4904 <__mulsi3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	89 83       	std	Y+1, r24	; 0x01
    3578:	9a 83       	std	Y+2, r25	; 0x02
    357a:	ab 83       	std	Y+3, r26	; 0x03
    357c:	bc 83       	std	Y+4, r27	; 0x04
    357e:	89 85       	ldd	r24, Y+9	; 0x09
    3580:	9a 85       	ldd	r25, Y+10	; 0x0a
    3582:	ab 85       	ldd	r26, Y+11	; 0x0b
    3584:	bc 85       	ldd	r27, Y+12	; 0x0c
    3586:	82 30       	cpi	r24, 0x02	; 2
    3588:	91 05       	cpc	r25, r1
    358a:	a1 05       	cpc	r26, r1
    358c:	b1 05       	cpc	r27, r1
    358e:	08 f0       	brcs	.+2      	; 0x3592 <reverseNumber+0x1b4>
    3590:	96 cf       	rjmp	.-212    	; 0x34be <reverseNumber+0xe0>
		digitCounter/=10;
		*(buffer)+= ((cpy_value/digitCounter)*i);
		cpy_value%= digitCounter;
	}
	*(buffer)*=digitDifference;
    3592:	e9 8d       	ldd	r30, Y+25	; 0x19
    3594:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3596:	80 81       	ld	r24, Z
    3598:	91 81       	ldd	r25, Z+1	; 0x01
    359a:	a2 81       	ldd	r26, Z+2	; 0x02
    359c:	b3 81       	ldd	r27, Z+3	; 0x03
    359e:	2d 81       	ldd	r18, Y+5	; 0x05
    35a0:	3e 81       	ldd	r19, Y+6	; 0x06
    35a2:	4f 81       	ldd	r20, Y+7	; 0x07
    35a4:	58 85       	ldd	r21, Y+8	; 0x08
    35a6:	bc 01       	movw	r22, r24
    35a8:	cd 01       	movw	r24, r26
    35aa:	0e 94 82 24 	call	0x4904	; 0x4904 <__mulsi3>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	e9 8d       	ldd	r30, Y+25	; 0x19
    35b4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    35b6:	80 83       	st	Z, r24
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	a2 83       	std	Z+2, r26	; 0x02
    35bc:	b3 83       	std	Z+3, r27	; 0x03
}
    35be:	6a 96       	adiw	r28, 0x1a	; 26
    35c0:	0f b6       	in	r0, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	de bf       	out	0x3e, r29	; 62
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	cd bf       	out	0x3d, r28	; 61
    35ca:	cf 91       	pop	r28
    35cc:	df 91       	pop	r29
    35ce:	1f 91       	pop	r17
    35d0:	0f 91       	pop	r16
    35d2:	ff 90       	pop	r15
    35d4:	ef 90       	pop	r14
    35d6:	08 95       	ret

000035d8 <MOTOR_Init>:
#include "../../MCAL/dio/dio.h"
#include "./steppermotor.h"
#include "util/delay.h"

void MOTOR_Init(void)
{
    35d8:	df 93       	push	r29
    35da:	cf 93       	push	r28
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
	DIO_VIDSetPinDirection(PINK_PORT,PINK,HIGH);
    35e0:	82 e4       	ldi	r24, 0x42	; 66
    35e2:	67 e0       	ldi	r22, 0x07	; 7
    35e4:	41 e0       	ldi	r20, 0x01	; 1
    35e6:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
	DIO_VIDSetPinDirection(YELLOW_PORT,YELLOW,HIGH);
    35ea:	84 e4       	ldi	r24, 0x44	; 68
    35ec:	60 e0       	ldi	r22, 0x00	; 0
    35ee:	41 e0       	ldi	r20, 0x01	; 1
    35f0:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
	DIO_VIDSetPinDirection(BLUE_PORT,BLUE,HIGH);
    35f4:	84 e4       	ldi	r24, 0x44	; 68
    35f6:	61 e0       	ldi	r22, 0x01	; 1
    35f8:	41 e0       	ldi	r20, 0x01	; 1
    35fa:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
}
    35fe:	cf 91       	pop	r28
    3600:	df 91       	pop	r29
    3602:	08 95       	ret

00003604 <MOTOR_Stop>:


void MOTOR_Stop(void)
{
    3604:	df 93       	push	r29
    3606:	cf 93       	push	r28
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
	DIO_VIDSetPinValue(PINK_PORT,PINK,LOW);
    360c:	82 e4       	ldi	r24, 0x42	; 66
    360e:	67 e0       	ldi	r22, 0x07	; 7
    3610:	40 e0       	ldi	r20, 0x00	; 0
    3612:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(YELLOW_PORT,YELLOW,LOW);
    3616:	84 e4       	ldi	r24, 0x44	; 68
    3618:	60 e0       	ldi	r22, 0x00	; 0
    361a:	40 e0       	ldi	r20, 0x00	; 0
    361c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(BLUE_PORT,BLUE,LOW);
    3620:	84 e4       	ldi	r24, 0x44	; 68
    3622:	61 e0       	ldi	r22, 0x01	; 1
    3624:	40 e0       	ldi	r20, 0x00	; 0
    3626:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
}
    362a:	cf 91       	pop	r28
    362c:	df 91       	pop	r29
    362e:	08 95       	ret

00003630 <MOTOR_CW>:
void MOTOR_CW(void)
{
    3630:	df 93       	push	r29
    3632:	cf 93       	push	r28
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62

	DIO_VIDSetPinValue(BLUE_PORT,BLUE,LOW);
    3638:	84 e4       	ldi	r24, 0x44	; 68
    363a:	61 e0       	ldi	r22, 0x01	; 1
    363c:	40 e0       	ldi	r20, 0x00	; 0
    363e:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(PINK_PORT,PINK,LOW);
    3642:	82 e4       	ldi	r24, 0x42	; 66
    3644:	67 e0       	ldi	r22, 0x07	; 7
    3646:	40 e0       	ldi	r20, 0x00	; 0
    3648:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(YELLOW_PORT,YELLOW,HIGH);
    364c:	84 e4       	ldi	r24, 0x44	; 68
    364e:	60 e0       	ldi	r22, 0x00	; 0
    3650:	41 e0       	ldi	r20, 0x01	; 1
    3652:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>

}
    3656:	cf 91       	pop	r28
    3658:	df 91       	pop	r29
    365a:	08 95       	ret

0000365c <MOTOR_CCW>:

void MOTOR_CCW(void)
{
    365c:	df 93       	push	r29
    365e:	cf 93       	push	r28
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
	DIO_VIDSetPinValue(BLUE_PORT,BLUE,HIGH);
    3664:	84 e4       	ldi	r24, 0x44	; 68
    3666:	61 e0       	ldi	r22, 0x01	; 1
    3668:	41 e0       	ldi	r20, 0x01	; 1
    366a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(PINK_PORT,PINK,LOW);
    366e:	82 e4       	ldi	r24, 0x42	; 66
    3670:	67 e0       	ldi	r22, 0x07	; 7
    3672:	40 e0       	ldi	r20, 0x00	; 0
    3674:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(YELLOW_PORT,YELLOW,LOW);
    3678:	84 e4       	ldi	r24, 0x44	; 68
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	40 e0       	ldi	r20, 0x00	; 0
    367e:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
}
    3682:	cf 91       	pop	r28
    3684:	df 91       	pop	r29
    3686:	08 95       	ret

00003688 <HCLCD_vidInit>:
#include "../../LIB/math/datatypes.h"
#include "../../MCAL/dio/dio.h"
#include "lcd.h"

/*to initialize LCD turn port DDR as output and follow instructions specified in data sheet  */
void HCLCD_vidInit(){
    3688:	0f 93       	push	r16
    368a:	1f 93       	push	r17
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	c6 54       	subi	r28, 0x46	; 70
    3696:	d0 40       	sbci	r29, 0x00	; 0
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
	DIO_VIDSetPinDirection(CONTROL_PORT,RS_PIN,HIGH);
    36a2:	81 e4       	ldi	r24, 0x41	; 65
    36a4:	60 e0       	ldi	r22, 0x00	; 0
    36a6:	41 e0       	ldi	r20, 0x01	; 1
    36a8:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
	DIO_VIDSetPinDirection(CONTROL_PORT,RW_PIN,HIGH);
    36ac:	81 e4       	ldi	r24, 0x41	; 65
    36ae:	61 e0       	ldi	r22, 0x01	; 1
    36b0:	41 e0       	ldi	r20, 0x01	; 1
    36b2:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
	DIO_VIDSetPinDirection(CONTROL_PORT,EN_PIN,HIGH);
    36b6:	81 e4       	ldi	r24, 0x41	; 65
    36b8:	62 e0       	ldi	r22, 0x02	; 2
    36ba:	41 e0       	ldi	r20, 0x01	; 1
    36bc:	0e 94 35 14 	call	0x286a	; 0x286a <DIO_VIDSetPinDirection>
	DIO_VIDSetPortDirection(DATA_PORT,0xff);
    36c0:	83 e6       	ldi	r24, 0x63	; 99
    36c2:	6f ef       	ldi	r22, 0xFF	; 255
    36c4:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_VIDSetPortDirection>
    36c8:	fe 01       	movw	r30, r28
    36ca:	ed 5b       	subi	r30, 0xBD	; 189
    36cc:	ff 4f       	sbci	r31, 0xFF	; 255
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	a0 ef       	ldi	r26, 0xF0	; 240
    36d4:	b1 e4       	ldi	r27, 0x41	; 65
    36d6:	80 83       	st	Z, r24
    36d8:	91 83       	std	Z+1, r25	; 0x01
    36da:	a2 83       	std	Z+2, r26	; 0x02
    36dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36de:	8e 01       	movw	r16, r28
    36e0:	01 5c       	subi	r16, 0xC1	; 193
    36e2:	1f 4f       	sbci	r17, 0xFF	; 255
    36e4:	fe 01       	movw	r30, r28
    36e6:	ed 5b       	subi	r30, 0xBD	; 189
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	60 81       	ld	r22, Z
    36ec:	71 81       	ldd	r23, Z+1	; 0x01
    36ee:	82 81       	ldd	r24, Z+2	; 0x02
    36f0:	93 81       	ldd	r25, Z+3	; 0x03
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	4a ef       	ldi	r20, 0xFA	; 250
    36f8:	54 e4       	ldi	r21, 0x44	; 68
    36fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fe:	dc 01       	movw	r26, r24
    3700:	cb 01       	movw	r24, r22
    3702:	f8 01       	movw	r30, r16
    3704:	80 83       	st	Z, r24
    3706:	91 83       	std	Z+1, r25	; 0x01
    3708:	a2 83       	std	Z+2, r26	; 0x02
    370a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    370c:	fe 01       	movw	r30, r28
    370e:	ff 96       	adiw	r30, 0x3f	; 63
    3710:	60 81       	ld	r22, Z
    3712:	71 81       	ldd	r23, Z+1	; 0x01
    3714:	82 81       	ldd	r24, Z+2	; 0x02
    3716:	93 81       	ldd	r25, Z+3	; 0x03
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	40 e8       	ldi	r20, 0x80	; 128
    371e:	5f e3       	ldi	r21, 0x3F	; 63
    3720:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3724:	88 23       	and	r24, r24
    3726:	2c f4       	brge	.+10     	; 0x3732 <HCLCD_vidInit+0xaa>
		__ticks = 1;
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	9e af       	std	Y+62, r25	; 0x3e
    372e:	8d af       	std	Y+61, r24	; 0x3d
    3730:	46 c0       	rjmp	.+140    	; 0x37be <HCLCD_vidInit+0x136>
	else if (__tmp > 65535)
    3732:	fe 01       	movw	r30, r28
    3734:	ff 96       	adiw	r30, 0x3f	; 63
    3736:	60 81       	ld	r22, Z
    3738:	71 81       	ldd	r23, Z+1	; 0x01
    373a:	82 81       	ldd	r24, Z+2	; 0x02
    373c:	93 81       	ldd	r25, Z+3	; 0x03
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	3f ef       	ldi	r19, 0xFF	; 255
    3742:	4f e7       	ldi	r20, 0x7F	; 127
    3744:	57 e4       	ldi	r21, 0x47	; 71
    3746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    374a:	18 16       	cp	r1, r24
    374c:	64 f5       	brge	.+88     	; 0x37a6 <HCLCD_vidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374e:	fe 01       	movw	r30, r28
    3750:	ed 5b       	subi	r30, 0xBD	; 189
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	60 81       	ld	r22, Z
    3756:	71 81       	ldd	r23, Z+1	; 0x01
    3758:	82 81       	ldd	r24, Z+2	; 0x02
    375a:	93 81       	ldd	r25, Z+3	; 0x03
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e2       	ldi	r20, 0x20	; 32
    3762:	51 e4       	ldi	r21, 0x41	; 65
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	9e af       	std	Y+62, r25	; 0x3e
    377a:	8d af       	std	Y+61, r24	; 0x3d
    377c:	0f c0       	rjmp	.+30     	; 0x379c <HCLCD_vidInit+0x114>
    377e:	88 ec       	ldi	r24, 0xC8	; 200
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	9c af       	std	Y+60, r25	; 0x3c
    3784:	8b af       	std	Y+59, r24	; 0x3b
    3786:	8b ad       	ldd	r24, Y+59	; 0x3b
    3788:	9c ad       	ldd	r25, Y+60	; 0x3c
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	f1 f7       	brne	.-4      	; 0x378a <HCLCD_vidInit+0x102>
    378e:	9c af       	std	Y+60, r25	; 0x3c
    3790:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3792:	8d ad       	ldd	r24, Y+61	; 0x3d
    3794:	9e ad       	ldd	r25, Y+62	; 0x3e
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	9e af       	std	Y+62, r25	; 0x3e
    379a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379c:	8d ad       	ldd	r24, Y+61	; 0x3d
    379e:	9e ad       	ldd	r25, Y+62	; 0x3e
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	69 f7       	brne	.-38     	; 0x377e <HCLCD_vidInit+0xf6>
    37a4:	16 c0       	rjmp	.+44     	; 0x37d2 <HCLCD_vidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a6:	fe 01       	movw	r30, r28
    37a8:	ff 96       	adiw	r30, 0x3f	; 63
    37aa:	60 81       	ld	r22, Z
    37ac:	71 81       	ldd	r23, Z+1	; 0x01
    37ae:	82 81       	ldd	r24, Z+2	; 0x02
    37b0:	93 81       	ldd	r25, Z+3	; 0x03
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	9e af       	std	Y+62, r25	; 0x3e
    37bc:	8d af       	std	Y+61, r24	; 0x3d
    37be:	8d ad       	ldd	r24, Y+61	; 0x3d
    37c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    37c2:	9a af       	std	Y+58, r25	; 0x3a
    37c4:	89 af       	std	Y+57, r24	; 0x39
    37c6:	89 ad       	ldd	r24, Y+57	; 0x39
    37c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	f1 f7       	brne	.-4      	; 0x37ca <HCLCD_vidInit+0x142>
    37ce:	9a af       	std	Y+58, r25	; 0x3a
    37d0:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(30);
	HCLCD_vidSendCommand(0b00111000);
    37d2:	88 e3       	ldi	r24, 0x38	; 56
    37d4:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <HCLCD_vidSendCommand>
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	a0 e8       	ldi	r26, 0x80	; 128
    37de:	bf e3       	ldi	r27, 0x3F	; 63
    37e0:	8d ab       	std	Y+53, r24	; 0x35
    37e2:	9e ab       	std	Y+54, r25	; 0x36
    37e4:	af ab       	std	Y+55, r26	; 0x37
    37e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e8:	6d a9       	ldd	r22, Y+53	; 0x35
    37ea:	7e a9       	ldd	r23, Y+54	; 0x36
    37ec:	8f a9       	ldd	r24, Y+55	; 0x37
    37ee:	98 ad       	ldd	r25, Y+56	; 0x38
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	4a ef       	ldi	r20, 0xFA	; 250
    37f6:	54 e4       	ldi	r21, 0x44	; 68
    37f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	89 ab       	std	Y+49, r24	; 0x31
    3802:	9a ab       	std	Y+50, r25	; 0x32
    3804:	ab ab       	std	Y+51, r26	; 0x33
    3806:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3808:	69 a9       	ldd	r22, Y+49	; 0x31
    380a:	7a a9       	ldd	r23, Y+50	; 0x32
    380c:	8b a9       	ldd	r24, Y+51	; 0x33
    380e:	9c a9       	ldd	r25, Y+52	; 0x34
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	40 e8       	ldi	r20, 0x80	; 128
    3816:	5f e3       	ldi	r21, 0x3F	; 63
    3818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    381c:	88 23       	and	r24, r24
    381e:	2c f4       	brge	.+10     	; 0x382a <HCLCD_vidInit+0x1a2>
		__ticks = 1;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	98 ab       	std	Y+48, r25	; 0x30
    3826:	8f a7       	std	Y+47, r24	; 0x2f
    3828:	3f c0       	rjmp	.+126    	; 0x38a8 <HCLCD_vidInit+0x220>
	else if (__tmp > 65535)
    382a:	69 a9       	ldd	r22, Y+49	; 0x31
    382c:	7a a9       	ldd	r23, Y+50	; 0x32
    382e:	8b a9       	ldd	r24, Y+51	; 0x33
    3830:	9c a9       	ldd	r25, Y+52	; 0x34
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	3f ef       	ldi	r19, 0xFF	; 255
    3836:	4f e7       	ldi	r20, 0x7F	; 127
    3838:	57 e4       	ldi	r21, 0x47	; 71
    383a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    383e:	18 16       	cp	r1, r24
    3840:	4c f5       	brge	.+82     	; 0x3894 <HCLCD_vidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3842:	6d a9       	ldd	r22, Y+53	; 0x35
    3844:	7e a9       	ldd	r23, Y+54	; 0x36
    3846:	8f a9       	ldd	r24, Y+55	; 0x37
    3848:	98 ad       	ldd	r25, Y+56	; 0x38
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e2       	ldi	r20, 0x20	; 32
    3850:	51 e4       	ldi	r21, 0x41	; 65
    3852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	98 ab       	std	Y+48, r25	; 0x30
    3868:	8f a7       	std	Y+47, r24	; 0x2f
    386a:	0f c0       	rjmp	.+30     	; 0x388a <HCLCD_vidInit+0x202>
    386c:	88 ec       	ldi	r24, 0xC8	; 200
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	9e a7       	std	Y+46, r25	; 0x2e
    3872:	8d a7       	std	Y+45, r24	; 0x2d
    3874:	8d a5       	ldd	r24, Y+45	; 0x2d
    3876:	9e a5       	ldd	r25, Y+46	; 0x2e
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	f1 f7       	brne	.-4      	; 0x3878 <HCLCD_vidInit+0x1f0>
    387c:	9e a7       	std	Y+46, r25	; 0x2e
    387e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3880:	8f a5       	ldd	r24, Y+47	; 0x2f
    3882:	98 a9       	ldd	r25, Y+48	; 0x30
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	98 ab       	std	Y+48, r25	; 0x30
    3888:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388a:	8f a5       	ldd	r24, Y+47	; 0x2f
    388c:	98 a9       	ldd	r25, Y+48	; 0x30
    388e:	00 97       	sbiw	r24, 0x00	; 0
    3890:	69 f7       	brne	.-38     	; 0x386c <HCLCD_vidInit+0x1e4>
    3892:	14 c0       	rjmp	.+40     	; 0x38bc <HCLCD_vidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3894:	69 a9       	ldd	r22, Y+49	; 0x31
    3896:	7a a9       	ldd	r23, Y+50	; 0x32
    3898:	8b a9       	ldd	r24, Y+51	; 0x33
    389a:	9c a9       	ldd	r25, Y+52	; 0x34
    389c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	98 ab       	std	Y+48, r25	; 0x30
    38a6:	8f a7       	std	Y+47, r24	; 0x2f
    38a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    38aa:	98 a9       	ldd	r25, Y+48	; 0x30
    38ac:	9c a7       	std	Y+44, r25	; 0x2c
    38ae:	8b a7       	std	Y+43, r24	; 0x2b
    38b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    38b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	f1 f7       	brne	.-4      	; 0x38b4 <HCLCD_vidInit+0x22c>
    38b8:	9c a7       	std	Y+44, r25	; 0x2c
    38ba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	HCLCD_vidSendCommand(0b00001110);
    38bc:	8e e0       	ldi	r24, 0x0E	; 14
    38be:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <HCLCD_vidSendCommand>
    38c2:	80 e0       	ldi	r24, 0x00	; 0
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	a0 e8       	ldi	r26, 0x80	; 128
    38c8:	bf e3       	ldi	r27, 0x3F	; 63
    38ca:	8f a3       	std	Y+39, r24	; 0x27
    38cc:	98 a7       	std	Y+40, r25	; 0x28
    38ce:	a9 a7       	std	Y+41, r26	; 0x29
    38d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d2:	6f a1       	ldd	r22, Y+39	; 0x27
    38d4:	78 a5       	ldd	r23, Y+40	; 0x28
    38d6:	89 a5       	ldd	r24, Y+41	; 0x29
    38d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	4a ef       	ldi	r20, 0xFA	; 250
    38e0:	54 e4       	ldi	r21, 0x44	; 68
    38e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	8b a3       	std	Y+35, r24	; 0x23
    38ec:	9c a3       	std	Y+36, r25	; 0x24
    38ee:	ad a3       	std	Y+37, r26	; 0x25
    38f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38f2:	6b a1       	ldd	r22, Y+35	; 0x23
    38f4:	7c a1       	ldd	r23, Y+36	; 0x24
    38f6:	8d a1       	ldd	r24, Y+37	; 0x25
    38f8:	9e a1       	ldd	r25, Y+38	; 0x26
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	40 e8       	ldi	r20, 0x80	; 128
    3900:	5f e3       	ldi	r21, 0x3F	; 63
    3902:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3906:	88 23       	and	r24, r24
    3908:	2c f4       	brge	.+10     	; 0x3914 <HCLCD_vidInit+0x28c>
		__ticks = 1;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	9a a3       	std	Y+34, r25	; 0x22
    3910:	89 a3       	std	Y+33, r24	; 0x21
    3912:	3f c0       	rjmp	.+126    	; 0x3992 <HCLCD_vidInit+0x30a>
	else if (__tmp > 65535)
    3914:	6b a1       	ldd	r22, Y+35	; 0x23
    3916:	7c a1       	ldd	r23, Y+36	; 0x24
    3918:	8d a1       	ldd	r24, Y+37	; 0x25
    391a:	9e a1       	ldd	r25, Y+38	; 0x26
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	3f ef       	ldi	r19, 0xFF	; 255
    3920:	4f e7       	ldi	r20, 0x7F	; 127
    3922:	57 e4       	ldi	r21, 0x47	; 71
    3924:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3928:	18 16       	cp	r1, r24
    392a:	4c f5       	brge	.+82     	; 0x397e <HCLCD_vidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    392c:	6f a1       	ldd	r22, Y+39	; 0x27
    392e:	78 a5       	ldd	r23, Y+40	; 0x28
    3930:	89 a5       	ldd	r24, Y+41	; 0x29
    3932:	9a a5       	ldd	r25, Y+42	; 0x2a
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	40 e2       	ldi	r20, 0x20	; 32
    393a:	51 e4       	ldi	r21, 0x41	; 65
    393c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	bc 01       	movw	r22, r24
    3946:	cd 01       	movw	r24, r26
    3948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	9a a3       	std	Y+34, r25	; 0x22
    3952:	89 a3       	std	Y+33, r24	; 0x21
    3954:	0f c0       	rjmp	.+30     	; 0x3974 <HCLCD_vidInit+0x2ec>
    3956:	88 ec       	ldi	r24, 0xC8	; 200
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	98 a3       	std	Y+32, r25	; 0x20
    395c:	8f 8f       	std	Y+31, r24	; 0x1f
    395e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3960:	98 a1       	ldd	r25, Y+32	; 0x20
    3962:	01 97       	sbiw	r24, 0x01	; 1
    3964:	f1 f7       	brne	.-4      	; 0x3962 <HCLCD_vidInit+0x2da>
    3966:	98 a3       	std	Y+32, r25	; 0x20
    3968:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396a:	89 a1       	ldd	r24, Y+33	; 0x21
    396c:	9a a1       	ldd	r25, Y+34	; 0x22
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	9a a3       	std	Y+34, r25	; 0x22
    3972:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3974:	89 a1       	ldd	r24, Y+33	; 0x21
    3976:	9a a1       	ldd	r25, Y+34	; 0x22
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	69 f7       	brne	.-38     	; 0x3956 <HCLCD_vidInit+0x2ce>
    397c:	14 c0       	rjmp	.+40     	; 0x39a6 <HCLCD_vidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397e:	6b a1       	ldd	r22, Y+35	; 0x23
    3980:	7c a1       	ldd	r23, Y+36	; 0x24
    3982:	8d a1       	ldd	r24, Y+37	; 0x25
    3984:	9e a1       	ldd	r25, Y+38	; 0x26
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	9a a3       	std	Y+34, r25	; 0x22
    3990:	89 a3       	std	Y+33, r24	; 0x21
    3992:	89 a1       	ldd	r24, Y+33	; 0x21
    3994:	9a a1       	ldd	r25, Y+34	; 0x22
    3996:	9e 8f       	std	Y+30, r25	; 0x1e
    3998:	8d 8f       	std	Y+29, r24	; 0x1d
    399a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    399c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	f1 f7       	brne	.-4      	; 0x399e <HCLCD_vidInit+0x316>
    39a2:	9e 8f       	std	Y+30, r25	; 0x1e
    39a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HCLCD_vidSendCommand(0b00000001);
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <HCLCD_vidSendCommand>
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	a0 e0       	ldi	r26, 0x00	; 0
    39b2:	b0 e4       	ldi	r27, 0x40	; 64
    39b4:	89 8f       	std	Y+25, r24	; 0x19
    39b6:	9a 8f       	std	Y+26, r25	; 0x1a
    39b8:	ab 8f       	std	Y+27, r26	; 0x1b
    39ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39bc:	69 8d       	ldd	r22, Y+25	; 0x19
    39be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	4a ef       	ldi	r20, 0xFA	; 250
    39ca:	54 e4       	ldi	r21, 0x44	; 68
    39cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	8d 8b       	std	Y+21, r24	; 0x15
    39d6:	9e 8b       	std	Y+22, r25	; 0x16
    39d8:	af 8b       	std	Y+23, r26	; 0x17
    39da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39dc:	6d 89       	ldd	r22, Y+21	; 0x15
    39de:	7e 89       	ldd	r23, Y+22	; 0x16
    39e0:	8f 89       	ldd	r24, Y+23	; 0x17
    39e2:	98 8d       	ldd	r25, Y+24	; 0x18
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	40 e8       	ldi	r20, 0x80	; 128
    39ea:	5f e3       	ldi	r21, 0x3F	; 63
    39ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39f0:	88 23       	and	r24, r24
    39f2:	2c f4       	brge	.+10     	; 0x39fe <HCLCD_vidInit+0x376>
		__ticks = 1;
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	9c 8b       	std	Y+20, r25	; 0x14
    39fa:	8b 8b       	std	Y+19, r24	; 0x13
    39fc:	3f c0       	rjmp	.+126    	; 0x3a7c <HCLCD_vidInit+0x3f4>
	else if (__tmp > 65535)
    39fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3a00:	7e 89       	ldd	r23, Y+22	; 0x16
    3a02:	8f 89       	ldd	r24, Y+23	; 0x17
    3a04:	98 8d       	ldd	r25, Y+24	; 0x18
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	3f ef       	ldi	r19, 0xFF	; 255
    3a0a:	4f e7       	ldi	r20, 0x7F	; 127
    3a0c:	57 e4       	ldi	r21, 0x47	; 71
    3a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a12:	18 16       	cp	r1, r24
    3a14:	4c f5       	brge	.+82     	; 0x3a68 <HCLCD_vidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a16:	69 8d       	ldd	r22, Y+25	; 0x19
    3a18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	40 e2       	ldi	r20, 0x20	; 32
    3a24:	51 e4       	ldi	r21, 0x41	; 65
    3a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	bc 01       	movw	r22, r24
    3a30:	cd 01       	movw	r24, r26
    3a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	9c 8b       	std	Y+20, r25	; 0x14
    3a3c:	8b 8b       	std	Y+19, r24	; 0x13
    3a3e:	0f c0       	rjmp	.+30     	; 0x3a5e <HCLCD_vidInit+0x3d6>
    3a40:	88 ec       	ldi	r24, 0xC8	; 200
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	9a 8b       	std	Y+18, r25	; 0x12
    3a46:	89 8b       	std	Y+17, r24	; 0x11
    3a48:	89 89       	ldd	r24, Y+17	; 0x11
    3a4a:	9a 89       	ldd	r25, Y+18	; 0x12
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	f1 f7       	brne	.-4      	; 0x3a4c <HCLCD_vidInit+0x3c4>
    3a50:	9a 8b       	std	Y+18, r25	; 0x12
    3a52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a54:	8b 89       	ldd	r24, Y+19	; 0x13
    3a56:	9c 89       	ldd	r25, Y+20	; 0x14
    3a58:	01 97       	sbiw	r24, 0x01	; 1
    3a5a:	9c 8b       	std	Y+20, r25	; 0x14
    3a5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a60:	9c 89       	ldd	r25, Y+20	; 0x14
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	69 f7       	brne	.-38     	; 0x3a40 <HCLCD_vidInit+0x3b8>
    3a66:	14 c0       	rjmp	.+40     	; 0x3a90 <HCLCD_vidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a68:	6d 89       	ldd	r22, Y+21	; 0x15
    3a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	9c 8b       	std	Y+20, r25	; 0x14
    3a7a:	8b 8b       	std	Y+19, r24	; 0x13
    3a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a80:	98 8b       	std	Y+16, r25	; 0x10
    3a82:	8f 87       	std	Y+15, r24	; 0x0f
    3a84:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a86:	98 89       	ldd	r25, Y+16	; 0x10
    3a88:	01 97       	sbiw	r24, 0x01	; 1
    3a8a:	f1 f7       	brne	.-4      	; 0x3a88 <HCLCD_vidInit+0x400>
    3a8c:	98 8b       	std	Y+16, r25	; 0x10
    3a8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HCLCD_vidSendCommand(0b00000110);
    3a90:	86 e0       	ldi	r24, 0x06	; 6
    3a92:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <HCLCD_vidSendCommand>
    3a96:	80 e0       	ldi	r24, 0x00	; 0
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	a0 e8       	ldi	r26, 0x80	; 128
    3a9c:	bf e3       	ldi	r27, 0x3F	; 63
    3a9e:	8b 87       	std	Y+11, r24	; 0x0b
    3aa0:	9c 87       	std	Y+12, r25	; 0x0c
    3aa2:	ad 87       	std	Y+13, r26	; 0x0d
    3aa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	4a ef       	ldi	r20, 0xFA	; 250
    3ab4:	54 e4       	ldi	r21, 0x44	; 68
    3ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	8f 83       	std	Y+7, r24	; 0x07
    3ac0:	98 87       	std	Y+8, r25	; 0x08
    3ac2:	a9 87       	std	Y+9, r26	; 0x09
    3ac4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac8:	78 85       	ldd	r23, Y+8	; 0x08
    3aca:	89 85       	ldd	r24, Y+9	; 0x09
    3acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	40 e8       	ldi	r20, 0x80	; 128
    3ad4:	5f e3       	ldi	r21, 0x3F	; 63
    3ad6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ada:	88 23       	and	r24, r24
    3adc:	2c f4       	brge	.+10     	; 0x3ae8 <HCLCD_vidInit+0x460>
		__ticks = 1;
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	9e 83       	std	Y+6, r25	; 0x06
    3ae4:	8d 83       	std	Y+5, r24	; 0x05
    3ae6:	3f c0       	rjmp	.+126    	; 0x3b66 <HCLCD_vidInit+0x4de>
	else if (__tmp > 65535)
    3ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aea:	78 85       	ldd	r23, Y+8	; 0x08
    3aec:	89 85       	ldd	r24, Y+9	; 0x09
    3aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	3f ef       	ldi	r19, 0xFF	; 255
    3af4:	4f e7       	ldi	r20, 0x7F	; 127
    3af6:	57 e4       	ldi	r21, 0x47	; 71
    3af8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3afc:	18 16       	cp	r1, r24
    3afe:	4c f5       	brge	.+82     	; 0x3b52 <HCLCD_vidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e2       	ldi	r20, 0x20	; 32
    3b0e:	51 e4       	ldi	r21, 0x41	; 65
    3b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	bc 01       	movw	r22, r24
    3b1a:	cd 01       	movw	r24, r26
    3b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	9e 83       	std	Y+6, r25	; 0x06
    3b26:	8d 83       	std	Y+5, r24	; 0x05
    3b28:	0f c0       	rjmp	.+30     	; 0x3b48 <HCLCD_vidInit+0x4c0>
    3b2a:	88 ec       	ldi	r24, 0xC8	; 200
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	9c 83       	std	Y+4, r25	; 0x04
    3b30:	8b 83       	std	Y+3, r24	; 0x03
    3b32:	8b 81       	ldd	r24, Y+3	; 0x03
    3b34:	9c 81       	ldd	r25, Y+4	; 0x04
    3b36:	01 97       	sbiw	r24, 0x01	; 1
    3b38:	f1 f7       	brne	.-4      	; 0x3b36 <HCLCD_vidInit+0x4ae>
    3b3a:	9c 83       	std	Y+4, r25	; 0x04
    3b3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b40:	9e 81       	ldd	r25, Y+6	; 0x06
    3b42:	01 97       	sbiw	r24, 0x01	; 1
    3b44:	9e 83       	std	Y+6, r25	; 0x06
    3b46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b48:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4c:	00 97       	sbiw	r24, 0x00	; 0
    3b4e:	69 f7       	brne	.-38     	; 0x3b2a <HCLCD_vidInit+0x4a2>
    3b50:	14 c0       	rjmp	.+40     	; 0x3b7a <HCLCD_vidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b52:	6f 81       	ldd	r22, Y+7	; 0x07
    3b54:	78 85       	ldd	r23, Y+8	; 0x08
    3b56:	89 85       	ldd	r24, Y+9	; 0x09
    3b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	9e 83       	std	Y+6, r25	; 0x06
    3b64:	8d 83       	std	Y+5, r24	; 0x05
    3b66:	8d 81       	ldd	r24, Y+5	; 0x05
    3b68:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6a:	9a 83       	std	Y+2, r25	; 0x02
    3b6c:	89 83       	std	Y+1, r24	; 0x01
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
    3b70:	9a 81       	ldd	r25, Y+2	; 0x02
    3b72:	01 97       	sbiw	r24, 0x01	; 1
    3b74:	f1 f7       	brne	.-4      	; 0x3b72 <HCLCD_vidInit+0x4ea>
    3b76:	9a 83       	std	Y+2, r25	; 0x02
    3b78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    3b7a:	ca 5b       	subi	r28, 0xBA	; 186
    3b7c:	df 4f       	sbci	r29, 0xFF	; 255
    3b7e:	0f b6       	in	r0, 0x3f	; 63
    3b80:	f8 94       	cli
    3b82:	de bf       	out	0x3e, r29	; 62
    3b84:	0f be       	out	0x3f, r0	; 63
    3b86:	cd bf       	out	0x3d, r28	; 61
    3b88:	cf 91       	pop	r28
    3b8a:	df 91       	pop	r29
    3b8c:	1f 91       	pop	r17
    3b8e:	0f 91       	pop	r16
    3b90:	08 95       	ret

00003b92 <HCLCD_vidSendCommand>:
/*to send command write at IR RW must be low and RW must be low*/
void HCLCD_vidSendCommand(u8 cpy_u8Command){
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	6d 97       	sbiw	r28, 0x1d	; 29
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	f8 94       	cli
    3ba0:	de bf       	out	0x3e, r29	; 62
    3ba2:	0f be       	out	0x3f, r0	; 63
    3ba4:	cd bf       	out	0x3d, r28	; 61
    3ba6:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VIDSetPinValue(CONTROL_PORT,RS_PIN,LOW);
    3ba8:	81 e4       	ldi	r24, 0x41	; 65
    3baa:	60 e0       	ldi	r22, 0x00	; 0
    3bac:	40 e0       	ldi	r20, 0x00	; 0
    3bae:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPinValue(CONTROL_PORT,RW_PIN,LOW);
    3bb2:	81 e4       	ldi	r24, 0x41	; 65
    3bb4:	61 e0       	ldi	r22, 0x01	; 1
    3bb6:	40 e0       	ldi	r20, 0x00	; 0
    3bb8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPortValue(DATA_PORT, cpy_u8Command);
    3bbc:	83 e6       	ldi	r24, 0x63	; 99
    3bbe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3bc0:	0e 94 11 17 	call	0x2e22	; 0x2e22 <DIO_VIDSetPortValue>
	DIO_VIDSetPinValue(CONTROL_PORT,EN_PIN,HIGH);
    3bc4:	81 e4       	ldi	r24, 0x41	; 65
    3bc6:	62 e0       	ldi	r22, 0x02	; 2
    3bc8:	41 e0       	ldi	r20, 0x01	; 1
    3bca:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	a0 e8       	ldi	r26, 0x80	; 128
    3bd4:	bf e3       	ldi	r27, 0x3F	; 63
    3bd6:	89 8f       	std	Y+25, r24	; 0x19
    3bd8:	9a 8f       	std	Y+26, r25	; 0x1a
    3bda:	ab 8f       	std	Y+27, r26	; 0x1b
    3bdc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bde:	69 8d       	ldd	r22, Y+25	; 0x19
    3be0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3be2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3be4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	4a ef       	ldi	r20, 0xFA	; 250
    3bec:	54 e4       	ldi	r21, 0x44	; 68
    3bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	8d 8b       	std	Y+21, r24	; 0x15
    3bf8:	9e 8b       	std	Y+22, r25	; 0x16
    3bfa:	af 8b       	std	Y+23, r26	; 0x17
    3bfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    3c00:	7e 89       	ldd	r23, Y+22	; 0x16
    3c02:	8f 89       	ldd	r24, Y+23	; 0x17
    3c04:	98 8d       	ldd	r25, Y+24	; 0x18
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	40 e8       	ldi	r20, 0x80	; 128
    3c0c:	5f e3       	ldi	r21, 0x3F	; 63
    3c0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c12:	88 23       	and	r24, r24
    3c14:	2c f4       	brge	.+10     	; 0x3c20 <HCLCD_vidSendCommand+0x8e>
		__ticks = 1;
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	9c 8b       	std	Y+20, r25	; 0x14
    3c1c:	8b 8b       	std	Y+19, r24	; 0x13
    3c1e:	3f c0       	rjmp	.+126    	; 0x3c9e <HCLCD_vidSendCommand+0x10c>
	else if (__tmp > 65535)
    3c20:	6d 89       	ldd	r22, Y+21	; 0x15
    3c22:	7e 89       	ldd	r23, Y+22	; 0x16
    3c24:	8f 89       	ldd	r24, Y+23	; 0x17
    3c26:	98 8d       	ldd	r25, Y+24	; 0x18
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	3f ef       	ldi	r19, 0xFF	; 255
    3c2c:	4f e7       	ldi	r20, 0x7F	; 127
    3c2e:	57 e4       	ldi	r21, 0x47	; 71
    3c30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c34:	18 16       	cp	r1, r24
    3c36:	4c f5       	brge	.+82     	; 0x3c8a <HCLCD_vidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c38:	69 8d       	ldd	r22, Y+25	; 0x19
    3c3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	40 e2       	ldi	r20, 0x20	; 32
    3c46:	51 e4       	ldi	r21, 0x41	; 65
    3c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	cb 01       	movw	r24, r22
    3c50:	bc 01       	movw	r22, r24
    3c52:	cd 01       	movw	r24, r26
    3c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	9c 8b       	std	Y+20, r25	; 0x14
    3c5e:	8b 8b       	std	Y+19, r24	; 0x13
    3c60:	0f c0       	rjmp	.+30     	; 0x3c80 <HCLCD_vidSendCommand+0xee>
    3c62:	88 ec       	ldi	r24, 0xC8	; 200
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	9a 8b       	std	Y+18, r25	; 0x12
    3c68:	89 8b       	std	Y+17, r24	; 0x11
    3c6a:	89 89       	ldd	r24, Y+17	; 0x11
    3c6c:	9a 89       	ldd	r25, Y+18	; 0x12
    3c6e:	01 97       	sbiw	r24, 0x01	; 1
    3c70:	f1 f7       	brne	.-4      	; 0x3c6e <HCLCD_vidSendCommand+0xdc>
    3c72:	9a 8b       	std	Y+18, r25	; 0x12
    3c74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c76:	8b 89       	ldd	r24, Y+19	; 0x13
    3c78:	9c 89       	ldd	r25, Y+20	; 0x14
    3c7a:	01 97       	sbiw	r24, 0x01	; 1
    3c7c:	9c 8b       	std	Y+20, r25	; 0x14
    3c7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c80:	8b 89       	ldd	r24, Y+19	; 0x13
    3c82:	9c 89       	ldd	r25, Y+20	; 0x14
    3c84:	00 97       	sbiw	r24, 0x00	; 0
    3c86:	69 f7       	brne	.-38     	; 0x3c62 <HCLCD_vidSendCommand+0xd0>
    3c88:	14 c0       	rjmp	.+40     	; 0x3cb2 <HCLCD_vidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c90:	98 8d       	ldd	r25, Y+24	; 0x18
    3c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	9c 8b       	std	Y+20, r25	; 0x14
    3c9c:	8b 8b       	std	Y+19, r24	; 0x13
    3c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca2:	98 8b       	std	Y+16, r25	; 0x10
    3ca4:	8f 87       	std	Y+15, r24	; 0x0f
    3ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ca8:	98 89       	ldd	r25, Y+16	; 0x10
    3caa:	01 97       	sbiw	r24, 0x01	; 1
    3cac:	f1 f7       	brne	.-4      	; 0x3caa <HCLCD_vidSendCommand+0x118>
    3cae:	98 8b       	std	Y+16, r25	; 0x10
    3cb0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VIDSetPinValue(CONTROL_PORT,EN_PIN,LOW);
    3cb2:	81 e4       	ldi	r24, 0x41	; 65
    3cb4:	62 e0       	ldi	r22, 0x02	; 2
    3cb6:	40 e0       	ldi	r20, 0x00	; 0
    3cb8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	a0 e8       	ldi	r26, 0x80	; 128
    3cc2:	bf e3       	ldi	r27, 0x3F	; 63
    3cc4:	8b 87       	std	Y+11, r24	; 0x0b
    3cc6:	9c 87       	std	Y+12, r25	; 0x0c
    3cc8:	ad 87       	std	Y+13, r26	; 0x0d
    3cca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	4a ef       	ldi	r20, 0xFA	; 250
    3cda:	54 e4       	ldi	r21, 0x44	; 68
    3cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	8f 83       	std	Y+7, r24	; 0x07
    3ce6:	98 87       	std	Y+8, r25	; 0x08
    3ce8:	a9 87       	std	Y+9, r26	; 0x09
    3cea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cec:	6f 81       	ldd	r22, Y+7	; 0x07
    3cee:	78 85       	ldd	r23, Y+8	; 0x08
    3cf0:	89 85       	ldd	r24, Y+9	; 0x09
    3cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	40 e8       	ldi	r20, 0x80	; 128
    3cfa:	5f e3       	ldi	r21, 0x3F	; 63
    3cfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d00:	88 23       	and	r24, r24
    3d02:	2c f4       	brge	.+10     	; 0x3d0e <HCLCD_vidSendCommand+0x17c>
		__ticks = 1;
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	9e 83       	std	Y+6, r25	; 0x06
    3d0a:	8d 83       	std	Y+5, r24	; 0x05
    3d0c:	3f c0       	rjmp	.+126    	; 0x3d8c <HCLCD_vidSendCommand+0x1fa>
	else if (__tmp > 65535)
    3d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d10:	78 85       	ldd	r23, Y+8	; 0x08
    3d12:	89 85       	ldd	r24, Y+9	; 0x09
    3d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	3f ef       	ldi	r19, 0xFF	; 255
    3d1a:	4f e7       	ldi	r20, 0x7F	; 127
    3d1c:	57 e4       	ldi	r21, 0x47	; 71
    3d1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d22:	18 16       	cp	r1, r24
    3d24:	4c f5       	brge	.+82     	; 0x3d78 <HCLCD_vidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	40 e2       	ldi	r20, 0x20	; 32
    3d34:	51 e4       	ldi	r21, 0x41	; 65
    3d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	bc 01       	movw	r22, r24
    3d40:	cd 01       	movw	r24, r26
    3d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	9e 83       	std	Y+6, r25	; 0x06
    3d4c:	8d 83       	std	Y+5, r24	; 0x05
    3d4e:	0f c0       	rjmp	.+30     	; 0x3d6e <HCLCD_vidSendCommand+0x1dc>
    3d50:	88 ec       	ldi	r24, 0xC8	; 200
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	9c 83       	std	Y+4, r25	; 0x04
    3d56:	8b 83       	std	Y+3, r24	; 0x03
    3d58:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	f1 f7       	brne	.-4      	; 0x3d5c <HCLCD_vidSendCommand+0x1ca>
    3d60:	9c 83       	std	Y+4, r25	; 0x04
    3d62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d64:	8d 81       	ldd	r24, Y+5	; 0x05
    3d66:	9e 81       	ldd	r25, Y+6	; 0x06
    3d68:	01 97       	sbiw	r24, 0x01	; 1
    3d6a:	9e 83       	std	Y+6, r25	; 0x06
    3d6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d70:	9e 81       	ldd	r25, Y+6	; 0x06
    3d72:	00 97       	sbiw	r24, 0x00	; 0
    3d74:	69 f7       	brne	.-38     	; 0x3d50 <HCLCD_vidSendCommand+0x1be>
    3d76:	14 c0       	rjmp	.+40     	; 0x3da0 <HCLCD_vidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d78:	6f 81       	ldd	r22, Y+7	; 0x07
    3d7a:	78 85       	ldd	r23, Y+8	; 0x08
    3d7c:	89 85       	ldd	r24, Y+9	; 0x09
    3d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	9e 83       	std	Y+6, r25	; 0x06
    3d8a:	8d 83       	std	Y+5, r24	; 0x05
    3d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d90:	9a 83       	std	Y+2, r25	; 0x02
    3d92:	89 83       	std	Y+1, r24	; 0x01
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	9a 81       	ldd	r25, Y+2	; 0x02
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	f1 f7       	brne	.-4      	; 0x3d98 <HCLCD_vidSendCommand+0x206>
    3d9c:	9a 83       	std	Y+2, r25	; 0x02
    3d9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3da0:	6d 96       	adiw	r28, 0x1d	; 29
    3da2:	0f b6       	in	r0, 0x3f	; 63
    3da4:	f8 94       	cli
    3da6:	de bf       	out	0x3e, r29	; 62
    3da8:	0f be       	out	0x3f, r0	; 63
    3daa:	cd bf       	out	0x3d, r28	; 61
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	08 95       	ret

00003db2 <HCLCD_vidSendData>:
void HCLCD_vidSendData(u8 cpy_u8Data){
    3db2:	df 93       	push	r29
    3db4:	cf 93       	push	r28
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
    3dba:	6d 97       	sbiw	r28, 0x1d	; 29
    3dbc:	0f b6       	in	r0, 0x3f	; 63
    3dbe:	f8 94       	cli
    3dc0:	de bf       	out	0x3e, r29	; 62
    3dc2:	0f be       	out	0x3f, r0	; 63
    3dc4:	cd bf       	out	0x3d, r28	; 61
    3dc6:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VIDSetPinValue(CONTROL_PORT,RS_PIN,HIGH);
    3dc8:	81 e4       	ldi	r24, 0x41	; 65
    3dca:	60 e0       	ldi	r22, 0x00	; 0
    3dcc:	41 e0       	ldi	r20, 0x01	; 1
    3dce:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	DIO_VIDSetPortValue(DATA_PORT, cpy_u8Data);
    3dd2:	83 e6       	ldi	r24, 0x63	; 99
    3dd4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3dd6:	0e 94 11 17 	call	0x2e22	; 0x2e22 <DIO_VIDSetPortValue>
	DIO_VIDSetPinValue(CONTROL_PORT,EN_PIN,HIGH);
    3dda:	81 e4       	ldi	r24, 0x41	; 65
    3ddc:	62 e0       	ldi	r22, 0x02	; 2
    3dde:	41 e0       	ldi	r20, 0x01	; 1
    3de0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
    3de4:	80 e0       	ldi	r24, 0x00	; 0
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	a0 e8       	ldi	r26, 0x80	; 128
    3dea:	bf e3       	ldi	r27, 0x3F	; 63
    3dec:	89 8f       	std	Y+25, r24	; 0x19
    3dee:	9a 8f       	std	Y+26, r25	; 0x1a
    3df0:	ab 8f       	std	Y+27, r26	; 0x1b
    3df2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3df4:	69 8d       	ldd	r22, Y+25	; 0x19
    3df6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	4a ef       	ldi	r20, 0xFA	; 250
    3e02:	54 e4       	ldi	r21, 0x44	; 68
    3e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e08:	dc 01       	movw	r26, r24
    3e0a:	cb 01       	movw	r24, r22
    3e0c:	8d 8b       	std	Y+21, r24	; 0x15
    3e0e:	9e 8b       	std	Y+22, r25	; 0x16
    3e10:	af 8b       	std	Y+23, r26	; 0x17
    3e12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e14:	6d 89       	ldd	r22, Y+21	; 0x15
    3e16:	7e 89       	ldd	r23, Y+22	; 0x16
    3e18:	8f 89       	ldd	r24, Y+23	; 0x17
    3e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	40 e8       	ldi	r20, 0x80	; 128
    3e22:	5f e3       	ldi	r21, 0x3F	; 63
    3e24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e28:	88 23       	and	r24, r24
    3e2a:	2c f4       	brge	.+10     	; 0x3e36 <HCLCD_vidSendData+0x84>
		__ticks = 1;
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	9c 8b       	std	Y+20, r25	; 0x14
    3e32:	8b 8b       	std	Y+19, r24	; 0x13
    3e34:	3f c0       	rjmp	.+126    	; 0x3eb4 <HCLCD_vidSendData+0x102>
	else if (__tmp > 65535)
    3e36:	6d 89       	ldd	r22, Y+21	; 0x15
    3e38:	7e 89       	ldd	r23, Y+22	; 0x16
    3e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	3f ef       	ldi	r19, 0xFF	; 255
    3e42:	4f e7       	ldi	r20, 0x7F	; 127
    3e44:	57 e4       	ldi	r21, 0x47	; 71
    3e46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e4a:	18 16       	cp	r1, r24
    3e4c:	4c f5       	brge	.+82     	; 0x3ea0 <HCLCD_vidSendData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e4e:	69 8d       	ldd	r22, Y+25	; 0x19
    3e50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e56:	20 e0       	ldi	r18, 0x00	; 0
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	40 e2       	ldi	r20, 0x20	; 32
    3e5c:	51 e4       	ldi	r21, 0x41	; 65
    3e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e62:	dc 01       	movw	r26, r24
    3e64:	cb 01       	movw	r24, r22
    3e66:	bc 01       	movw	r22, r24
    3e68:	cd 01       	movw	r24, r26
    3e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	9c 8b       	std	Y+20, r25	; 0x14
    3e74:	8b 8b       	std	Y+19, r24	; 0x13
    3e76:	0f c0       	rjmp	.+30     	; 0x3e96 <HCLCD_vidSendData+0xe4>
    3e78:	88 ec       	ldi	r24, 0xC8	; 200
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	9a 8b       	std	Y+18, r25	; 0x12
    3e7e:	89 8b       	std	Y+17, r24	; 0x11
    3e80:	89 89       	ldd	r24, Y+17	; 0x11
    3e82:	9a 89       	ldd	r25, Y+18	; 0x12
    3e84:	01 97       	sbiw	r24, 0x01	; 1
    3e86:	f1 f7       	brne	.-4      	; 0x3e84 <HCLCD_vidSendData+0xd2>
    3e88:	9a 8b       	std	Y+18, r25	; 0x12
    3e8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	9c 8b       	std	Y+20, r25	; 0x14
    3e94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e96:	8b 89       	ldd	r24, Y+19	; 0x13
    3e98:	9c 89       	ldd	r25, Y+20	; 0x14
    3e9a:	00 97       	sbiw	r24, 0x00	; 0
    3e9c:	69 f7       	brne	.-38     	; 0x3e78 <HCLCD_vidSendData+0xc6>
    3e9e:	14 c0       	rjmp	.+40     	; 0x3ec8 <HCLCD_vidSendData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	9c 8b       	std	Y+20, r25	; 0x14
    3eb2:	8b 8b       	std	Y+19, r24	; 0x13
    3eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    3eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    3eb8:	98 8b       	std	Y+16, r25	; 0x10
    3eba:	8f 87       	std	Y+15, r24	; 0x0f
    3ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ebe:	98 89       	ldd	r25, Y+16	; 0x10
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	f1 f7       	brne	.-4      	; 0x3ec0 <HCLCD_vidSendData+0x10e>
    3ec4:	98 8b       	std	Y+16, r25	; 0x10
    3ec6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VIDSetPinValue(CONTROL_PORT,EN_PIN,LOW);
    3ec8:	81 e4       	ldi	r24, 0x41	; 65
    3eca:	62 e0       	ldi	r22, 0x02	; 2
    3ecc:	40 e0       	ldi	r20, 0x00	; 0
    3ece:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	a0 e8       	ldi	r26, 0x80	; 128
    3ed8:	bf e3       	ldi	r27, 0x3F	; 63
    3eda:	8b 87       	std	Y+11, r24	; 0x0b
    3edc:	9c 87       	std	Y+12, r25	; 0x0c
    3ede:	ad 87       	std	Y+13, r26	; 0x0d
    3ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	4a ef       	ldi	r20, 0xFA	; 250
    3ef0:	54 e4       	ldi	r21, 0x44	; 68
    3ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	8f 83       	std	Y+7, r24	; 0x07
    3efc:	98 87       	std	Y+8, r25	; 0x08
    3efe:	a9 87       	std	Y+9, r26	; 0x09
    3f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f02:	6f 81       	ldd	r22, Y+7	; 0x07
    3f04:	78 85       	ldd	r23, Y+8	; 0x08
    3f06:	89 85       	ldd	r24, Y+9	; 0x09
    3f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	40 e8       	ldi	r20, 0x80	; 128
    3f10:	5f e3       	ldi	r21, 0x3F	; 63
    3f12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f16:	88 23       	and	r24, r24
    3f18:	2c f4       	brge	.+10     	; 0x3f24 <HCLCD_vidSendData+0x172>
		__ticks = 1;
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	9e 83       	std	Y+6, r25	; 0x06
    3f20:	8d 83       	std	Y+5, r24	; 0x05
    3f22:	3f c0       	rjmp	.+126    	; 0x3fa2 <HCLCD_vidSendData+0x1f0>
	else if (__tmp > 65535)
    3f24:	6f 81       	ldd	r22, Y+7	; 0x07
    3f26:	78 85       	ldd	r23, Y+8	; 0x08
    3f28:	89 85       	ldd	r24, Y+9	; 0x09
    3f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	3f ef       	ldi	r19, 0xFF	; 255
    3f30:	4f e7       	ldi	r20, 0x7F	; 127
    3f32:	57 e4       	ldi	r21, 0x47	; 71
    3f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f38:	18 16       	cp	r1, r24
    3f3a:	4c f5       	brge	.+82     	; 0x3f8e <HCLCD_vidSendData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	40 e2       	ldi	r20, 0x20	; 32
    3f4a:	51 e4       	ldi	r21, 0x41	; 65
    3f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	bc 01       	movw	r22, r24
    3f56:	cd 01       	movw	r24, r26
    3f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	9e 83       	std	Y+6, r25	; 0x06
    3f62:	8d 83       	std	Y+5, r24	; 0x05
    3f64:	0f c0       	rjmp	.+30     	; 0x3f84 <HCLCD_vidSendData+0x1d2>
    3f66:	88 ec       	ldi	r24, 0xC8	; 200
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	9c 83       	std	Y+4, r25	; 0x04
    3f6c:	8b 83       	std	Y+3, r24	; 0x03
    3f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f70:	9c 81       	ldd	r25, Y+4	; 0x04
    3f72:	01 97       	sbiw	r24, 0x01	; 1
    3f74:	f1 f7       	brne	.-4      	; 0x3f72 <HCLCD_vidSendData+0x1c0>
    3f76:	9c 83       	std	Y+4, r25	; 0x04
    3f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f7e:	01 97       	sbiw	r24, 0x01	; 1
    3f80:	9e 83       	std	Y+6, r25	; 0x06
    3f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f84:	8d 81       	ldd	r24, Y+5	; 0x05
    3f86:	9e 81       	ldd	r25, Y+6	; 0x06
    3f88:	00 97       	sbiw	r24, 0x00	; 0
    3f8a:	69 f7       	brne	.-38     	; 0x3f66 <HCLCD_vidSendData+0x1b4>
    3f8c:	14 c0       	rjmp	.+40     	; 0x3fb6 <HCLCD_vidSendData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f90:	78 85       	ldd	r23, Y+8	; 0x08
    3f92:	89 85       	ldd	r24, Y+9	; 0x09
    3f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	cb 01       	movw	r24, r22
    3f9e:	9e 83       	std	Y+6, r25	; 0x06
    3fa0:	8d 83       	std	Y+5, r24	; 0x05
    3fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa6:	9a 83       	std	Y+2, r25	; 0x02
    3fa8:	89 83       	std	Y+1, r24	; 0x01
    3faa:	89 81       	ldd	r24, Y+1	; 0x01
    3fac:	9a 81       	ldd	r25, Y+2	; 0x02
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	f1 f7       	brne	.-4      	; 0x3fae <HCLCD_vidSendData+0x1fc>
    3fb2:	9a 83       	std	Y+2, r25	; 0x02
    3fb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3fb6:	6d 96       	adiw	r28, 0x1d	; 29
    3fb8:	0f b6       	in	r0, 0x3f	; 63
    3fba:	f8 94       	cli
    3fbc:	de bf       	out	0x3e, r29	; 62
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	cd bf       	out	0x3d, r28	; 61
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <HCLCD_vidSendString>:
void HCLCD_vidSendString(const u8* add_pu8String){
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	00 d0       	rcall	.+0      	; 0x3fce <HCLCD_vidSendString+0x6>
    3fce:	0f 92       	push	r0
    3fd0:	cd b7       	in	r28, 0x3d	; 61
    3fd2:	de b7       	in	r29, 0x3e	; 62
    3fd4:	9b 83       	std	Y+3, r25	; 0x03
    3fd6:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i = 0;add_pu8String[i];i++){
    3fd8:	19 82       	std	Y+1, r1	; 0x01
    3fda:	15 c0       	rjmp	.+42     	; 0x4006 <HCLCD_vidSendString+0x3e>
		if(i==SCREEN_WIDTH){
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	80 31       	cpi	r24, 0x10	; 16
    3fe0:	21 f4       	brne	.+8      	; 0x3fea <HCLCD_vidSendString+0x22>
			HCLCD_vidGoTo(0,1);
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	61 e0       	ldi	r22, 0x01	; 1
    3fe6:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <HCLCD_vidGoTo>
		}
		HCLCD_vidSendData(*(add_pu8String+i));
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	28 2f       	mov	r18, r24
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	e2 0f       	add	r30, r18
    3ff8:	f3 1f       	adc	r31, r19
    3ffa:	80 81       	ld	r24, Z
    3ffc:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <HCLCD_vidSendData>
	DIO_VIDSetPinValue(CONTROL_PORT,EN_PIN,LOW);
	_delay_ms(1);

}
void HCLCD_vidSendString(const u8* add_pu8String){
	for(u8 i = 0;add_pu8String[i];i++){
    4000:	89 81       	ldd	r24, Y+1	; 0x01
    4002:	8f 5f       	subi	r24, 0xFF	; 255
    4004:	89 83       	std	Y+1, r24	; 0x01
    4006:	89 81       	ldd	r24, Y+1	; 0x01
    4008:	28 2f       	mov	r18, r24
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	8a 81       	ldd	r24, Y+2	; 0x02
    400e:	9b 81       	ldd	r25, Y+3	; 0x03
    4010:	fc 01       	movw	r30, r24
    4012:	e2 0f       	add	r30, r18
    4014:	f3 1f       	adc	r31, r19
    4016:	80 81       	ld	r24, Z
    4018:	88 23       	and	r24, r24
    401a:	01 f7       	brne	.-64     	; 0x3fdc <HCLCD_vidSendString+0x14>
		if(i==SCREEN_WIDTH){
			HCLCD_vidGoTo(0,1);
		}
		HCLCD_vidSendData(*(add_pu8String+i));
	}
}
    401c:	0f 90       	pop	r0
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	cf 91       	pop	r28
    4024:	df 91       	pop	r29
    4026:	08 95       	ret

00004028 <HCLCD_vidSendNumber>:
void HCLCD_vidSendNumber(s32 cpy_s32Number){
    4028:	df 93       	push	r29
    402a:	cf 93       	push	r28
    402c:	cd b7       	in	r28, 0x3d	; 61
    402e:	de b7       	in	r29, 0x3e	; 62
    4030:	2c 97       	sbiw	r28, 0x0c	; 12
    4032:	0f b6       	in	r0, 0x3f	; 63
    4034:	f8 94       	cli
    4036:	de bf       	out	0x3e, r29	; 62
    4038:	0f be       	out	0x3f, r0	; 63
    403a:	cd bf       	out	0x3d, r28	; 61
    403c:	69 87       	std	Y+9, r22	; 0x09
    403e:	7a 87       	std	Y+10, r23	; 0x0a
    4040:	8b 87       	std	Y+11, r24	; 0x0b
    4042:	9c 87       	std	Y+12, r25	; 0x0c
	if(!cpy_s32Number){
    4044:	89 85       	ldd	r24, Y+9	; 0x09
    4046:	9a 85       	ldd	r25, Y+10	; 0x0a
    4048:	ab 85       	ldd	r26, Y+11	; 0x0b
    404a:	bc 85       	ldd	r27, Y+12	; 0x0c
    404c:	00 97       	sbiw	r24, 0x00	; 0
    404e:	a1 05       	cpc	r26, r1
    4050:	b1 05       	cpc	r27, r1
    4052:	21 f4       	brne	.+8      	; 0x405c <HCLCD_vidSendNumber+0x34>
		HCLCD_vidSendData('0');
    4054:	80 e3       	ldi	r24, 0x30	; 48
    4056:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <HCLCD_vidSendData>
    405a:	18 c0       	rjmp	.+48     	; 0x408c <HCLCD_vidSendNumber+0x64>
	}else if(cpy_s32Number<0){
    405c:	89 85       	ldd	r24, Y+9	; 0x09
    405e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4060:	ab 85       	ldd	r26, Y+11	; 0x0b
    4062:	bc 85       	ldd	r27, Y+12	; 0x0c
    4064:	bb 23       	and	r27, r27
    4066:	94 f4       	brge	.+36     	; 0x408c <HCLCD_vidSendNumber+0x64>
		HCLCD_vidSendData('-');
    4068:	8d e2       	ldi	r24, 0x2D	; 45
    406a:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <HCLCD_vidSendData>
		cpy_s32Number *=-1;
    406e:	89 85       	ldd	r24, Y+9	; 0x09
    4070:	9a 85       	ldd	r25, Y+10	; 0x0a
    4072:	ab 85       	ldd	r26, Y+11	; 0x0b
    4074:	bc 85       	ldd	r27, Y+12	; 0x0c
    4076:	b0 95       	com	r27
    4078:	a0 95       	com	r26
    407a:	90 95       	com	r25
    407c:	81 95       	neg	r24
    407e:	9f 4f       	sbci	r25, 0xFF	; 255
    4080:	af 4f       	sbci	r26, 0xFF	; 255
    4082:	bf 4f       	sbci	r27, 0xFF	; 255
    4084:	89 87       	std	Y+9, r24	; 0x09
    4086:	9a 87       	std	Y+10, r25	; 0x0a
    4088:	ab 87       	std	Y+11, r26	; 0x0b
    408a:	bc 87       	std	Y+12, r27	; 0x0c
	}
	u32 counter=1;
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	a0 e0       	ldi	r26, 0x00	; 0
    4092:	b0 e0       	ldi	r27, 0x00	; 0
    4094:	8d 83       	std	Y+5, r24	; 0x05
    4096:	9e 83       	std	Y+6, r25	; 0x06
    4098:	af 83       	std	Y+7, r26	; 0x07
    409a:	b8 87       	std	Y+8, r27	; 0x08
	s32 numValue = cpy_s32Number;
    409c:	89 85       	ldd	r24, Y+9	; 0x09
    409e:	9a 85       	ldd	r25, Y+10	; 0x0a
    40a0:	ab 85       	ldd	r26, Y+11	; 0x0b
    40a2:	bc 85       	ldd	r27, Y+12	; 0x0c
    40a4:	89 83       	std	Y+1, r24	; 0x01
    40a6:	9a 83       	std	Y+2, r25	; 0x02
    40a8:	ab 83       	std	Y+3, r26	; 0x03
    40aa:	bc 83       	std	Y+4, r27	; 0x04
    40ac:	24 c0       	rjmp	.+72     	; 0x40f6 <HCLCD_vidSendNumber+0xce>
	while(cpy_s32Number){
		cpy_s32Number= cpy_s32Number/10;
    40ae:	89 85       	ldd	r24, Y+9	; 0x09
    40b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b2:	ab 85       	ldd	r26, Y+11	; 0x0b
    40b4:	bc 85       	ldd	r27, Y+12	; 0x0c
    40b6:	2a e0       	ldi	r18, 0x0A	; 10
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	40 e0       	ldi	r20, 0x00	; 0
    40bc:	50 e0       	ldi	r21, 0x00	; 0
    40be:	bc 01       	movw	r22, r24
    40c0:	cd 01       	movw	r24, r26
    40c2:	0e 94 cf 24 	call	0x499e	; 0x499e <__divmodsi4>
    40c6:	da 01       	movw	r26, r20
    40c8:	c9 01       	movw	r24, r18
    40ca:	89 87       	std	Y+9, r24	; 0x09
    40cc:	9a 87       	std	Y+10, r25	; 0x0a
    40ce:	ab 87       	std	Y+11, r26	; 0x0b
    40d0:	bc 87       	std	Y+12, r27	; 0x0c
		counter= counter*10;
    40d2:	8d 81       	ldd	r24, Y+5	; 0x05
    40d4:	9e 81       	ldd	r25, Y+6	; 0x06
    40d6:	af 81       	ldd	r26, Y+7	; 0x07
    40d8:	b8 85       	ldd	r27, Y+8	; 0x08
    40da:	2a e0       	ldi	r18, 0x0A	; 10
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	40 e0       	ldi	r20, 0x00	; 0
    40e0:	50 e0       	ldi	r21, 0x00	; 0
    40e2:	bc 01       	movw	r22, r24
    40e4:	cd 01       	movw	r24, r26
    40e6:	0e 94 82 24 	call	0x4904	; 0x4904 <__mulsi3>
    40ea:	dc 01       	movw	r26, r24
    40ec:	cb 01       	movw	r24, r22
    40ee:	8d 83       	std	Y+5, r24	; 0x05
    40f0:	9e 83       	std	Y+6, r25	; 0x06
    40f2:	af 83       	std	Y+7, r26	; 0x07
    40f4:	b8 87       	std	Y+8, r27	; 0x08
		HCLCD_vidSendData('-');
		cpy_s32Number *=-1;
	}
	u32 counter=1;
	s32 numValue = cpy_s32Number;
	while(cpy_s32Number){
    40f6:	89 85       	ldd	r24, Y+9	; 0x09
    40f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40fa:	ab 85       	ldd	r26, Y+11	; 0x0b
    40fc:	bc 85       	ldd	r27, Y+12	; 0x0c
    40fe:	00 97       	sbiw	r24, 0x00	; 0
    4100:	a1 05       	cpc	r26, r1
    4102:	b1 05       	cpc	r27, r1
    4104:	a1 f6       	brne	.-88     	; 0x40ae <HCLCD_vidSendNumber+0x86>
    4106:	35 c0       	rjmp	.+106    	; 0x4172 <HCLCD_vidSendNumber+0x14a>
		cpy_s32Number= cpy_s32Number/10;
		counter= counter*10;
	}
	while(counter>1){
		counter= counter/10;
    4108:	8d 81       	ldd	r24, Y+5	; 0x05
    410a:	9e 81       	ldd	r25, Y+6	; 0x06
    410c:	af 81       	ldd	r26, Y+7	; 0x07
    410e:	b8 85       	ldd	r27, Y+8	; 0x08
    4110:	2a e0       	ldi	r18, 0x0A	; 10
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	40 e0       	ldi	r20, 0x00	; 0
    4116:	50 e0       	ldi	r21, 0x00	; 0
    4118:	bc 01       	movw	r22, r24
    411a:	cd 01       	movw	r24, r26
    411c:	0e 94 ad 24 	call	0x495a	; 0x495a <__udivmodsi4>
    4120:	da 01       	movw	r26, r20
    4122:	c9 01       	movw	r24, r18
    4124:	8d 83       	std	Y+5, r24	; 0x05
    4126:	9e 83       	std	Y+6, r25	; 0x06
    4128:	af 83       	std	Y+7, r26	; 0x07
    412a:	b8 87       	std	Y+8, r27	; 0x08
		HCLCD_vidSendData((numValue/counter)+'0');
    412c:	89 81       	ldd	r24, Y+1	; 0x01
    412e:	9a 81       	ldd	r25, Y+2	; 0x02
    4130:	ab 81       	ldd	r26, Y+3	; 0x03
    4132:	bc 81       	ldd	r27, Y+4	; 0x04
    4134:	2d 81       	ldd	r18, Y+5	; 0x05
    4136:	3e 81       	ldd	r19, Y+6	; 0x06
    4138:	4f 81       	ldd	r20, Y+7	; 0x07
    413a:	58 85       	ldd	r21, Y+8	; 0x08
    413c:	bc 01       	movw	r22, r24
    413e:	cd 01       	movw	r24, r26
    4140:	0e 94 ad 24 	call	0x495a	; 0x495a <__udivmodsi4>
    4144:	da 01       	movw	r26, r20
    4146:	c9 01       	movw	r24, r18
    4148:	80 5d       	subi	r24, 0xD0	; 208
    414a:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <HCLCD_vidSendData>
		numValue%=counter;
    414e:	89 81       	ldd	r24, Y+1	; 0x01
    4150:	9a 81       	ldd	r25, Y+2	; 0x02
    4152:	ab 81       	ldd	r26, Y+3	; 0x03
    4154:	bc 81       	ldd	r27, Y+4	; 0x04
    4156:	2d 81       	ldd	r18, Y+5	; 0x05
    4158:	3e 81       	ldd	r19, Y+6	; 0x06
    415a:	4f 81       	ldd	r20, Y+7	; 0x07
    415c:	58 85       	ldd	r21, Y+8	; 0x08
    415e:	bc 01       	movw	r22, r24
    4160:	cd 01       	movw	r24, r26
    4162:	0e 94 ad 24 	call	0x495a	; 0x495a <__udivmodsi4>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	89 83       	std	Y+1, r24	; 0x01
    416c:	9a 83       	std	Y+2, r25	; 0x02
    416e:	ab 83       	std	Y+3, r26	; 0x03
    4170:	bc 83       	std	Y+4, r27	; 0x04
	s32 numValue = cpy_s32Number;
	while(cpy_s32Number){
		cpy_s32Number= cpy_s32Number/10;
		counter= counter*10;
	}
	while(counter>1){
    4172:	8d 81       	ldd	r24, Y+5	; 0x05
    4174:	9e 81       	ldd	r25, Y+6	; 0x06
    4176:	af 81       	ldd	r26, Y+7	; 0x07
    4178:	b8 85       	ldd	r27, Y+8	; 0x08
    417a:	82 30       	cpi	r24, 0x02	; 2
    417c:	91 05       	cpc	r25, r1
    417e:	a1 05       	cpc	r26, r1
    4180:	b1 05       	cpc	r27, r1
    4182:	10 f6       	brcc	.-124    	; 0x4108 <HCLCD_vidSendNumber+0xe0>
		counter= counter/10;
		HCLCD_vidSendData((numValue/counter)+'0');
		numValue%=counter;
	}
}
    4184:	2c 96       	adiw	r28, 0x0c	; 12
    4186:	0f b6       	in	r0, 0x3f	; 63
    4188:	f8 94       	cli
    418a:	de bf       	out	0x3e, r29	; 62
    418c:	0f be       	out	0x3f, r0	; 63
    418e:	cd bf       	out	0x3d, r28	; 61
    4190:	cf 91       	pop	r28
    4192:	df 91       	pop	r29
    4194:	08 95       	ret

00004196 <HCLCD_vidSendFloat>:
/*with 3 digit after floated point*/
void HCLCD_vidSendFloat(f32 cpy_f32Float){
    4196:	df 93       	push	r29
    4198:	cf 93       	push	r28
    419a:	cd b7       	in	r28, 0x3d	; 61
    419c:	de b7       	in	r29, 0x3e	; 62
    419e:	28 97       	sbiw	r28, 0x08	; 8
    41a0:	0f b6       	in	r0, 0x3f	; 63
    41a2:	f8 94       	cli
    41a4:	de bf       	out	0x3e, r29	; 62
    41a6:	0f be       	out	0x3f, r0	; 63
    41a8:	cd bf       	out	0x3d, r28	; 61
    41aa:	6d 83       	std	Y+5, r22	; 0x05
    41ac:	7e 83       	std	Y+6, r23	; 0x06
    41ae:	8f 83       	std	Y+7, r24	; 0x07
    41b0:	98 87       	std	Y+8, r25	; 0x08
	HCLCD_vidSendNumber((s32)cpy_f32Float);
    41b2:	6d 81       	ldd	r22, Y+5	; 0x05
    41b4:	7e 81       	ldd	r23, Y+6	; 0x06
    41b6:	8f 81       	ldd	r24, Y+7	; 0x07
    41b8:	98 85       	ldd	r25, Y+8	; 0x08
    41ba:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	bc 01       	movw	r22, r24
    41c4:	cd 01       	movw	r24, r26
    41c6:	0e 94 14 20 	call	0x4028	; 0x4028 <HCLCD_vidSendNumber>
	cpy_f32Float-=(s32)cpy_f32Float;
    41ca:	6d 81       	ldd	r22, Y+5	; 0x05
    41cc:	7e 81       	ldd	r23, Y+6	; 0x06
    41ce:	8f 81       	ldd	r24, Y+7	; 0x07
    41d0:	98 85       	ldd	r25, Y+8	; 0x08
    41d2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	bc 01       	movw	r22, r24
    41dc:	cd 01       	movw	r24, r26
    41de:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    41e2:	9b 01       	movw	r18, r22
    41e4:	ac 01       	movw	r20, r24
    41e6:	6d 81       	ldd	r22, Y+5	; 0x05
    41e8:	7e 81       	ldd	r23, Y+6	; 0x06
    41ea:	8f 81       	ldd	r24, Y+7	; 0x07
    41ec:	98 85       	ldd	r25, Y+8	; 0x08
    41ee:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    41f2:	dc 01       	movw	r26, r24
    41f4:	cb 01       	movw	r24, r22
    41f6:	8d 83       	std	Y+5, r24	; 0x05
    41f8:	9e 83       	std	Y+6, r25	; 0x06
    41fa:	af 83       	std	Y+7, r26	; 0x07
    41fc:	b8 87       	std	Y+8, r27	; 0x08
	HCLCD_vidSendData('.');
    41fe:	8e e2       	ldi	r24, 0x2E	; 46
    4200:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <HCLCD_vidSendData>
	u32 counter = 0;
    4204:	19 82       	std	Y+1, r1	; 0x01
    4206:	1a 82       	std	Y+2, r1	; 0x02
    4208:	1b 82       	std	Y+3, r1	; 0x03
    420a:	1c 82       	std	Y+4, r1	; 0x04
    420c:	40 c0       	rjmp	.+128    	; 0x428e <HCLCD_vidSendFloat+0xf8>
	while(  counter<PERCISION ){
		cpy_f32Float =(cpy_f32Float*10);
    420e:	6d 81       	ldd	r22, Y+5	; 0x05
    4210:	7e 81       	ldd	r23, Y+6	; 0x06
    4212:	8f 81       	ldd	r24, Y+7	; 0x07
    4214:	98 85       	ldd	r25, Y+8	; 0x08
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	40 e2       	ldi	r20, 0x20	; 32
    421c:	51 e4       	ldi	r21, 0x41	; 65
    421e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	8d 83       	std	Y+5, r24	; 0x05
    4228:	9e 83       	std	Y+6, r25	; 0x06
    422a:	af 83       	std	Y+7, r26	; 0x07
    422c:	b8 87       	std	Y+8, r27	; 0x08
		HCLCD_vidSendData('0'+(u8)cpy_f32Float);
    422e:	6d 81       	ldd	r22, Y+5	; 0x05
    4230:	7e 81       	ldd	r23, Y+6	; 0x06
    4232:	8f 81       	ldd	r24, Y+7	; 0x07
    4234:	98 85       	ldd	r25, Y+8	; 0x08
    4236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    423a:	dc 01       	movw	r26, r24
    423c:	cb 01       	movw	r24, r22
    423e:	80 5d       	subi	r24, 0xD0	; 208
    4240:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <HCLCD_vidSendData>
		cpy_f32Float -= (s32)cpy_f32Float;
    4244:	6d 81       	ldd	r22, Y+5	; 0x05
    4246:	7e 81       	ldd	r23, Y+6	; 0x06
    4248:	8f 81       	ldd	r24, Y+7	; 0x07
    424a:	98 85       	ldd	r25, Y+8	; 0x08
    424c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4250:	dc 01       	movw	r26, r24
    4252:	cb 01       	movw	r24, r22
    4254:	bc 01       	movw	r22, r24
    4256:	cd 01       	movw	r24, r26
    4258:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    425c:	9b 01       	movw	r18, r22
    425e:	ac 01       	movw	r20, r24
    4260:	6d 81       	ldd	r22, Y+5	; 0x05
    4262:	7e 81       	ldd	r23, Y+6	; 0x06
    4264:	8f 81       	ldd	r24, Y+7	; 0x07
    4266:	98 85       	ldd	r25, Y+8	; 0x08
    4268:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	8d 83       	std	Y+5, r24	; 0x05
    4272:	9e 83       	std	Y+6, r25	; 0x06
    4274:	af 83       	std	Y+7, r26	; 0x07
    4276:	b8 87       	std	Y+8, r27	; 0x08
		counter++;
    4278:	89 81       	ldd	r24, Y+1	; 0x01
    427a:	9a 81       	ldd	r25, Y+2	; 0x02
    427c:	ab 81       	ldd	r26, Y+3	; 0x03
    427e:	bc 81       	ldd	r27, Y+4	; 0x04
    4280:	01 96       	adiw	r24, 0x01	; 1
    4282:	a1 1d       	adc	r26, r1
    4284:	b1 1d       	adc	r27, r1
    4286:	89 83       	std	Y+1, r24	; 0x01
    4288:	9a 83       	std	Y+2, r25	; 0x02
    428a:	ab 83       	std	Y+3, r26	; 0x03
    428c:	bc 83       	std	Y+4, r27	; 0x04
void HCLCD_vidSendFloat(f32 cpy_f32Float){
	HCLCD_vidSendNumber((s32)cpy_f32Float);
	cpy_f32Float-=(s32)cpy_f32Float;
	HCLCD_vidSendData('.');
	u32 counter = 0;
	while(  counter<PERCISION ){
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	9a 81       	ldd	r25, Y+2	; 0x02
    4292:	ab 81       	ldd	r26, Y+3	; 0x03
    4294:	bc 81       	ldd	r27, Y+4	; 0x04
    4296:	84 30       	cpi	r24, 0x04	; 4
    4298:	91 05       	cpc	r25, r1
    429a:	a1 05       	cpc	r26, r1
    429c:	b1 05       	cpc	r27, r1
    429e:	08 f4       	brcc	.+2      	; 0x42a2 <HCLCD_vidSendFloat+0x10c>
    42a0:	b6 cf       	rjmp	.-148    	; 0x420e <HCLCD_vidSendFloat+0x78>
		cpy_f32Float =(cpy_f32Float*10);
		HCLCD_vidSendData('0'+(u8)cpy_f32Float);
		cpy_f32Float -= (s32)cpy_f32Float;
		counter++;
	}
}
    42a2:	28 96       	adiw	r28, 0x08	; 8
    42a4:	0f b6       	in	r0, 0x3f	; 63
    42a6:	f8 94       	cli
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	cd bf       	out	0x3d, r28	; 61
    42ae:	cf 91       	pop	r28
    42b0:	df 91       	pop	r29
    42b2:	08 95       	ret

000042b4 <HCLCD_vidGoTo>:
void HCLCD_vidGoTo(u8 cpy_u8X, u8 cpy_u8Y){
    42b4:	df 93       	push	r29
    42b6:	cf 93       	push	r28
    42b8:	00 d0       	rcall	.+0      	; 0x42ba <HCLCD_vidGoTo+0x6>
    42ba:	cd b7       	in	r28, 0x3d	; 61
    42bc:	de b7       	in	r29, 0x3e	; 62
    42be:	89 83       	std	Y+1, r24	; 0x01
    42c0:	6a 83       	std	Y+2, r22	; 0x02
	setBit(cpy_u8X,7);
    42c2:	89 81       	ldd	r24, Y+1	; 0x01
    42c4:	80 68       	ori	r24, 0x80	; 128
    42c6:	89 83       	std	Y+1, r24	; 0x01
	if(cpy_u8Y!=0){
    42c8:	8a 81       	ldd	r24, Y+2	; 0x02
    42ca:	88 23       	and	r24, r24
    42cc:	19 f0       	breq	.+6      	; 0x42d4 <HCLCD_vidGoTo+0x20>
		setBit(cpy_u8X,6);
    42ce:	89 81       	ldd	r24, Y+1	; 0x01
    42d0:	80 64       	ori	r24, 0x40	; 64
    42d2:	89 83       	std	Y+1, r24	; 0x01
	}
	HCLCD_vidSendCommand(cpy_u8X);
    42d4:	89 81       	ldd	r24, Y+1	; 0x01
    42d6:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <HCLCD_vidSendCommand>
}
    42da:	0f 90       	pop	r0
    42dc:	0f 90       	pop	r0
    42de:	cf 91       	pop	r28
    42e0:	df 91       	pop	r29
    42e2:	08 95       	ret

000042e4 <HCLCD_vidClear>:
void HCLCD_vidClear(){
    42e4:	df 93       	push	r29
    42e6:	cf 93       	push	r28
    42e8:	cd b7       	in	r28, 0x3d	; 61
    42ea:	de b7       	in	r29, 0x3e	; 62
    42ec:	2e 97       	sbiw	r28, 0x0e	; 14
    42ee:	0f b6       	in	r0, 0x3f	; 63
    42f0:	f8 94       	cli
    42f2:	de bf       	out	0x3e, r29	; 62
    42f4:	0f be       	out	0x3f, r0	; 63
    42f6:	cd bf       	out	0x3d, r28	; 61
	HCLCD_vidSendCommand(0x01);
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <HCLCD_vidSendCommand>
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	a0 e0       	ldi	r26, 0x00	; 0
    4304:	b0 e4       	ldi	r27, 0x40	; 64
    4306:	8b 87       	std	Y+11, r24	; 0x0b
    4308:	9c 87       	std	Y+12, r25	; 0x0c
    430a:	ad 87       	std	Y+13, r26	; 0x0d
    430c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    430e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4310:	7c 85       	ldd	r23, Y+12	; 0x0c
    4312:	8d 85       	ldd	r24, Y+13	; 0x0d
    4314:	9e 85       	ldd	r25, Y+14	; 0x0e
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	4a ef       	ldi	r20, 0xFA	; 250
    431c:	54 e4       	ldi	r21, 0x44	; 68
    431e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	8f 83       	std	Y+7, r24	; 0x07
    4328:	98 87       	std	Y+8, r25	; 0x08
    432a:	a9 87       	std	Y+9, r26	; 0x09
    432c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    432e:	6f 81       	ldd	r22, Y+7	; 0x07
    4330:	78 85       	ldd	r23, Y+8	; 0x08
    4332:	89 85       	ldd	r24, Y+9	; 0x09
    4334:	9a 85       	ldd	r25, Y+10	; 0x0a
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	40 e8       	ldi	r20, 0x80	; 128
    433c:	5f e3       	ldi	r21, 0x3F	; 63
    433e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4342:	88 23       	and	r24, r24
    4344:	2c f4       	brge	.+10     	; 0x4350 <HCLCD_vidClear+0x6c>
		__ticks = 1;
    4346:	81 e0       	ldi	r24, 0x01	; 1
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	9e 83       	std	Y+6, r25	; 0x06
    434c:	8d 83       	std	Y+5, r24	; 0x05
    434e:	3f c0       	rjmp	.+126    	; 0x43ce <HCLCD_vidClear+0xea>
	else if (__tmp > 65535)
    4350:	6f 81       	ldd	r22, Y+7	; 0x07
    4352:	78 85       	ldd	r23, Y+8	; 0x08
    4354:	89 85       	ldd	r24, Y+9	; 0x09
    4356:	9a 85       	ldd	r25, Y+10	; 0x0a
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	3f ef       	ldi	r19, 0xFF	; 255
    435c:	4f e7       	ldi	r20, 0x7F	; 127
    435e:	57 e4       	ldi	r21, 0x47	; 71
    4360:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4364:	18 16       	cp	r1, r24
    4366:	4c f5       	brge	.+82     	; 0x43ba <HCLCD_vidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4368:	6b 85       	ldd	r22, Y+11	; 0x0b
    436a:	7c 85       	ldd	r23, Y+12	; 0x0c
    436c:	8d 85       	ldd	r24, Y+13	; 0x0d
    436e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e2       	ldi	r20, 0x20	; 32
    4376:	51 e4       	ldi	r21, 0x41	; 65
    4378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    437c:	dc 01       	movw	r26, r24
    437e:	cb 01       	movw	r24, r22
    4380:	bc 01       	movw	r22, r24
    4382:	cd 01       	movw	r24, r26
    4384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	9e 83       	std	Y+6, r25	; 0x06
    438e:	8d 83       	std	Y+5, r24	; 0x05
    4390:	0f c0       	rjmp	.+30     	; 0x43b0 <HCLCD_vidClear+0xcc>
    4392:	88 ec       	ldi	r24, 0xC8	; 200
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	9c 83       	std	Y+4, r25	; 0x04
    4398:	8b 83       	std	Y+3, r24	; 0x03
    439a:	8b 81       	ldd	r24, Y+3	; 0x03
    439c:	9c 81       	ldd	r25, Y+4	; 0x04
    439e:	01 97       	sbiw	r24, 0x01	; 1
    43a0:	f1 f7       	brne	.-4      	; 0x439e <HCLCD_vidClear+0xba>
    43a2:	9c 83       	std	Y+4, r25	; 0x04
    43a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43a6:	8d 81       	ldd	r24, Y+5	; 0x05
    43a8:	9e 81       	ldd	r25, Y+6	; 0x06
    43aa:	01 97       	sbiw	r24, 0x01	; 1
    43ac:	9e 83       	std	Y+6, r25	; 0x06
    43ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43b0:	8d 81       	ldd	r24, Y+5	; 0x05
    43b2:	9e 81       	ldd	r25, Y+6	; 0x06
    43b4:	00 97       	sbiw	r24, 0x00	; 0
    43b6:	69 f7       	brne	.-38     	; 0x4392 <HCLCD_vidClear+0xae>
    43b8:	14 c0       	rjmp	.+40     	; 0x43e2 <HCLCD_vidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ba:	6f 81       	ldd	r22, Y+7	; 0x07
    43bc:	78 85       	ldd	r23, Y+8	; 0x08
    43be:	89 85       	ldd	r24, Y+9	; 0x09
    43c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c6:	dc 01       	movw	r26, r24
    43c8:	cb 01       	movw	r24, r22
    43ca:	9e 83       	std	Y+6, r25	; 0x06
    43cc:	8d 83       	std	Y+5, r24	; 0x05
    43ce:	8d 81       	ldd	r24, Y+5	; 0x05
    43d0:	9e 81       	ldd	r25, Y+6	; 0x06
    43d2:	9a 83       	std	Y+2, r25	; 0x02
    43d4:	89 83       	std	Y+1, r24	; 0x01
    43d6:	89 81       	ldd	r24, Y+1	; 0x01
    43d8:	9a 81       	ldd	r25, Y+2	; 0x02
    43da:	01 97       	sbiw	r24, 0x01	; 1
    43dc:	f1 f7       	brne	.-4      	; 0x43da <HCLCD_vidClear+0xf6>
    43de:	9a 83       	std	Y+2, r25	; 0x02
    43e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    43e2:	2e 96       	adiw	r28, 0x0e	; 14
    43e4:	0f b6       	in	r0, 0x3f	; 63
    43e6:	f8 94       	cli
    43e8:	de bf       	out	0x3e, r29	; 62
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	cd bf       	out	0x3d, r28	; 61
    43ee:	cf 91       	pop	r28
    43f0:	df 91       	pop	r29
    43f2:	08 95       	ret

000043f4 <HCLCD_vidSendSpecialChar>:
void HCLCD_vidSendSpecialChar(const u8* arr_u8Char, u8 cpy_u8BlockNumber){
    43f4:	df 93       	push	r29
    43f6:	cf 93       	push	r28
    43f8:	00 d0       	rcall	.+0      	; 0x43fa <HCLCD_vidSendSpecialChar+0x6>
    43fa:	00 d0       	rcall	.+0      	; 0x43fc <HCLCD_vidSendSpecialChar+0x8>
    43fc:	cd b7       	in	r28, 0x3d	; 61
    43fe:	de b7       	in	r29, 0x3e	; 62
    4400:	9b 83       	std	Y+3, r25	; 0x03
    4402:	8a 83       	std	Y+2, r24	; 0x02
    4404:	6c 83       	std	Y+4, r22	; 0x04
	HCLCD_vidSendCommand(0x40+(cpy_u8BlockNumber*8));
    4406:	8c 81       	ldd	r24, Y+4	; 0x04
    4408:	88 2f       	mov	r24, r24
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	08 96       	adiw	r24, 0x08	; 8
    440e:	88 0f       	add	r24, r24
    4410:	99 1f       	adc	r25, r25
    4412:	88 0f       	add	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	88 0f       	add	r24, r24
    4418:	99 1f       	adc	r25, r25
    441a:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <HCLCD_vidSendCommand>
	for(u8 i=0;i<8;i++)
    441e:	19 82       	std	Y+1, r1	; 0x01
    4420:	0e c0       	rjmp	.+28     	; 0x443e <HCLCD_vidSendSpecialChar+0x4a>
	{
     	 HCLCD_vidSendData(arr_u8Char[i]);
    4422:	89 81       	ldd	r24, Y+1	; 0x01
    4424:	28 2f       	mov	r18, r24
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	8a 81       	ldd	r24, Y+2	; 0x02
    442a:	9b 81       	ldd	r25, Y+3	; 0x03
    442c:	fc 01       	movw	r30, r24
    442e:	e2 0f       	add	r30, r18
    4430:	f3 1f       	adc	r31, r19
    4432:	80 81       	ld	r24, Z
    4434:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <HCLCD_vidSendData>
	HCLCD_vidSendCommand(0x01);
	_delay_ms(2);
}
void HCLCD_vidSendSpecialChar(const u8* arr_u8Char, u8 cpy_u8BlockNumber){
	HCLCD_vidSendCommand(0x40+(cpy_u8BlockNumber*8));
	for(u8 i=0;i<8;i++)
    4438:	89 81       	ldd	r24, Y+1	; 0x01
    443a:	8f 5f       	subi	r24, 0xFF	; 255
    443c:	89 83       	std	Y+1, r24	; 0x01
    443e:	89 81       	ldd	r24, Y+1	; 0x01
    4440:	88 30       	cpi	r24, 0x08	; 8
    4442:	78 f3       	brcs	.-34     	; 0x4422 <HCLCD_vidSendSpecialChar+0x2e>
	{
     	 HCLCD_vidSendData(arr_u8Char[i]);
	}
	HCLCD_vidSendCommand(0x80);
    4444:	80 e8       	ldi	r24, 0x80	; 128
    4446:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <HCLCD_vidSendCommand>
	HCLCD_vidSendCommand(0b00000010);
    444a:	82 e0       	ldi	r24, 0x02	; 2
    444c:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <HCLCD_vidSendCommand>



}
    4450:	0f 90       	pop	r0
    4452:	0f 90       	pop	r0
    4454:	0f 90       	pop	r0
    4456:	0f 90       	pop	r0
    4458:	cf 91       	pop	r28
    445a:	df 91       	pop	r29
    445c:	08 95       	ret

0000445e <HKEYPAD_vidinit>:
#include "../../LIB/math/datatypes.h"
#include "../../MCAL/dio/dio.h"
#include "keypad.h"
#include "avr/delay.h"
void HKEYPAD_vidinit()
{
    445e:	df 93       	push	r29
    4460:	cf 93       	push	r28
    4462:	cd b7       	in	r28, 0x3d	; 61
    4464:	de b7       	in	r29, 0x3e	; 62
	DIO_VIDSetPortDirection(PORT_NUM,0x0F);
    4466:	82 e4       	ldi	r24, 0x42	; 66
    4468:	6f e0       	ldi	r22, 0x0F	; 15
    446a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <DIO_VIDSetPortDirection>
	DIO_VIDSetPortValue(PORT_NUM,0x7F);
    446e:	82 e4       	ldi	r24, 0x42	; 66
    4470:	6f e7       	ldi	r22, 0x7F	; 127
    4472:	0e 94 11 17 	call	0x2e22	; 0x2e22 <DIO_VIDSetPortValue>
}
    4476:	cf 91       	pop	r28
    4478:	df 91       	pop	r29
    447a:	08 95       	ret

0000447c <HKEYPAD_u8getPressedValue>:
u8 HKEYPAD_u8getPressedValue(){
    447c:	df 93       	push	r29
    447e:	cf 93       	push	r28
    4480:	cd b7       	in	r28, 0x3d	; 61
    4482:	de b7       	in	r29, 0x3e	; 62
    4484:	a3 97       	sbiw	r28, 0x23	; 35
    4486:	0f b6       	in	r0, 0x3f	; 63
    4488:	f8 94       	cli
    448a:	de bf       	out	0x3e, r29	; 62
    448c:	0f be       	out	0x3f, r0	; 63
    448e:	cd bf       	out	0x3d, r28	; 61
	u8 key ='+';
    4490:	8b e2       	ldi	r24, 0x2B	; 43
    4492:	89 8b       	std	Y+17, r24	; 0x11
	u8 keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
    4494:	ce 01       	movw	r24, r28
    4496:	42 96       	adiw	r24, 0x12	; 18
    4498:	98 a3       	std	Y+32, r25	; 0x20
    449a:	8f 8f       	std	Y+31, r24	; 0x1f
    449c:	e1 e3       	ldi	r30, 0x31	; 49
    449e:	f3 e0       	ldi	r31, 0x03	; 3
    44a0:	fa a3       	std	Y+34, r31	; 0x22
    44a2:	e9 a3       	std	Y+33, r30	; 0x21
    44a4:	fc e0       	ldi	r31, 0x0C	; 12
    44a6:	fb a3       	std	Y+35, r31	; 0x23
    44a8:	e9 a1       	ldd	r30, Y+33	; 0x21
    44aa:	fa a1       	ldd	r31, Y+34	; 0x22
    44ac:	00 80       	ld	r0, Z
    44ae:	89 a1       	ldd	r24, Y+33	; 0x21
    44b0:	9a a1       	ldd	r25, Y+34	; 0x22
    44b2:	01 96       	adiw	r24, 0x01	; 1
    44b4:	9a a3       	std	Y+34, r25	; 0x22
    44b6:	89 a3       	std	Y+33, r24	; 0x21
    44b8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    44ba:	f8 a1       	ldd	r31, Y+32	; 0x20
    44bc:	00 82       	st	Z, r0
    44be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44c0:	98 a1       	ldd	r25, Y+32	; 0x20
    44c2:	01 96       	adiw	r24, 0x01	; 1
    44c4:	98 a3       	std	Y+32, r25	; 0x20
    44c6:	8f 8f       	std	Y+31, r24	; 0x1f
    44c8:	9b a1       	ldd	r25, Y+35	; 0x23
    44ca:	91 50       	subi	r25, 0x01	; 1
    44cc:	9b a3       	std	Y+35, r25	; 0x23
    44ce:	eb a1       	ldd	r30, Y+35	; 0x23
    44d0:	ee 23       	and	r30, r30
    44d2:	51 f7       	brne	.-44     	; 0x44a8 <HKEYPAD_u8getPressedValue+0x2c>
	u8 i , j;
	for( i=0; i<4; i++){
    44d4:	18 8a       	std	Y+16, r1	; 0x10
    44d6:	ae c0       	rjmp	.+348    	; 0x4634 <HKEYPAD_u8getPressedValue+0x1b8>
		DIO_VIDSetPinValue(PORT_NUM,i,LOW);
    44d8:	82 e4       	ldi	r24, 0x42	; 66
    44da:	68 89       	ldd	r22, Y+16	; 0x10
    44dc:	40 e0       	ldi	r20, 0x00	; 0
    44de:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
		for(j=4; j<7; j++){
    44e2:	84 e0       	ldi	r24, 0x04	; 4
    44e4:	8f 87       	std	Y+15, r24	; 0x0f
    44e6:	9a c0       	rjmp	.+308    	; 0x461c <HKEYPAD_u8getPressedValue+0x1a0>
			u8 buffer=0;
    44e8:	1e 8e       	std	Y+30, r1	; 0x1e
			DIO_VIDgetPinDirection(PORT_NUM,j,&buffer);
    44ea:	9e 01       	movw	r18, r28
    44ec:	22 5e       	subi	r18, 0xE2	; 226
    44ee:	3f 4f       	sbci	r19, 0xFF	; 255
    44f0:	82 e4       	ldi	r24, 0x42	; 66
    44f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    44f4:	a9 01       	movw	r20, r18
    44f6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <DIO_VIDgetPinDirection>
			if(buffer!=1){
    44fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    44fc:	81 30       	cpi	r24, 0x01	; 1
    44fe:	c9 f0       	breq	.+50     	; 0x4532 <HKEYPAD_u8getPressedValue+0xb6>
				key = keys[i][j-4];
    4500:	88 89       	ldd	r24, Y+16	; 0x10
    4502:	28 2f       	mov	r18, r24
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	8f 85       	ldd	r24, Y+15	; 0x0f
    4508:	88 2f       	mov	r24, r24
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	ac 01       	movw	r20, r24
    450e:	44 50       	subi	r20, 0x04	; 4
    4510:	50 40       	sbci	r21, 0x00	; 0
    4512:	c9 01       	movw	r24, r18
    4514:	88 0f       	add	r24, r24
    4516:	99 1f       	adc	r25, r25
    4518:	82 0f       	add	r24, r18
    451a:	93 1f       	adc	r25, r19
    451c:	9e 01       	movw	r18, r28
    451e:	2f 5f       	subi	r18, 0xFF	; 255
    4520:	3f 4f       	sbci	r19, 0xFF	; 255
    4522:	82 0f       	add	r24, r18
    4524:	93 1f       	adc	r25, r19
    4526:	84 0f       	add	r24, r20
    4528:	95 1f       	adc	r25, r21
    452a:	fc 01       	movw	r30, r24
    452c:	71 96       	adiw	r30, 0x11	; 17
    452e:	80 81       	ld	r24, Z
    4530:	89 8b       	std	Y+17, r24	; 0x11
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	a0 ea       	ldi	r26, 0xA0	; 160
    4538:	b1 e4       	ldi	r27, 0x41	; 65
    453a:	8b 87       	std	Y+11, r24	; 0x0b
    453c:	9c 87       	std	Y+12, r25	; 0x0c
    453e:	ad 87       	std	Y+13, r26	; 0x0d
    4540:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4542:	6b 85       	ldd	r22, Y+11	; 0x0b
    4544:	7c 85       	ldd	r23, Y+12	; 0x0c
    4546:	8d 85       	ldd	r24, Y+13	; 0x0d
    4548:	9e 85       	ldd	r25, Y+14	; 0x0e
    454a:	20 e0       	ldi	r18, 0x00	; 0
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	4a ef       	ldi	r20, 0xFA	; 250
    4550:	54 e4       	ldi	r21, 0x44	; 68
    4552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4556:	dc 01       	movw	r26, r24
    4558:	cb 01       	movw	r24, r22
    455a:	8f 83       	std	Y+7, r24	; 0x07
    455c:	98 87       	std	Y+8, r25	; 0x08
    455e:	a9 87       	std	Y+9, r26	; 0x09
    4560:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4562:	6f 81       	ldd	r22, Y+7	; 0x07
    4564:	78 85       	ldd	r23, Y+8	; 0x08
    4566:	89 85       	ldd	r24, Y+9	; 0x09
    4568:	9a 85       	ldd	r25, Y+10	; 0x0a
    456a:	20 e0       	ldi	r18, 0x00	; 0
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	40 e8       	ldi	r20, 0x80	; 128
    4570:	5f e3       	ldi	r21, 0x3F	; 63
    4572:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4576:	88 23       	and	r24, r24
    4578:	2c f4       	brge	.+10     	; 0x4584 <HKEYPAD_u8getPressedValue+0x108>
		__ticks = 1;
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	9e 83       	std	Y+6, r25	; 0x06
    4580:	8d 83       	std	Y+5, r24	; 0x05
    4582:	3f c0       	rjmp	.+126    	; 0x4602 <HKEYPAD_u8getPressedValue+0x186>
	else if (__tmp > 65535)
    4584:	6f 81       	ldd	r22, Y+7	; 0x07
    4586:	78 85       	ldd	r23, Y+8	; 0x08
    4588:	89 85       	ldd	r24, Y+9	; 0x09
    458a:	9a 85       	ldd	r25, Y+10	; 0x0a
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	3f ef       	ldi	r19, 0xFF	; 255
    4590:	4f e7       	ldi	r20, 0x7F	; 127
    4592:	57 e4       	ldi	r21, 0x47	; 71
    4594:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4598:	18 16       	cp	r1, r24
    459a:	4c f5       	brge	.+82     	; 0x45ee <HKEYPAD_u8getPressedValue+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    459c:	6b 85       	ldd	r22, Y+11	; 0x0b
    459e:	7c 85       	ldd	r23, Y+12	; 0x0c
    45a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    45a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e2       	ldi	r20, 0x20	; 32
    45aa:	51 e4       	ldi	r21, 0x41	; 65
    45ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	bc 01       	movw	r22, r24
    45b6:	cd 01       	movw	r24, r26
    45b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	9e 83       	std	Y+6, r25	; 0x06
    45c2:	8d 83       	std	Y+5, r24	; 0x05
    45c4:	0f c0       	rjmp	.+30     	; 0x45e4 <HKEYPAD_u8getPressedValue+0x168>
    45c6:	88 ec       	ldi	r24, 0xC8	; 200
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	9c 83       	std	Y+4, r25	; 0x04
    45cc:	8b 83       	std	Y+3, r24	; 0x03
    45ce:	8b 81       	ldd	r24, Y+3	; 0x03
    45d0:	9c 81       	ldd	r25, Y+4	; 0x04
    45d2:	01 97       	sbiw	r24, 0x01	; 1
    45d4:	f1 f7       	brne	.-4      	; 0x45d2 <HKEYPAD_u8getPressedValue+0x156>
    45d6:	9c 83       	std	Y+4, r25	; 0x04
    45d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45da:	8d 81       	ldd	r24, Y+5	; 0x05
    45dc:	9e 81       	ldd	r25, Y+6	; 0x06
    45de:	01 97       	sbiw	r24, 0x01	; 1
    45e0:	9e 83       	std	Y+6, r25	; 0x06
    45e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45e4:	8d 81       	ldd	r24, Y+5	; 0x05
    45e6:	9e 81       	ldd	r25, Y+6	; 0x06
    45e8:	00 97       	sbiw	r24, 0x00	; 0
    45ea:	69 f7       	brne	.-38     	; 0x45c6 <HKEYPAD_u8getPressedValue+0x14a>
    45ec:	14 c0       	rjmp	.+40     	; 0x4616 <HKEYPAD_u8getPressedValue+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ee:	6f 81       	ldd	r22, Y+7	; 0x07
    45f0:	78 85       	ldd	r23, Y+8	; 0x08
    45f2:	89 85       	ldd	r24, Y+9	; 0x09
    45f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	9e 83       	std	Y+6, r25	; 0x06
    4600:	8d 83       	std	Y+5, r24	; 0x05
    4602:	8d 81       	ldd	r24, Y+5	; 0x05
    4604:	9e 81       	ldd	r25, Y+6	; 0x06
    4606:	9a 83       	std	Y+2, r25	; 0x02
    4608:	89 83       	std	Y+1, r24	; 0x01
    460a:	89 81       	ldd	r24, Y+1	; 0x01
    460c:	9a 81       	ldd	r25, Y+2	; 0x02
    460e:	01 97       	sbiw	r24, 0x01	; 1
    4610:	f1 f7       	brne	.-4      	; 0x460e <HKEYPAD_u8getPressedValue+0x192>
    4612:	9a 83       	std	Y+2, r25	; 0x02
    4614:	89 83       	std	Y+1, r24	; 0x01
	u8 key ='+';
	u8 keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
	u8 i , j;
	for( i=0; i<4; i++){
		DIO_VIDSetPinValue(PORT_NUM,i,LOW);
		for(j=4; j<7; j++){
    4616:	8f 85       	ldd	r24, Y+15	; 0x0f
    4618:	8f 5f       	subi	r24, 0xFF	; 255
    461a:	8f 87       	std	Y+15, r24	; 0x0f
    461c:	8f 85       	ldd	r24, Y+15	; 0x0f
    461e:	87 30       	cpi	r24, 0x07	; 7
    4620:	08 f4       	brcc	.+2      	; 0x4624 <HKEYPAD_u8getPressedValue+0x1a8>
    4622:	62 cf       	rjmp	.-316    	; 0x44e8 <HKEYPAD_u8getPressedValue+0x6c>
				key = keys[i][j-4];
			}
			_delay_ms(20);
		}

		DIO_VIDSetPinValue(PORT_NUM,i,HIGH);
    4624:	82 e4       	ldi	r24, 0x42	; 66
    4626:	68 89       	ldd	r22, Y+16	; 0x10
    4628:	41 e0       	ldi	r20, 0x01	; 1
    462a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
}
u8 HKEYPAD_u8getPressedValue(){
	u8 key ='+';
	u8 keys[4][3]={{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
	u8 i , j;
	for( i=0; i<4; i++){
    462e:	88 89       	ldd	r24, Y+16	; 0x10
    4630:	8f 5f       	subi	r24, 0xFF	; 255
    4632:	88 8b       	std	Y+16, r24	; 0x10
    4634:	88 89       	ldd	r24, Y+16	; 0x10
    4636:	84 30       	cpi	r24, 0x04	; 4
    4638:	08 f4       	brcc	.+2      	; 0x463c <HKEYPAD_u8getPressedValue+0x1c0>
    463a:	4e cf       	rjmp	.-356    	; 0x44d8 <HKEYPAD_u8getPressedValue+0x5c>
			_delay_ms(20);
		}

		DIO_VIDSetPinValue(PORT_NUM,i,HIGH);
	}
	return key;
    463c:	89 89       	ldd	r24, Y+17	; 0x11
}
    463e:	a3 96       	adiw	r28, 0x23	; 35
    4640:	0f b6       	in	r0, 0x3f	; 63
    4642:	f8 94       	cli
    4644:	de bf       	out	0x3e, r29	; 62
    4646:	0f be       	out	0x3f, r0	; 63
    4648:	cd bf       	out	0x3d, r28	; 61
    464a:	cf 91       	pop	r28
    464c:	df 91       	pop	r29
    464e:	08 95       	ret

00004650 <HKEYPAD_u8getCharecterValue>:
u8 HKEYPAD_u8getCharecterValue(){
    4650:	df 93       	push	r29
    4652:	cf 93       	push	r28
    4654:	cd b7       	in	r28, 0x3d	; 61
    4656:	de b7       	in	r29, 0x3e	; 62
    4658:	a7 97       	sbiw	r28, 0x27	; 39
    465a:	0f b6       	in	r0, 0x3f	; 63
    465c:	f8 94       	cli
    465e:	de bf       	out	0x3e, r29	; 62
    4660:	0f be       	out	0x3f, r0	; 63
    4662:	cd bf       	out	0x3d, r28	; 61
	u8 key =  '+';
    4664:	8b e2       	ldi	r24, 0x2B	; 43
    4666:	8b 8b       	std	Y+19, r24	; 0x13
	u8 bufferData = '+';
    4668:	8b e2       	ldi	r24, 0x2B	; 43
    466a:	8a 8b       	std	Y+18, r24	; 0x12
	u8 keys[4][3]={{'a','d','g'},{'j','m','p'},{'s','v','y'},{'*','0','#'}};
    466c:	ce 01       	movw	r24, r28
    466e:	44 96       	adiw	r24, 0x14	; 20
    4670:	9c a3       	std	Y+36, r25	; 0x24
    4672:	8b a3       	std	Y+35, r24	; 0x23
    4674:	ed e3       	ldi	r30, 0x3D	; 61
    4676:	f3 e0       	ldi	r31, 0x03	; 3
    4678:	fe a3       	std	Y+38, r31	; 0x26
    467a:	ed a3       	std	Y+37, r30	; 0x25
    467c:	fc e0       	ldi	r31, 0x0C	; 12
    467e:	ff a3       	std	Y+39, r31	; 0x27
    4680:	ed a1       	ldd	r30, Y+37	; 0x25
    4682:	fe a1       	ldd	r31, Y+38	; 0x26
    4684:	00 80       	ld	r0, Z
    4686:	8d a1       	ldd	r24, Y+37	; 0x25
    4688:	9e a1       	ldd	r25, Y+38	; 0x26
    468a:	01 96       	adiw	r24, 0x01	; 1
    468c:	9e a3       	std	Y+38, r25	; 0x26
    468e:	8d a3       	std	Y+37, r24	; 0x25
    4690:	eb a1       	ldd	r30, Y+35	; 0x23
    4692:	fc a1       	ldd	r31, Y+36	; 0x24
    4694:	00 82       	st	Z, r0
    4696:	8b a1       	ldd	r24, Y+35	; 0x23
    4698:	9c a1       	ldd	r25, Y+36	; 0x24
    469a:	01 96       	adiw	r24, 0x01	; 1
    469c:	9c a3       	std	Y+36, r25	; 0x24
    469e:	8b a3       	std	Y+35, r24	; 0x23
    46a0:	9f a1       	ldd	r25, Y+39	; 0x27
    46a2:	91 50       	subi	r25, 0x01	; 1
    46a4:	9f a3       	std	Y+39, r25	; 0x27
    46a6:	ef a1       	ldd	r30, Y+39	; 0x27
    46a8:	ee 23       	and	r30, r30
    46aa:	51 f7       	brne	.-44     	; 0x4680 <HKEYPAD_u8getCharecterValue+0x30>
	u8 i , j, k =0;
    46ac:	1f 86       	std	Y+15, r1	; 0x0f
    46ae:	f6 c0       	rjmp	.+492    	; 0x489c <HKEYPAD_u8getCharecterValue+0x24c>
	while( key!='0' && k<3 ){
		for( i=0; i<4; i++){
    46b0:	19 8a       	std	Y+17, r1	; 0x11
    46b2:	f0 c0       	rjmp	.+480    	; 0x4894 <HKEYPAD_u8getCharecterValue+0x244>
			DIO_VIDSetPinValue(PORT_NUM,i,LOW);
    46b4:	82 e4       	ldi	r24, 0x42	; 66
    46b6:	69 89       	ldd	r22, Y+17	; 0x11
    46b8:	40 e0       	ldi	r20, 0x00	; 0
    46ba:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
			for(j=4; j<7; j++){
    46be:	84 e0       	ldi	r24, 0x04	; 4
    46c0:	88 8b       	std	Y+16, r24	; 0x10
    46c2:	dc c0       	rjmp	.+440    	; 0x487c <HKEYPAD_u8getCharecterValue+0x22c>
				u8 buffer=0;
    46c4:	18 a2       	std	Y+32, r1	; 0x20
				DIO_VIDgetPinDirection(PORT_NUM,j,&buffer);
    46c6:	9e 01       	movw	r18, r28
    46c8:	20 5e       	subi	r18, 0xE0	; 224
    46ca:	3f 4f       	sbci	r19, 0xFF	; 255
    46cc:	82 e4       	ldi	r24, 0x42	; 66
    46ce:	68 89       	ldd	r22, Y+16	; 0x10
    46d0:	a9 01       	movw	r20, r18
    46d2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <DIO_VIDgetPinDirection>
				if(buffer!=1){
    46d6:	88 a1       	ldd	r24, Y+32	; 0x20
    46d8:	81 30       	cpi	r24, 0x01	; 1
    46da:	09 f4       	brne	.+2      	; 0x46de <HKEYPAD_u8getCharecterValue+0x8e>
    46dc:	5a c0       	rjmp	.+180    	; 0x4792 <HKEYPAD_u8getCharecterValue+0x142>
					key = keys[i][j-4];
    46de:	89 89       	ldd	r24, Y+17	; 0x11
    46e0:	28 2f       	mov	r18, r24
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	88 89       	ldd	r24, Y+16	; 0x10
    46e6:	88 2f       	mov	r24, r24
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	ac 01       	movw	r20, r24
    46ec:	44 50       	subi	r20, 0x04	; 4
    46ee:	50 40       	sbci	r21, 0x00	; 0
    46f0:	c9 01       	movw	r24, r18
    46f2:	88 0f       	add	r24, r24
    46f4:	99 1f       	adc	r25, r25
    46f6:	82 0f       	add	r24, r18
    46f8:	93 1f       	adc	r25, r19
    46fa:	9e 01       	movw	r18, r28
    46fc:	2f 5f       	subi	r18, 0xFF	; 255
    46fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4700:	82 0f       	add	r24, r18
    4702:	93 1f       	adc	r25, r19
    4704:	84 0f       	add	r24, r20
    4706:	95 1f       	adc	r25, r21
    4708:	fc 01       	movw	r30, r24
    470a:	73 96       	adiw	r30, 0x13	; 19
    470c:	80 81       	ld	r24, Z
    470e:	8b 8b       	std	Y+19, r24	; 0x13
					if(bufferData == '+'){
    4710:	8a 89       	ldd	r24, Y+18	; 0x12
    4712:	8b 32       	cpi	r24, 0x2B	; 43
    4714:	c9 f4       	brne	.+50     	; 0x4748 <HKEYPAD_u8getCharecterValue+0xf8>
						bufferData = keys[i][j-4];
    4716:	89 89       	ldd	r24, Y+17	; 0x11
    4718:	28 2f       	mov	r18, r24
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	88 89       	ldd	r24, Y+16	; 0x10
    471e:	88 2f       	mov	r24, r24
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	ac 01       	movw	r20, r24
    4724:	44 50       	subi	r20, 0x04	; 4
    4726:	50 40       	sbci	r21, 0x00	; 0
    4728:	c9 01       	movw	r24, r18
    472a:	88 0f       	add	r24, r24
    472c:	99 1f       	adc	r25, r25
    472e:	82 0f       	add	r24, r18
    4730:	93 1f       	adc	r25, r19
    4732:	9e 01       	movw	r18, r28
    4734:	2f 5f       	subi	r18, 0xFF	; 255
    4736:	3f 4f       	sbci	r19, 0xFF	; 255
    4738:	82 0f       	add	r24, r18
    473a:	93 1f       	adc	r25, r19
    473c:	84 0f       	add	r24, r20
    473e:	95 1f       	adc	r25, r21
    4740:	fc 01       	movw	r30, r24
    4742:	73 96       	adiw	r30, 0x13	; 19
    4744:	80 81       	ld	r24, Z
    4746:	8a 8b       	std	Y+18, r24	; 0x12
					}

					if( key==bufferData ){
    4748:	9b 89       	ldd	r25, Y+19	; 0x13
    474a:	8a 89       	ldd	r24, Y+18	; 0x12
    474c:	98 17       	cp	r25, r24
    474e:	21 f4       	brne	.+8      	; 0x4758 <HKEYPAD_u8getCharecterValue+0x108>
						k++;
    4750:	8f 85       	ldd	r24, Y+15	; 0x0f
    4752:	8f 5f       	subi	r24, 0xFF	; 255
    4754:	8f 87       	std	Y+15, r24	; 0x0f
    4756:	0b c0       	rjmp	.+22     	; 0x476e <HKEYPAD_u8getCharecterValue+0x11e>
					}else if( (key != bufferData) && key !='0'){
    4758:	9b 89       	ldd	r25, Y+19	; 0x13
    475a:	8a 89       	ldd	r24, Y+18	; 0x12
    475c:	98 17       	cp	r25, r24
    475e:	39 f0       	breq	.+14     	; 0x476e <HKEYPAD_u8getCharecterValue+0x11e>
    4760:	8b 89       	ldd	r24, Y+19	; 0x13
    4762:	80 33       	cpi	r24, 0x30	; 48
    4764:	21 f0       	breq	.+8      	; 0x476e <HKEYPAD_u8getCharecterValue+0x11e>
						k=1;
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	8f 87       	std	Y+15, r24	; 0x0f
						bufferData = key;
    476a:	8b 89       	ldd	r24, Y+19	; 0x13
    476c:	8a 8b       	std	Y+18, r24	; 0x12
					}

					if(bufferData=='y' && k==3){
    476e:	8a 89       	ldd	r24, Y+18	; 0x12
    4770:	89 37       	cpi	r24, 0x79	; 121
    4772:	31 f4       	brne	.+12     	; 0x4780 <HKEYPAD_u8getCharecterValue+0x130>
    4774:	8f 85       	ldd	r24, Y+15	; 0x0f
    4776:	83 30       	cpi	r24, 0x03	; 3
    4778:	19 f4       	brne	.+6      	; 0x4780 <HKEYPAD_u8getCharecterValue+0x130>
						return '\b';
    477a:	f8 e0       	ldi	r31, 0x08	; 8
    477c:	fa a3       	std	Y+34, r31	; 0x22
    477e:	b8 c0       	rjmp	.+368    	; 0x48f0 <HKEYPAD_u8getCharecterValue+0x2a0>
					}
					if (key=='*' || key == '#'){
    4780:	8b 89       	ldd	r24, Y+19	; 0x13
    4782:	8a 32       	cpi	r24, 0x2A	; 42
    4784:	19 f0       	breq	.+6      	; 0x478c <HKEYPAD_u8getCharecterValue+0x13c>
    4786:	8b 89       	ldd	r24, Y+19	; 0x13
    4788:	83 32       	cpi	r24, 0x23	; 35
    478a:	19 f4       	brne	.+6      	; 0x4792 <HKEYPAD_u8getCharecterValue+0x142>
						return key;
    478c:	8b 89       	ldd	r24, Y+19	; 0x13
    478e:	8a a3       	std	Y+34, r24	; 0x22
    4790:	af c0       	rjmp	.+350    	; 0x48f0 <HKEYPAD_u8getCharecterValue+0x2a0>
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	a0 ea       	ldi	r26, 0xA0	; 160
    4798:	b1 e4       	ldi	r27, 0x41	; 65
    479a:	8b 87       	std	Y+11, r24	; 0x0b
    479c:	9c 87       	std	Y+12, r25	; 0x0c
    479e:	ad 87       	std	Y+13, r26	; 0x0d
    47a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    47a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    47a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    47a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    47aa:	20 e0       	ldi	r18, 0x00	; 0
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	4a ef       	ldi	r20, 0xFA	; 250
    47b0:	54 e4       	ldi	r21, 0x44	; 68
    47b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b6:	dc 01       	movw	r26, r24
    47b8:	cb 01       	movw	r24, r22
    47ba:	8f 83       	std	Y+7, r24	; 0x07
    47bc:	98 87       	std	Y+8, r25	; 0x08
    47be:	a9 87       	std	Y+9, r26	; 0x09
    47c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47c2:	6f 81       	ldd	r22, Y+7	; 0x07
    47c4:	78 85       	ldd	r23, Y+8	; 0x08
    47c6:	89 85       	ldd	r24, Y+9	; 0x09
    47c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	40 e8       	ldi	r20, 0x80	; 128
    47d0:	5f e3       	ldi	r21, 0x3F	; 63
    47d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47d6:	88 23       	and	r24, r24
    47d8:	2c f4       	brge	.+10     	; 0x47e4 <HKEYPAD_u8getCharecterValue+0x194>
		__ticks = 1;
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	9e 83       	std	Y+6, r25	; 0x06
    47e0:	8d 83       	std	Y+5, r24	; 0x05
    47e2:	3f c0       	rjmp	.+126    	; 0x4862 <HKEYPAD_u8getCharecterValue+0x212>
	else if (__tmp > 65535)
    47e4:	6f 81       	ldd	r22, Y+7	; 0x07
    47e6:	78 85       	ldd	r23, Y+8	; 0x08
    47e8:	89 85       	ldd	r24, Y+9	; 0x09
    47ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	3f ef       	ldi	r19, 0xFF	; 255
    47f0:	4f e7       	ldi	r20, 0x7F	; 127
    47f2:	57 e4       	ldi	r21, 0x47	; 71
    47f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47f8:	18 16       	cp	r1, r24
    47fa:	4c f5       	brge	.+82     	; 0x484e <HKEYPAD_u8getCharecterValue+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    47fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4800:	8d 85       	ldd	r24, Y+13	; 0x0d
    4802:	9e 85       	ldd	r25, Y+14	; 0x0e
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	30 e0       	ldi	r19, 0x00	; 0
    4808:	40 e2       	ldi	r20, 0x20	; 32
    480a:	51 e4       	ldi	r21, 0x41	; 65
    480c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4810:	dc 01       	movw	r26, r24
    4812:	cb 01       	movw	r24, r22
    4814:	bc 01       	movw	r22, r24
    4816:	cd 01       	movw	r24, r26
    4818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    481c:	dc 01       	movw	r26, r24
    481e:	cb 01       	movw	r24, r22
    4820:	9e 83       	std	Y+6, r25	; 0x06
    4822:	8d 83       	std	Y+5, r24	; 0x05
    4824:	0f c0       	rjmp	.+30     	; 0x4844 <HKEYPAD_u8getCharecterValue+0x1f4>
    4826:	88 ec       	ldi	r24, 0xC8	; 200
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	9c 83       	std	Y+4, r25	; 0x04
    482c:	8b 83       	std	Y+3, r24	; 0x03
    482e:	8b 81       	ldd	r24, Y+3	; 0x03
    4830:	9c 81       	ldd	r25, Y+4	; 0x04
    4832:	01 97       	sbiw	r24, 0x01	; 1
    4834:	f1 f7       	brne	.-4      	; 0x4832 <HKEYPAD_u8getCharecterValue+0x1e2>
    4836:	9c 83       	std	Y+4, r25	; 0x04
    4838:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    483a:	8d 81       	ldd	r24, Y+5	; 0x05
    483c:	9e 81       	ldd	r25, Y+6	; 0x06
    483e:	01 97       	sbiw	r24, 0x01	; 1
    4840:	9e 83       	std	Y+6, r25	; 0x06
    4842:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4844:	8d 81       	ldd	r24, Y+5	; 0x05
    4846:	9e 81       	ldd	r25, Y+6	; 0x06
    4848:	00 97       	sbiw	r24, 0x00	; 0
    484a:	69 f7       	brne	.-38     	; 0x4826 <HKEYPAD_u8getCharecterValue+0x1d6>
    484c:	14 c0       	rjmp	.+40     	; 0x4876 <HKEYPAD_u8getCharecterValue+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    484e:	6f 81       	ldd	r22, Y+7	; 0x07
    4850:	78 85       	ldd	r23, Y+8	; 0x08
    4852:	89 85       	ldd	r24, Y+9	; 0x09
    4854:	9a 85       	ldd	r25, Y+10	; 0x0a
    4856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	9e 83       	std	Y+6, r25	; 0x06
    4860:	8d 83       	std	Y+5, r24	; 0x05
    4862:	8d 81       	ldd	r24, Y+5	; 0x05
    4864:	9e 81       	ldd	r25, Y+6	; 0x06
    4866:	9a 83       	std	Y+2, r25	; 0x02
    4868:	89 83       	std	Y+1, r24	; 0x01
    486a:	89 81       	ldd	r24, Y+1	; 0x01
    486c:	9a 81       	ldd	r25, Y+2	; 0x02
    486e:	01 97       	sbiw	r24, 0x01	; 1
    4870:	f1 f7       	brne	.-4      	; 0x486e <HKEYPAD_u8getCharecterValue+0x21e>
    4872:	9a 83       	std	Y+2, r25	; 0x02
    4874:	89 83       	std	Y+1, r24	; 0x01
	u8 keys[4][3]={{'a','d','g'},{'j','m','p'},{'s','v','y'},{'*','0','#'}};
	u8 i , j, k =0;
	while( key!='0' && k<3 ){
		for( i=0; i<4; i++){
			DIO_VIDSetPinValue(PORT_NUM,i,LOW);
			for(j=4; j<7; j++){
    4876:	88 89       	ldd	r24, Y+16	; 0x10
    4878:	8f 5f       	subi	r24, 0xFF	; 255
    487a:	88 8b       	std	Y+16, r24	; 0x10
    487c:	88 89       	ldd	r24, Y+16	; 0x10
    487e:	87 30       	cpi	r24, 0x07	; 7
    4880:	08 f4       	brcc	.+2      	; 0x4884 <HKEYPAD_u8getCharecterValue+0x234>
    4882:	20 cf       	rjmp	.-448    	; 0x46c4 <HKEYPAD_u8getCharecterValue+0x74>
						return key;
					}
				}
				_delay_ms(20);
			}
			DIO_VIDSetPinValue(PORT_NUM,i,HIGH);
    4884:	82 e4       	ldi	r24, 0x42	; 66
    4886:	69 89       	ldd	r22, Y+17	; 0x11
    4888:	41 e0       	ldi	r20, 0x01	; 1
    488a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <DIO_VIDSetPinValue>
	u8 key =  '+';
	u8 bufferData = '+';
	u8 keys[4][3]={{'a','d','g'},{'j','m','p'},{'s','v','y'},{'*','0','#'}};
	u8 i , j, k =0;
	while( key!='0' && k<3 ){
		for( i=0; i<4; i++){
    488e:	89 89       	ldd	r24, Y+17	; 0x11
    4890:	8f 5f       	subi	r24, 0xFF	; 255
    4892:	89 8b       	std	Y+17, r24	; 0x11
    4894:	89 89       	ldd	r24, Y+17	; 0x11
    4896:	84 30       	cpi	r24, 0x04	; 4
    4898:	08 f4       	brcc	.+2      	; 0x489c <HKEYPAD_u8getCharecterValue+0x24c>
    489a:	0c cf       	rjmp	.-488    	; 0x46b4 <HKEYPAD_u8getCharecterValue+0x64>
u8 HKEYPAD_u8getCharecterValue(){
	u8 key =  '+';
	u8 bufferData = '+';
	u8 keys[4][3]={{'a','d','g'},{'j','m','p'},{'s','v','y'},{'*','0','#'}};
	u8 i , j, k =0;
	while( key!='0' && k<3 ){
    489c:	8b 89       	ldd	r24, Y+19	; 0x13
    489e:	80 33       	cpi	r24, 0x30	; 48
    48a0:	21 f0       	breq	.+8      	; 0x48aa <HKEYPAD_u8getCharecterValue+0x25a>
    48a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    48a4:	83 30       	cpi	r24, 0x03	; 3
    48a6:	08 f4       	brcc	.+2      	; 0x48aa <HKEYPAD_u8getCharecterValue+0x25a>
    48a8:	03 cf       	rjmp	.-506    	; 0x46b0 <HKEYPAD_u8getCharecterValue+0x60>
			}
			DIO_VIDSetPinValue(PORT_NUM,i,HIGH);
		}
	}

	return ((bufferData+k-1)>='a' && (bufferData+k-1)<='z')?(bufferData+k-1):'+';
    48aa:	8a 89       	ldd	r24, Y+18	; 0x12
    48ac:	28 2f       	mov	r18, r24
    48ae:	30 e0       	ldi	r19, 0x00	; 0
    48b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    48b2:	88 2f       	mov	r24, r24
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	82 0f       	add	r24, r18
    48b8:	93 1f       	adc	r25, r19
    48ba:	01 97       	sbiw	r24, 0x01	; 1
    48bc:	81 36       	cpi	r24, 0x61	; 97
    48be:	91 05       	cpc	r25, r1
    48c0:	9c f0       	brlt	.+38     	; 0x48e8 <HKEYPAD_u8getCharecterValue+0x298>
    48c2:	8a 89       	ldd	r24, Y+18	; 0x12
    48c4:	28 2f       	mov	r18, r24
    48c6:	30 e0       	ldi	r19, 0x00	; 0
    48c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    48ca:	88 2f       	mov	r24, r24
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	82 0f       	add	r24, r18
    48d0:	93 1f       	adc	r25, r19
    48d2:	01 97       	sbiw	r24, 0x01	; 1
    48d4:	8b 37       	cpi	r24, 0x7B	; 123
    48d6:	91 05       	cpc	r25, r1
    48d8:	3c f4       	brge	.+14     	; 0x48e8 <HKEYPAD_u8getCharecterValue+0x298>
    48da:	8a 89       	ldd	r24, Y+18	; 0x12
    48dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    48de:	89 0f       	add	r24, r25
    48e0:	98 2f       	mov	r25, r24
    48e2:	91 50       	subi	r25, 0x01	; 1
    48e4:	99 a3       	std	Y+33, r25	; 0x21
    48e6:	02 c0       	rjmp	.+4      	; 0x48ec <HKEYPAD_u8getCharecterValue+0x29c>
    48e8:	eb e2       	ldi	r30, 0x2B	; 43
    48ea:	e9 a3       	std	Y+33, r30	; 0x21
    48ec:	f9 a1       	ldd	r31, Y+33	; 0x21
    48ee:	fa a3       	std	Y+34, r31	; 0x22
    48f0:	8a a1       	ldd	r24, Y+34	; 0x22

}
    48f2:	a7 96       	adiw	r28, 0x27	; 39
    48f4:	0f b6       	in	r0, 0x3f	; 63
    48f6:	f8 94       	cli
    48f8:	de bf       	out	0x3e, r29	; 62
    48fa:	0f be       	out	0x3f, r0	; 63
    48fc:	cd bf       	out	0x3d, r28	; 61
    48fe:	cf 91       	pop	r28
    4900:	df 91       	pop	r29
    4902:	08 95       	ret

00004904 <__mulsi3>:
    4904:	62 9f       	mul	r22, r18
    4906:	d0 01       	movw	r26, r0
    4908:	73 9f       	mul	r23, r19
    490a:	f0 01       	movw	r30, r0
    490c:	82 9f       	mul	r24, r18
    490e:	e0 0d       	add	r30, r0
    4910:	f1 1d       	adc	r31, r1
    4912:	64 9f       	mul	r22, r20
    4914:	e0 0d       	add	r30, r0
    4916:	f1 1d       	adc	r31, r1
    4918:	92 9f       	mul	r25, r18
    491a:	f0 0d       	add	r31, r0
    491c:	83 9f       	mul	r24, r19
    491e:	f0 0d       	add	r31, r0
    4920:	74 9f       	mul	r23, r20
    4922:	f0 0d       	add	r31, r0
    4924:	65 9f       	mul	r22, r21
    4926:	f0 0d       	add	r31, r0
    4928:	99 27       	eor	r25, r25
    492a:	72 9f       	mul	r23, r18
    492c:	b0 0d       	add	r27, r0
    492e:	e1 1d       	adc	r30, r1
    4930:	f9 1f       	adc	r31, r25
    4932:	63 9f       	mul	r22, r19
    4934:	b0 0d       	add	r27, r0
    4936:	e1 1d       	adc	r30, r1
    4938:	f9 1f       	adc	r31, r25
    493a:	bd 01       	movw	r22, r26
    493c:	cf 01       	movw	r24, r30
    493e:	11 24       	eor	r1, r1
    4940:	08 95       	ret

00004942 <__udivmodqi4>:
    4942:	99 1b       	sub	r25, r25
    4944:	79 e0       	ldi	r23, 0x09	; 9
    4946:	04 c0       	rjmp	.+8      	; 0x4950 <__udivmodqi4_ep>

00004948 <__udivmodqi4_loop>:
    4948:	99 1f       	adc	r25, r25
    494a:	96 17       	cp	r25, r22
    494c:	08 f0       	brcs	.+2      	; 0x4950 <__udivmodqi4_ep>
    494e:	96 1b       	sub	r25, r22

00004950 <__udivmodqi4_ep>:
    4950:	88 1f       	adc	r24, r24
    4952:	7a 95       	dec	r23
    4954:	c9 f7       	brne	.-14     	; 0x4948 <__udivmodqi4_loop>
    4956:	80 95       	com	r24
    4958:	08 95       	ret

0000495a <__udivmodsi4>:
    495a:	a1 e2       	ldi	r26, 0x21	; 33
    495c:	1a 2e       	mov	r1, r26
    495e:	aa 1b       	sub	r26, r26
    4960:	bb 1b       	sub	r27, r27
    4962:	fd 01       	movw	r30, r26
    4964:	0d c0       	rjmp	.+26     	; 0x4980 <__udivmodsi4_ep>

00004966 <__udivmodsi4_loop>:
    4966:	aa 1f       	adc	r26, r26
    4968:	bb 1f       	adc	r27, r27
    496a:	ee 1f       	adc	r30, r30
    496c:	ff 1f       	adc	r31, r31
    496e:	a2 17       	cp	r26, r18
    4970:	b3 07       	cpc	r27, r19
    4972:	e4 07       	cpc	r30, r20
    4974:	f5 07       	cpc	r31, r21
    4976:	20 f0       	brcs	.+8      	; 0x4980 <__udivmodsi4_ep>
    4978:	a2 1b       	sub	r26, r18
    497a:	b3 0b       	sbc	r27, r19
    497c:	e4 0b       	sbc	r30, r20
    497e:	f5 0b       	sbc	r31, r21

00004980 <__udivmodsi4_ep>:
    4980:	66 1f       	adc	r22, r22
    4982:	77 1f       	adc	r23, r23
    4984:	88 1f       	adc	r24, r24
    4986:	99 1f       	adc	r25, r25
    4988:	1a 94       	dec	r1
    498a:	69 f7       	brne	.-38     	; 0x4966 <__udivmodsi4_loop>
    498c:	60 95       	com	r22
    498e:	70 95       	com	r23
    4990:	80 95       	com	r24
    4992:	90 95       	com	r25
    4994:	9b 01       	movw	r18, r22
    4996:	ac 01       	movw	r20, r24
    4998:	bd 01       	movw	r22, r26
    499a:	cf 01       	movw	r24, r30
    499c:	08 95       	ret

0000499e <__divmodsi4>:
    499e:	97 fb       	bst	r25, 7
    49a0:	09 2e       	mov	r0, r25
    49a2:	05 26       	eor	r0, r21
    49a4:	0e d0       	rcall	.+28     	; 0x49c2 <__divmodsi4_neg1>
    49a6:	57 fd       	sbrc	r21, 7
    49a8:	04 d0       	rcall	.+8      	; 0x49b2 <__divmodsi4_neg2>
    49aa:	d7 df       	rcall	.-82     	; 0x495a <__udivmodsi4>
    49ac:	0a d0       	rcall	.+20     	; 0x49c2 <__divmodsi4_neg1>
    49ae:	00 1c       	adc	r0, r0
    49b0:	38 f4       	brcc	.+14     	; 0x49c0 <__divmodsi4_exit>

000049b2 <__divmodsi4_neg2>:
    49b2:	50 95       	com	r21
    49b4:	40 95       	com	r20
    49b6:	30 95       	com	r19
    49b8:	21 95       	neg	r18
    49ba:	3f 4f       	sbci	r19, 0xFF	; 255
    49bc:	4f 4f       	sbci	r20, 0xFF	; 255
    49be:	5f 4f       	sbci	r21, 0xFF	; 255

000049c0 <__divmodsi4_exit>:
    49c0:	08 95       	ret

000049c2 <__divmodsi4_neg1>:
    49c2:	f6 f7       	brtc	.-4      	; 0x49c0 <__divmodsi4_exit>
    49c4:	90 95       	com	r25
    49c6:	80 95       	com	r24
    49c8:	70 95       	com	r23
    49ca:	61 95       	neg	r22
    49cc:	7f 4f       	sbci	r23, 0xFF	; 255
    49ce:	8f 4f       	sbci	r24, 0xFF	; 255
    49d0:	9f 4f       	sbci	r25, 0xFF	; 255
    49d2:	08 95       	ret

000049d4 <__prologue_saves__>:
    49d4:	2f 92       	push	r2
    49d6:	3f 92       	push	r3
    49d8:	4f 92       	push	r4
    49da:	5f 92       	push	r5
    49dc:	6f 92       	push	r6
    49de:	7f 92       	push	r7
    49e0:	8f 92       	push	r8
    49e2:	9f 92       	push	r9
    49e4:	af 92       	push	r10
    49e6:	bf 92       	push	r11
    49e8:	cf 92       	push	r12
    49ea:	df 92       	push	r13
    49ec:	ef 92       	push	r14
    49ee:	ff 92       	push	r15
    49f0:	0f 93       	push	r16
    49f2:	1f 93       	push	r17
    49f4:	cf 93       	push	r28
    49f6:	df 93       	push	r29
    49f8:	cd b7       	in	r28, 0x3d	; 61
    49fa:	de b7       	in	r29, 0x3e	; 62
    49fc:	ca 1b       	sub	r28, r26
    49fe:	db 0b       	sbc	r29, r27
    4a00:	0f b6       	in	r0, 0x3f	; 63
    4a02:	f8 94       	cli
    4a04:	de bf       	out	0x3e, r29	; 62
    4a06:	0f be       	out	0x3f, r0	; 63
    4a08:	cd bf       	out	0x3d, r28	; 61
    4a0a:	09 94       	ijmp

00004a0c <__epilogue_restores__>:
    4a0c:	2a 88       	ldd	r2, Y+18	; 0x12
    4a0e:	39 88       	ldd	r3, Y+17	; 0x11
    4a10:	48 88       	ldd	r4, Y+16	; 0x10
    4a12:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a14:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a16:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a18:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a1e:	b9 84       	ldd	r11, Y+9	; 0x09
    4a20:	c8 84       	ldd	r12, Y+8	; 0x08
    4a22:	df 80       	ldd	r13, Y+7	; 0x07
    4a24:	ee 80       	ldd	r14, Y+6	; 0x06
    4a26:	fd 80       	ldd	r15, Y+5	; 0x05
    4a28:	0c 81       	ldd	r16, Y+4	; 0x04
    4a2a:	1b 81       	ldd	r17, Y+3	; 0x03
    4a2c:	aa 81       	ldd	r26, Y+2	; 0x02
    4a2e:	b9 81       	ldd	r27, Y+1	; 0x01
    4a30:	ce 0f       	add	r28, r30
    4a32:	d1 1d       	adc	r29, r1
    4a34:	0f b6       	in	r0, 0x3f	; 63
    4a36:	f8 94       	cli
    4a38:	de bf       	out	0x3e, r29	; 62
    4a3a:	0f be       	out	0x3f, r0	; 63
    4a3c:	cd bf       	out	0x3d, r28	; 61
    4a3e:	ed 01       	movw	r28, r26
    4a40:	08 95       	ret

00004a42 <_exit>:
    4a42:	f8 94       	cli

00004a44 <__stop_program>:
    4a44:	ff cf       	rjmp	.-2      	; 0x4a44 <__stop_program>
